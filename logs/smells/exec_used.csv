six.py,"{'type': 'function_call', 'line': 697, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 77, 'name': 'exec', 'args': ['compile', 'imported_objects'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 86, 'name': 'exec', 'args': ['options[command]'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 92, 'name': 'exec', 'args': ['sys.stdin.read'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1444, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1451, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1446, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1453, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1444, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1451, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
sandbox.py,"{'type': 'function_call', 'line': 45, 'name': 'exec', 'args': [None, 'globals', 'globals'], 'keywords': [], 'hasInputs': False}"
launch.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': [None, None], 'keywords': [], 'hasInputs': False}"
build_meta.py,"{'type': 'function_call', 'line': 126, 'name': 'exec', 'args': ['compile', 'locals'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
image_analyser.py,"{'type': 'function_call', 'line': 160, 'name': 'exec', 'args': ['compile', 'self.groups.__dict__'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 5, 'name': 'exec', 'args': ['open.read', 'main_ns'], 'keywords': [], 'hasInputs': False}"
_py_components_generation.py,"{'type': 'function_call', 'line': 187, 'name': 'exec', 'args': ['c.format', 'scope'], 'keywords': [], 'hasInputs': False}"
console.py,"{'type': 'function_call', 'line': 153, 'name': 'exec', 'args': ['options[command]', None, 'self.context'], 'keywords': [], 'hasInputs': False}"
console.py,"{'type': 'function_call', 'line': 157, 'name': 'exec', 'args': [None, None, 'self.context'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1438, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1445, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
lint.py,"{'type': 'function_call', 'line': 1677, 'name': 'exec', 'args': [None], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1438, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1445, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
pie_slice.py,"{'type': 'function_call', 'line': 172, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 697, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 77, 'name': 'exec', 'args': ['compile', 'imported_objects'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 86, 'name': 'exec', 'args': ['options[command]'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 92, 'name': 'exec', 'args': ['sys.stdin.read'], 'keywords': [], 'hasInputs': False}"
sandbox.py,"{'type': 'function_call', 'line': 45, 'name': 'exec', 'args': [None, 'globals', 'globals'], 'keywords': [], 'hasInputs': False}"
launch.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': [None, None], 'keywords': [], 'hasInputs': False}"
build_meta.py,"{'type': 'function_call', 'line': 72, 'name': 'exec', 'args': ['compile', 'locals'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
decorators.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 26, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
conf.py,"{'type': 'function_call', 'line': 95, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
site.py,"{'type': 'function_call', 'line': 173, 'name': 'exec', 'args': ['line'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 373, 'name': 'exec', 'args': [None, None], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1484, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1491, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1651, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1658, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 327, 'name': 'exec', 'args': ['exec code in globs, locs'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 98, 'name': 'exec', 'args': ['compile', 'imported_objects'], 'keywords': [], 'hasInputs': False}"
launch.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': [None, None], 'keywords': [], 'hasInputs': False}"
ImageCms.py,"{'type': 'function_call', 'line': 961, 'name': 'exec', 'args': ['doc = %s.__doc__f'], 'keywords': [], 'hasInputs': False}"
_bootstrap.py,"{'type': 'function_call', 'line': 1359, 'name': 'exec', 'args': ['f', 'module.__dict__'], 'keywords': [], 'hasInputs': False}"
setupbase.py,"{'type': 'function_call', 'line': 42, 'name': 'exec', 'args': ['compile', 'globs', None], 'keywords': [], 'hasInputs': False}"
setupegg.py,"{'type': 'function_call', 'line': 7, 'name': 'exec', 'args': ['compile'], 'keywords': [], 'hasInputs': False}"
conf.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': ['compile'], 'keywords': [], 'hasInputs': False}"
conf.py,"{'type': 'function_call', 'line': 47, 'name': 'exec', 'args': ['compile', 'iprelease'], 'keywords': [], 'hasInputs': False}"
apigen.py,"{'type': 'function_call', 'line': 220, 'name': 'exec', 'args': ['from %s import *uri', 'ns'], 'keywords': [], 'hasInputs': False}"
toollib.py,"{'type': 'function_call', 'line': 50, 'name': 'exec', 'args': ['compile', 'globs', None], 'keywords': [], 'hasInputs': False}"
demo.py,"{'type': 'function_call', 'line': 449, 'name': 'exec', 'args': ['source', 'self.user_ns'], 'keywords': [], 'hasInputs': False}"
py3compat.py,"{'type': 'function_call', 'line': 148, 'name': 'exec', 'args': [None, 'glob', None], 'keywords': [], 'hasInputs': False}"
interactiveshell.py,"{'type': 'function_call', 'line': 2679, 'name': 'exec', 'args': ['""pushd %s &&""%s', 'self.user_global_ns', 'self.user_ns'], 'keywords': [], 'hasInputs': False}"
interactiveshell.py,"{'type': 'function_call', 'line': 3301, 'name': 'exec', 'args': [None, 'self.user_global_ns', 'self.user_ns'], 'keywords': [], 'hasInputs': False}"
interactiveshell.py,"{'type': 'function_call', 'line': 3406, 'name': 'exec', 'args': [None], 'keywords': [], 'hasInputs': False}"
interactiveshell.py,"{'type': 'function_call', 'line': 3410, 'name': 'exec', 'args': ['code_obj', 'self.user_global_ns', 'self.user_ns'], 'keywords': [], 'hasInputs': False}"
pylabtools.py,"{'type': 'function_call', 'line': 348, 'name': 'exec', 'args': ['import numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\n', 'user_ns'], 'keywords': [], 'hasInputs': False}"
pylabtools.py,"{'type': 'function_call', 'line': 353, 'name': 'exec', 'args': ['from matplotlib.pylab import *\nfrom numpy import *\n', 'user_ns'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 152, 'name': 'exec', 'args': ['cfg.', 'self.shell.user_ns', 'locals'], 'keywords': [], 'hasInputs': False}"
execution.py,"{'type': 'function_call', 'line': 1143, 'name': 'exec', 'args': [None, 'self.shell.user_ns', 'ns'], 'keywords': [], 'hasInputs': False}"
execution.py,"{'type': 'function_call', 'line': 1305, 'name': 'exec', 'args': [None, 'self.shell.user_ns', 'local_ns'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 46, 'name': 'exec', 'args': ['f.read', 'about'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 12, 'name': 'exec', 'args': ['from parsers import %smodule_name'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 4, 'name': 'exec', 'args': ['from loggers import %slogger'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 12, 'name': 'exec', 'args': ['from parsers import %smodule_name'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 12, 'name': 'exec', 'args': ['from parsers import %smodule_name'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 4, 'name': 'exec', 'args': ['from loggers import %slogger'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 4, 'name': 'exec', 'args': ['from loggers import %slogger'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 15, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
conf.py,"{'type': 'function_call', 'line': 26, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
settings.py,"{'type': 'function_call', 'line': 410, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 37, 'name': 'exec', 'args': [None, '_globals'], 'keywords': [], 'hasInputs': False}"
conf.py,"{'type': 'function_call', 'line': 46, 'name': 'exec', 'args': [None, '_globals'], 'keywords': [], 'hasInputs': False}"
site.py,"{'type': 'function_call', 'line': 173, 'name': 'exec', 'args': ['line'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1527, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1534, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 170, 'name': 'exec', 'args': ['exec func_text in globals_, lcl'], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 196, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None, cause=None):\n    raise tp, value, tb\n'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1499, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1506, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
setuptools_ext.py,"{'type': 'function_call', 'line': 25, 'name': 'exec', 'args': [None, 'glob', 'glob'], 'keywords': [], 'hasInputs': False}"
sandbox.py,"{'type': 'function_call', 'line': 45, 'name': 'exec', 'args': [None, 'globals', 'globals'], 'keywords': [], 'hasInputs': False}"
launch.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': [None, None], 'keywords': [], 'hasInputs': False}"
build_meta.py,"{'type': 'function_call', 'line': 72, 'name': 'exec', 'args': ['compile', 'locals'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 67, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 130, 'name': 'exec', 'args': ['compile', 'd.__dict__'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 48, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
lex.py,"{'type': 'function_call', 'line': 215, 'name': 'exec', 'args': ['import %stabfile'], 'keywords': [], 'hasInputs': False}"
lex.py,"{'type': 'function_call', 'line': 1039, 'name': 'exec', 'args': ['import %s'], 'keywords': [], 'hasInputs': False}"
yacc.py,"{'type': 'function_call', 'line': 1982, 'name': 'exec', 'args': ['import %smodule'], 'keywords': [], 'hasInputs': False}"
yacc.py,"{'type': 'function_call', 'line': 3254, 'name': 'exec', 'args': ['import %s'], 'keywords': [], 'hasInputs': False}"
instrumentation.py,"{'type': 'function_call', 'line': 519, 'name': 'exec', 'args': ['def __init__(%(apply_pos)s):\n    new_state = class_manager._new_state_if_none(%(self_arg)s)\n    if new_state:\n        return new_state._initialize_instance(%(apply_kw)s)\n    else:\n        return original__init__(%(apply_kw)s)\n', None], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 192, 'name': 'exec', 'args': [""def reraise(tp, value, tb=None, cause=None):\n    if cause is not None:\n        assert cause is not value, 'Same cause emitted'\n    raise tp, value, tb\n""], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 210, 'name': 'exec', 'args': ['exec func_text in globals_'], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 212, 'name': 'exec', 'args': ['exec func_text in globals_, lcl'], 'keywords': [], 'hasInputs': False}"
langhelpers.py,"{'type': 'function_call', 'line': 144, 'name': 'exec', 'args': ['def %(name)s(%(args)s):\n    return %(target)s(%(fn)s, %(apply_kw)s)\n', 'env'], 'keywords': [], 'hasInputs': False}"
langhelpers.py,"{'type': 'function_call', 'line': 178, 'name': 'exec', 'args': ['def %(name)s(%(args)s):\n    return cls(%(apply_kw)s)\n', 'env'], 'keywords': [], 'hasInputs': False}"
langhelpers.py,"{'type': 'function_call', 'line': 1372, 'name': 'exec', 'args': ['def set(obj, value):    obj.%s = valueattrname', None], 'keywords': [], 'hasInputs': False}"
_builtin.py,"{'type': 'function_call', 'line': 117, 'name': 'exec', 'args': ['print_ = print ; exec_=exec'], 'keywords': [], 'hasInputs': False}"
_builtin.py,"{'type': 'function_call', 'line': 229, 'name': 'exec', 'args': ['\ndef _reraise(cls, val, tb):\n    __tracebackhide__ = True\n    raise cls, val, tb\ndef exec2(obj, globals, locals):\n    __tracebackhide__ = True\n    exec obj in globals, locals\n'], 'keywords': [], 'hasInputs': False}"
callers.py,"{'type': 'function_call', 'line': 11, 'name': 'exec', 'args': ['\ndef _reraise(cls, val, tb):\n    raise cls, val, tb\n'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 36, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 103, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None, cause=None):\n    raise tp, value, tb\n'], 'keywords': [], 'hasInputs': False}"
template.py,"{'type': 'function_call', 'line': 714, 'name': 'exec', 'args': [None, 'module.__dict__', 'module.__dict__'], 'keywords': [], 'hasInputs': False}"
environment.py,"{'type': 'function_call', 'line': 956, 'name': 'exec', 'args': [None, 'namespace'], 'keywords': [], 'hasInputs': False}"
compiler.py,"{'type': 'function_call', 'line': 49, 'name': 'exec', 'args': ['from __future__ import generator_stop'], 'keywords': [], 'hasInputs': False}"
compiler.py,"{'type': 'function_call', 'line': 56, 'name': 'exec', 'args': ['def f(): yield from x()'], 'keywords': [], 'hasInputs': False}"
debug.py,"{'type': 'function_call', 'line': 29, 'name': 'exec', 'args': [""raise TypeError, 'foo'""], 'keywords': [], 'hasInputs': False}"
debug.py,"{'type': 'function_call', 'line': 289, 'name': 'exec', 'args': [None, 'globals', 'locals'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 64, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
flipkart.py,"{'type': 'function_call', 'line': 9, 'name': 'exec', 'args': ['rnf.read'], 'keywords': [], 'hasInputs': False}"
prediction.py,"{'type': 'function_call', 'line': 9, 'name': 'exec', 'args': ['rnf.read'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 37, 'name': 'exec', 'args': [None, 'globals', 'locals'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 64, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 327, 'name': 'exec', 'args': ['exec code in globs, locs'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 3, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
script_runner.py,"{'type': 'function_call', 'line': 324, 'name': 'exec', 'args': [None, 'module.__dict__'], 'keywords': [], 'hasInputs': False}"
caching.py,"{'type': 'function_call', 'line': 718, 'name': 'exec', 'args': [None, 'caller_frame.f_globals', 'caller_frame.f_locals'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 317, 'name': 'exec', 'args': ['%s = lambda *args: _mock_call(""%s"", args)', 'globals'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 321, 'name': 'exec', 'args': ['%s = lambda *args: _js_call(""%s"", args)', 'globals'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1438, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1445, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1453, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1460, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
py3compat.py,"{'type': 'function_call', 'line': 99, 'name': 'exec', 'args': ['def _reraise(exc, value, trace):\n    raise exc, value, trace\n'], 'keywords': [], 'hasInputs': False}"
_py_components_generation.py,"{'type': 'function_call', 'line': 195, 'name': 'exec', 'args': ['c.format', 'scope'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 697, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 77, 'name': 'exec', 'args': ['compile', 'imported_objects'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 86, 'name': 'exec', 'args': ['options[command]'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 92, 'name': 'exec', 'args': ['sys.stdin.read'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 132, 'name': 'exec', 'args': ['compile', 'd.__dict__'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 52, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 638, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
decorators.py,"{'type': 'function_call', 'line': 31, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
overrides.py,"{'type': 'function_call', 'line': 182, 'name': 'exec', 'args': [None, 'scope'], 'keywords': [], 'hasInputs': False}"
plotlyjs.py,"{'type': 'function_call', 'line': 177, 'name': 'exec', 'args': ['None.format'], 'keywords': [], 'hasInputs': False}"
generic.py,"{'type': 'function_call', 'line': 744, 'name': 'exec', 'args': ['_def_str'], 'keywords': [], 'hasInputs': False}"
generic.py,"{'type': 'function_call', 'line': 1360, 'name': 'exec', 'args': ['_def_str'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
routing.py,"{'type': 'function_call', 'line': 858, 'name': 'exec', 'args': [308, 'globs', 'locs'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 36, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
environment.py,"{'type': 'function_call', 'line': 956, 'name': 'exec', 'args': [None, 'namespace'], 'keywords': [], 'hasInputs': False}"
compiler.py,"{'type': 'function_call', 'line': 49, 'name': 'exec', 'args': ['from __future__ import generator_stop'], 'keywords': [], 'hasInputs': False}"
compiler.py,"{'type': 'function_call', 'line': 56, 'name': 'exec', 'args': ['def f(): yield from x()'], 'keywords': [], 'hasInputs': False}"
debug.py,"{'type': 'function_call', 'line': 29, 'name': 'exec', 'args': [""raise TypeError, 'foo'""], 'keywords': [], 'hasInputs': False}"
debug.py,"{'type': 'function_call', 'line': 289, 'name': 'exec', 'args': [None, 'globals', 'locals'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 64, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
speed-cam.py,"{'type': 'function_call', 'line': 195, 'name': 'exec', 'args': ['key'], 'keywords': [], 'hasInputs': False}"
speed-cam.py,"{'type': 'function_call', 'line': 198, 'name': 'exec', 'args': ['key=val'], 'keywords': [], 'hasInputs': False}"
site.py,"{'type': 'function_call', 'line': 39, 'name': 'exec', 'args': ['file.read', 'config'], 'keywords': [], 'hasInputs': False}"
legacy.py,"{'type': 'function_call', 'line': 315, 'name': 'exec', 'args': [None, 'global_vars', 'global_vars'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 14, 'name': 'exec', 'args': ['fp.read', 'version'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 36, 'name': 'exec', 'args': [None, 'local_settings_ns'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 624, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 129, 'name': 'exec', 'args': ['compile', 'd.__dict__'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 48, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 30, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1444, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1451, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 26, 'name': 'exec', 'args': ['line.strip', None, None], 'keywords': [], 'hasInputs': False}"
_bokeh.py,"{'type': 'function_call', 'line': 38, 'name': 'exec', 'args': ['import bokeh.resources', 'ns', 'ns'], 'keywords': [], 'hasInputs': False}"
_bokeh.py,"{'type': 'function_call', 'line': 66, 'name': 'exec', 'args': ['from bokeh.models import Plot', 'ns', 'ns'], 'keywords': [], 'hasInputs': False}"
_bokeh.py,"{'type': 'function_call', 'line': 67, 'name': 'exec', 'args': ['from bokeh.embed import components', 'ns', 'ns'], 'keywords': [], 'hasInputs': False}"
_funcs.py,"{'type': 'function_call', 'line': 91, 'name': 'exec', 'args': ['from IPython import get_ipython', 'globals', 'ldict'], 'keywords': [], 'hasInputs': False}"
_funcs.py,"{'type': 'function_call', 'line': 114, 'name': 'exec', 'args': ['from IPython.display import display, Javascript', 'globals', 'ldict'], 'keywords': [], 'hasInputs': False}"
_funcs.py,"{'type': 'function_call', 'line': 146, 'name': 'exec', 'args': ['from IPython.display import display, clear_output, HTML', 'globals', 'ldict'], 'keywords': [], 'hasInputs': False}"
model.py,"{'type': 'function_call', 'line': 1335, 'name': 'exec', 'args': ['compile', '_globals', '_locals'], 'keywords': [], 'hasInputs': False}"
model.py,"{'type': 'function_call', 'line': 1497, 'name': 'exec', 'args': [None, 'globals'], 'keywords': [], 'hasInputs': False}"
dataclasses.py,"{'type': 'function_call', 'line': 356, 'name': 'exec', 'args': [None, 'globals', 'locals'], 'keywords': [], 'hasInputs': False}"
renderer.py,"{'type': 'function_call', 'line': 38, 'name': 'exec', 'args': ['open.read', 'filters'], 'keywords': [], 'hasInputs': False}"
themes.py,"{'type': 'function_call', 'line': 26, 'name': 'exec', 'args': ['open.read', None], 'keywords': [], 'hasInputs': False}"
PythonVersions.py,"{'type': 'function_call', 'line': 91, 'name': 'exec', 'args': ['\ndef f():\n   exec """"\n   def nested():\n      return closure'], 'keywords': [], 'hasInputs': False}"
__main__.py,"{'type': 'function_call', 'line': 51, 'name': 'exec', 'args': ['from %s import %s'], 'keywords': [], 'hasInputs': False}"
Taskmaster.py,"{'type': 'function_call', 'line': 559, 'name': 'exec', 'args': ['raise exc_type, exc_value, exc_traceback'], 'keywords': [], 'hasInputs': False}"
Taskmaster.py,"{'type': 'function_call', 'line': 563, 'name': 'exec', 'args': ['raise exc_value.with_traceback(exc_traceback)'], 'keywords': [], 'hasInputs': False}"
Taskmaster.py,"{'type': 'function_call', 'line': 566, 'name': 'exec', 'args': ['raise exc_type(exc_value).with_traceback(exc_traceback)'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 184, 'name': 'exec', 'args': [None, 'values'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 387, 'name': 'exec', 'args': ['%s = _SConscript.DefaultEnvironmentCall(%s)'], 'keywords': [], 'hasInputs': False}"
SConscript.py,"{'type': 'function_call', 'line': 198, 'name': 'exec', 'args': ['sys.stdin.read', 'call_stack.globals'], 'keywords': [], 'hasInputs': False}"
SConscript.py,"{'type': 'function_call', 'line': 286, 'name': 'exec', 'args': ['compile', 'call_stack.globals'], 'keywords': [], 'hasInputs': False}"
Main.py,"{'type': 'function_call', 'line': 751, 'name': 'exec', 'args': ['compile', 'site_m'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 124, 'name': 'exec', 'args': ['from UserDict import UserDict as _UserDict'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 130, 'name': 'exec', 'args': ['from UserList import UserList as _UserList'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 136, 'name': 'exec', 'args': ['from UserString import UserString as _UserString'], 'keywords': [], 'hasInputs': False}"
_scons_sets.py,"{'type': 'function_call', 'line': 58, 'name': 'exec', 'args': ['from itertools import ifilterfalse as filterfalse'], 'keywords': [], 'hasInputs': False}"
_scons_collections.py,"{'type': 'function_call', 'line': 36, 'name': 'exec', 'args': ['if True:\n            from UserDict import UserDict\n            from UserList import UserList\n            from UserString import UserString'], 'keywords': [], 'hasInputs': False}"
TreeHelpers.py,"{'type': 'function_call', 'line': 392, 'name': 'exec', 'args': [None, 'm'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 35, 'name': 'exec', 'args': ['f.read', 'about'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 73, 'name': 'exec', 'args': ['f.read'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 79, 'name': 'exec', 'args': ['f.read'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 672, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 30, 'name': 'exec', 'args': ['None.join', 'info'], 'keywords': [], 'hasInputs': False}"
settings.py,"{'type': 'function_call', 'line': 271, 'name': 'exec', 'args': ['open.read'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 719, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
contextlib2.py,"{'type': 'function_call', 'line': 353, 'name': 'exec', 'args': ['raise exc_type, exc_value, exc_tb'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 77, 'name': 'exec', 'args': ['compile', 'imported_objects'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 86, 'name': 'exec', 'args': ['options[command]'], 'keywords': [], 'hasInputs': False}"
shell.py,"{'type': 'function_call', 'line': 92, 'name': 'exec', 'args': ['sys.stdin.read'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 753, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 342, 'name': 'exec', 'args': ['f.read', 'version_file'], 'keywords': [], 'hasInputs': False}"
update.py,"{'type': 'function_call', 'line': 51, 'name': 'exec', 'args': ['f.read', 'version_info'], 'keywords': [], 'hasInputs': False}"
py3compat.py,"{'type': 'function_call', 'line': 99, 'name': 'exec', 'args': ['def _reraise(exc, value, trace):\n    raise exc, value, trace\n'], 'keywords': [], 'hasInputs': False}"
setuptools_ext.py,"{'type': 'function_call', 'line': 25, 'name': 'exec', 'args': [None, 'glob', 'glob'], 'keywords': [], 'hasInputs': False}"
tsafe.py,"{'type': 'function_call', 'line': 26, 'name': 'exec', 'args': ['def %s(self, *args):\n            self._lock.acquire()\n            try:\n                return self._ssl_conn.%s(*args)\n            finally:\n                self._lock.release()\n'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 709, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1444, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
__init__.py,"{'type': 'function_call', 'line': 1451, 'name': 'exec', 'args': [None, 'namespace', 'namespace'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 699, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
xpathparser.py,"{'type': 'function_call', 'line': 44, 'name': 'exec', 'args': ['\nfrom __future__ import print_function\nimport sys, re\n\nMIN_WINDOW=4096\n# File lookup window\n\nclass SyntaxError(Exception):\n    """"""When we run into an unexpected token, this is the exception to use""""""\n    def __init__(self, pos=None, msg=""Bad Token"", context=None):\n        Exception.__init__(self)\n        self.pos = pos\n        self.msg = msg\n        self.context = context\n\n    def __str__(self):\n        if not self.pos: return \'SyntaxError\'\n        else: return \'SyntaxError@%s(%s)\' % (repr(self.pos), self.msg)\n\nclass NoMoreTokens(Exception):\n    """"""Another exception object, for when we run out of tokens""""""\n    pass\n\nclass Token(object):\n    """"""Yapps token.\n\n    This is a container for a scanned token.\n    """"""\n\n    def __init__(self, type,value, pos=None):\n        """"""Initialize a token.""""""\n        self.type = type\n        self.value = value\n        self.pos = pos\n\n    def __repr__(self):\n        output = \'<%s: %s\' % (self.type, repr(self.value))\n        if self.pos:\n            output += "" @ ""\n            if self.pos[0]:\n                output += ""%s:"" % self.pos[0]\n            if self.pos[1]:\n                output += ""%d"" % self.pos[1]\n            if self.pos[2] is not None:\n                output += "".%d"" % self.pos[2]\n        output += "">""\n        return output\n\nin_name=0\nclass Scanner(object):\n    """"""Yapps scanner.\n\n    The Yapps scanner can work in context sensitive or context\n    insensitive modes.  The token(i) method is used to retrieve the\n    i-th token.  It takes a restrict set that limits the set of tokens\n    it is allowed to return.  In context sensitive mode, this restrict\n    set guides the scanner.  In context insensitive mode, there is no\n    restriction (the set is always the full set of tokens).\n\n    """"""\n\n    def __init__(self, patterns, ignore, input="""",\n            file=None,filename=None,stacked=False):\n        """"""Initialize the scanner.\n\n        Parameters:\n          patterns : [(terminal, uncompiled regex), ...] or None\n          ignore : {terminal:None, ...}\n          input : string\n\n        If patterns is None, we assume that the subclass has\n        defined self.patterns : [(terminal, compiled regex), ...].\n        Note that the patterns parameter expects uncompiled regexes,\n        whereas the self.patterns field expects compiled regexes.\n\n        The \'ignore\' value is either None or a callable, which is called\n        with the scanner and the to-be-ignored match object; this can\n        be used for include file or comment handling.\n        """"""\n\n        if not filename:\n            global in_name\n            filename=""<f.%d>"" % in_name\n            in_name += 1\n\n        self.input = input\n        self.ignore = ignore\n        self.file = file\n        self.filename = filename\n        self.pos = 0\n        self.del_pos = 0 # skipped\n        self.line = 1\n        self.del_line = 0 # skipped\n        self.col = 0\n        self.tokens = []\n        self.stack = None\n        self.stacked = stacked\n\n        self.last_read_token = None\n        self.last_token = None\n        self.last_types = None\n\n        if patterns is not None:\n            # Compile the regex strings into regex objects\n            self.patterns = []\n            for terminal, regex in patterns:\n                self.patterns.append( (terminal, re.compile(regex)) )\n\n    def stack_input(self, input="""", file=None, filename=None):\n        """"""Temporarily parse from a second file.""""""\n\n        # Already reading from somewhere else: Go on top of that, please.\n        if self.stack:\n            # autogenerate a recursion-level-identifying filename\n            if not filename:\n                filename = 1\n            else:\n                try:\n                    filename += 1\n                except TypeError:\n                    pass\n                # now pass off to the include file\n            self.stack.stack_input(input,file,filename)\n        else:\n\n            try:\n                filename += 0\n            except TypeError:\n                pass\n            else:\n                filename = ""<str_%d>"" % filename\n\n#\t\t\tself.stack = object.__new__(self.__class__)\n#\t\t\tScanner.__init__(self.stack,self.patterns,self.ignore,input,file,filename, stacked=True)\n\n            # Note that the pattern+ignore are added by the generated\n            # scanner code\n            self.stack = self.__class__(input,file,filename, stacked=True)\n\n    def get_pos(self):\n        """"""Return a file/line/char tuple.""""""\n        if self.stack: return self.stack.get_pos()\n\n        return (self.filename, self.line+self.del_line, self.col)\n\n#\tdef __repr__(self):\n#\t\t""""""Print the last few tokens that have been scanned in""""""\n#\t\toutput = \'\'\n#\t\tfor t in self.tokens:\n#\t\t\toutput += \'%s\\n\' % (repr(t),)\n#\t\treturn output\n\n    def print_line_with_pointer(self, pos, length=0, out=sys.stderr):\n        """"""Print the line of \'text\' that includes position \'p\',\n        along with a second line with a single caret (^) at position p""""""\n\n        file,line,p = pos\n        if file != self.filename:\n            if self.stack: return self.stack.print_line_with_pointer(pos,length=length,out=out)\n            print >>out, ""(%s: not in input buffer)"" % file\n            return\n\n        text = self.input\n        p += length-1 # starts at pos 1\n\n        origline=line\n        line -= self.del_line\n        spos=0\n        if line > 0:\n            while 1:\n                line = line - 1\n                try:\n                    cr = text.index(""\\n"",spos)\n                except ValueError:\n                    if line:\n                        text = """"\n                    break\n                if line == 0:\n                    text = text[spos:cr]\n                    break\n                spos = cr+1\n        else:\n            print >>out, ""(%s:%d not in input buffer)"" % (file,origline)\n            return\n\n        # Now try printing part of the line\n        text = text[max(p-80, 0):p+80]\n        p = p - max(p-80, 0)\n\n        # Strip to the left\n        i = text[:p].rfind(\'\\n\')\n        j = text[:p].rfind(\'\\r\')\n        if i < 0 or (0 <= j < i): i = j\n        if 0 <= i < p:\n            p = p - i - 1\n            text = text[i+1:]\n\n        # Strip to the right\n        i = text.find(\'\\n\', p)\n        j = text.find(\'\\r\', p)\n        if i < 0 or (0 <= j < i): i = j\n        if i >= 0:\n            text = text[:i]\n\n        # Now shorten the text\n        while len(text) > 70 and p > 60:\n            # Cut off 10 chars\n            text = ""..."" + text[10:]\n            p = p - 7\n\n        # Now print the string, along with an indicator\n        print >>out, \'> \',text\n        print >>out, \'> \',\' \'*p + \'^\'\n\n    def grab_input(self):\n        """"""Get more input if possible.""""""\n        if not self.file: return\n        if len(self.input) - self.pos >= MIN_WINDOW: return\n\n        data = self.file.read(MIN_WINDOW)\n        if data is None or data == """":\n            self.file = None\n\n        # Drop bytes from the start, if necessary.\n        if self.pos > 2*MIN_WINDOW:\n            self.del_pos += MIN_WINDOW\n            self.del_line += self.input[:MIN_WINDOW].count(""\\n"")\n            self.pos -= MIN_WINDOW\n            self.input = self.input[MIN_WINDOW:] + data\n        else:\n            self.input = self.input + data\n\n    def getchar(self):\n        """"""Return the next character.""""""\n        self.grab_input()\n\n        c = self.input[self.pos]\n        self.pos += 1\n        return c\n\n    def token(self, restrict, context=None):\n        """"""Scan for another token.""""""\n\n        while 1:\n            if self.stack:\n                try:\n                    return self.stack.token(restrict, context)\n                except StopIteration:\n                    self.stack = None\n\n        # Keep looking for a token, ignoring any in self.ignore\n            self.grab_input()\n\n            # special handling for end-of-file\n            if self.stacked and self.pos==len(self.input):\n                raise StopIteration\n\n            # Search the patterns for the longest match, with earlier\n            # tokens in the list having preference\n            best_match = -1\n            best_pat = \'(error)\'\n            best_m = None\n            for p, regexp in self.patterns:\n                # First check to see if we\'re ignoring this token\n                if restrict and p not in restrict and p not in self.ignore:\n                    continue\n                m = regexp.match(self.input, self.pos)\n                if m and m.end()-m.start() > best_match:\n                    # We got a match that\'s better than the previous one\n                    best_pat = p\n                    best_match = m.end()-m.start()\n                    best_m = m\n\n            # If we didn\'t find anything, raise an error\n            if best_pat == \'(error)\' and best_match < 0:\n                msg = \'Bad Token\'\n                if restrict:\n                    msg = \'Trying to find one of \'+\', \'.join(restrict)\n                raise SyntaxError(self.get_pos(), msg, context=context)\n\n            ignore = best_pat in self.ignore\n            value = self.input[self.pos:self.pos+best_match]\n            if not ignore:\n                tok=Token(type=best_pat, value=value, pos=self.get_pos())\n\n            self.pos += best_match\n\n            npos = value.rfind(""\\n"")\n            if npos > -1:\n                self.col = best_match-npos\n                self.line += value.count(""\\n"")\n            else:\n                self.col += best_match\n\n            # If we found something that isn\'t to be ignored, return it\n            if not ignore:\n                if len(self.tokens) >= 10:\n                    del self.tokens[0]\n                self.tokens.append(tok)\n                self.last_read_token = tok\n                # print repr(tok)\n                return tok\n            else:\n                ignore = self.ignore[best_pat]\n                if ignore:\n                    ignore(self, best_m)\n\n    def peek(self, *types, **kw):\n        """"""Returns the token type for lookahead; if there are any args\n        then the list of args is the set of token types to allow""""""\n        context = kw.get(""context"",None)\n        if self.last_token is None:\n            self.last_types = types\n            self.last_token = self.token(types,context)\n        elif self.last_types:\n            for t in types:\n                if t not in self.last_types:\n                    raise NotImplementedError(""Unimplemented: restriction set changed"")\n        return self.last_token.type\n\n    def scan(self, type, **kw):\n        """"""Returns the matched text, and moves to the next token""""""\n        context = kw.get(""context"",None)\n\n        if self.last_token is None:\n            tok = self.token([type],context)\n        else:\n            if self.last_types and type not in self.last_types:\n                raise NotImplementedError(""Unimplemented: restriction set changed"")\n\n            tok = self.last_token\n            self.last_token = None\n        if tok.type != type:\n            if not self.last_types: self.last_types=[]\n            raise SyntaxError(tok.pos, \'Trying to find \'+type+\': \'+ \', \'.join(self.last_types)+"", got ""+tok.type, context=context)\n        return tok.value\n\nclass Parser(object):\n    """"""Base class for Yapps-generated parsers.\n\n    """"""\n\n    def __init__(self, scanner):\n        self._scanner = scanner\n\n    def _stack(self, input="""",file=None,filename=None):\n        """"""Temporarily read from someplace else""""""\n        self._scanner.stack_input(input,file,filename)\n        self._tok = None\n\n    def _peek(self, *types, **kw):\n        """"""Returns the token type for lookahead; if there are any args\n        then the list of args is the set of token types to allow""""""\n        return self._scanner.peek(*types, **kw)\n\n    def _scan(self, type, **kw):\n        """"""Returns the matched text, and moves to the next token""""""\n        return self._scanner.scan(type, **kw)\n\nclass Context(object):\n    """"""Class to represent the parser\'s call stack.\n\n    Every rule creates a Context that links to its parent rule.  The\n    contexts can be used for debugging.\n\n    """"""\n\n    def __init__(self, parent, scanner, rule, args=()):\n        """"""Create a new context.\n\n        Args:\n        parent: Context object or None\n        scanner: Scanner object\n        rule: string (name of the rule)\n        args: tuple listing parameters to the rule\n\n        """"""\n        self.parent = parent\n        self.scanner = scanner\n        self.rule = rule\n        self.args = args\n        while scanner.stack: scanner = scanner.stack\n        self.token = scanner.last_read_token\n\n    def __str__(self):\n        output = \'\'\n        if self.parent: output = str(self.parent) + \' > \'\n        output += self.rule\n        return output\n\ndef print_error(err, scanner, max_ctx=None):\n    """"""Print error messages, the parser stack, and the input text -- for human-readable error messages.""""""\n    # NOTE: this function assumes 80 columns :-(\n    # Figure out the line number\n    pos = err.pos\n    if not pos:\n        pos = scanner.get_pos()\n\n    file_name, line_number, column_number = pos\n    print(\'%s:%d:%d: %s\' % (file_name, line_number, column_number, err.msg), file=sys.stderr)\n\n    scanner.print_line_with_pointer(pos)\n\n    context = err.context\n    token = None\n    while context:\n        print(\'while parsing %s%s:\' % (context.rule, tuple(context.args)), file=sys.stderr)\n        if context.token:\n            token = context.token\n        if token:\n            scanner.print_line_with_pointer(token.pos, length=len(token.value))\n        context = context.parent\n        if max_ctx:\n            max_ctx = max_ctx-1\n            if not max_ctx:\n                break\n\ndef wrap_error_reporter(parser, rule, *args,**kw):\n    try:\n        return getattr(parser, rule)(*args,**kw)\n    except SyntaxError as e:\n        print_error(e, parser._scanner)\n    except NoMoreTokens:\n        print(\'Could not complete parsing; stopped around here:\', file=sys.stderr)\n        print(parser._scanner, file=sys.stderr)\n\nfrom twisted.words.xish.xpath import AttribValue, BooleanValue, CompareValue\nfrom twisted.words.xish.xpath import Function, IndexValue, LiteralValue\nfrom twisted.words.xish.xpath import _AnyLocation, _Location\n\n\n# Begin -- grammar generated by Yapps\n\nclass XPathParserScanner(Scanner):\n    patterns = [\n        (\'"",""\', re.compile(\',\')),\n        (\'""@""\', re.compile(\'@\')),\n        (\'""\\\\)""\', re.compile(\'\\\\)\')),\n        (\'""\\\\(""\', re.compile(\'\\\\(\')),\n        (\'""\\\\]""\', re.compile(\'\\\\]\')),\n        (\'""\\\\[""\', re.compile(\'\\\\[\')),\n        (\'""//""\', re.compile(\'//\')),\n        (\'""/""\', re.compile(\'/\')),\n        (\'\\\\s+\', re.compile(\'\\\\s+\')),\n        (\'INDEX\', re.compile(\'[0-9]+\')),\n        (\'WILDCARD\', re.compile(\'\\\\*\')),\n        (\'IDENTIFIER\', re.compile(\'[a-zA-Z][a-zA-Z0-9_\\\\-]*\')),\n        (\'ATTRIBUTE\', re.compile(\'\\\\@[a-zA-Z][a-zA-Z0-9_\\\\-]*\')),\n        (\'FUNCNAME\', re.compile(\'[a-zA-Z][a-zA-Z0-9_]*\')),\n        (\'CMP_EQ\', re.compile(\'\\\\=\')),\n        (\'CMP_NE\', re.compile(\'\\\\!\\\\=\')),\n        (\'STR_DQ\', re.compile(\'""([^""]|(\\\\""))*?""\')),\n        (\'STR_SQ\', re.compile(""\'([^\']|(\\\\\'))*?\'"")),\n        (\'OP_AND\', re.compile(\'and\')),\n        (\'OP_OR\', re.compile(\'or\')),\n        (\'END\', re.compile(\'$\')),\n    ]\n    def __init__(self, str,*args,**kw):\n        Scanner.__init__(self,None,{\'\\\\s+\':None,},str,*args,**kw)\n\nclass XPathParser(Parser):\n    Context = Context\n    def XPATH(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'XPATH\', [])\n        PATH = self.PATH(_context)\n        result = PATH; current = result\n        while self._peek(\'END\', \'""/""\', \'""//""\', context=_context) != \'END\':\n            PATH = self.PATH(_context)\n            current.childLocation = PATH; current = current.childLocation\n        END = self._scan(\'END\', context=_context)\n        return  result\n\n    def PATH(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'PATH\', [])\n        _token = self._peek(\'""/""\', \'""//""\', context=_context)\n        if _token == \'""/""\':\n            self._scan(\'""/""\', context=_context)\n            result = _Location()\n        else: # == \'""//""\'\n            self._scan(\'""//""\', context=_context)\n            result = _AnyLocation()\n        _token = self._peek(\'IDENTIFIER\', \'WILDCARD\', context=_context)\n        if _token == \'IDENTIFIER\':\n            IDENTIFIER = self._scan(\'IDENTIFIER\', context=_context)\n            result.elementName = IDENTIFIER\n        else: # == \'WILDCARD\'\n            WILDCARD = self._scan(\'WILDCARD\', context=_context)\n            result.elementName = None\n        while self._peek(\'""\\\\[""\', \'END\', \'""/""\', \'""//""\', context=_context) == \'""\\\\[""\':\n            self._scan(\'""\\\\[""\', context=_context)\n            PREDICATE = self.PREDICATE(_context)\n            result.predicates.append(PREDICATE)\n            self._scan(\'""\\\\]""\', context=_context)\n        return result\n\n    def PREDICATE(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'PREDICATE\', [])\n        _token = self._peek(\'INDEX\', \'""\\\\(""\', \'""@""\', \'FUNCNAME\', \'STR_DQ\', \'STR_SQ\', context=_context)\n        if _token != \'INDEX\':\n            EXPR = self.EXPR(_context)\n            return EXPR\n        else: # == \'INDEX\'\n            INDEX = self._scan(\'INDEX\', context=_context)\n            return IndexValue(INDEX)\n\n    def EXPR(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'EXPR\', [])\n        FACTOR = self.FACTOR(_context)\n        e = FACTOR\n        while self._peek(\'OP_AND\', \'OP_OR\', \'""\\\\)""\', \'""\\\\]""\', context=_context) in [\'OP_AND\', \'OP_OR\']:\n            BOOLOP = self.BOOLOP(_context)\n            FACTOR = self.FACTOR(_context)\n            e = BooleanValue(e, BOOLOP, FACTOR)\n        return e\n\n    def BOOLOP(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'BOOLOP\', [])\n        _token = self._peek(\'OP_AND\', \'OP_OR\', context=_context)\n        if _token == \'OP_AND\':\n            OP_AND = self._scan(\'OP_AND\', context=_context)\n            return OP_AND\n        else: # == \'OP_OR\'\n            OP_OR = self._scan(\'OP_OR\', context=_context)\n            return OP_OR\n\n    def FACTOR(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'FACTOR\', [])\n        _token = self._peek(\'""\\\\(""\', \'""@""\', \'FUNCNAME\', \'STR_DQ\', \'STR_SQ\', context=_context)\n        if _token != \'""\\\\(""\':\n            TERM = self.TERM(_context)\n            return TERM\n        else: # == \'""\\\\(""\'\n            self._scan(\'""\\\\(""\', context=_context)\n            EXPR = self.EXPR(_context)\n            self._scan(\'""\\\\)""\', context=_context)\n            return EXPR\n\n    def TERM(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'TERM\', [])\n        VALUE = self.VALUE(_context)\n        t = VALUE\n        if self._peek(\'CMP_EQ\', \'CMP_NE\', \'OP_AND\', \'OP_OR\', \'""\\\\)""\', \'""\\\\]""\', context=_context) in [\'CMP_EQ\', \'CMP_NE\']:\n            CMP = self.CMP(_context)\n            VALUE = self.VALUE(_context)\n            t = CompareValue(t, CMP, VALUE)\n        return t\n\n    def VALUE(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'VALUE\', [])\n        _token = self._peek(\'""@""\', \'FUNCNAME\', \'STR_DQ\', \'STR_SQ\', context=_context)\n        if _token == \'""@""\':\n            self._scan(\'""@""\', context=_context)\n            IDENTIFIER = self._scan(\'IDENTIFIER\', context=_context)\n            return AttribValue(IDENTIFIER)\n        elif _token == \'FUNCNAME\':\n            FUNCNAME = self._scan(\'FUNCNAME\', context=_context)\n            f = Function(FUNCNAME); args = []\n            self._scan(\'""\\\\(""\', context=_context)\n            if self._peek(\'""\\\\)""\', \'""@""\', \'FUNCNAME\', \'"",""\', \'STR_DQ\', \'STR_SQ\', context=_context) not in [\'""\\\\)""\', \'"",""\']:\n                VALUE = self.VALUE(_context)\n                args.append(VALUE)\n                while self._peek(\'"",""\', \'""\\\\)""\', context=_context) == \'"",""\':\n                    self._scan(\'"",""\', context=_context)\n                    VALUE = self.VALUE(_context)\n                    args.append(VALUE)\n            self._scan(\'""\\\\)""\', context=_context)\n            f.setParams(*args); return f\n        else: # in [\'STR_DQ\', \'STR_SQ\']\n            STR = self.STR(_context)\n            return LiteralValue(STR[1:len(STR)-1])\n\n    def CMP(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'CMP\', [])\n        _token = self._peek(\'CMP_EQ\', \'CMP_NE\', context=_context)\n        if _token == \'CMP_EQ\':\n            CMP_EQ = self._scan(\'CMP_EQ\', context=_context)\n            return CMP_EQ\n        else: # == \'CMP_NE\'\n            CMP_NE = self._scan(\'CMP_NE\', context=_context)\n            return CMP_NE\n\n    def STR(self, _parent=None):\n        _context = self.Context(_parent, self._scanner, \'STR\', [])\n        _token = self._peek(\'STR_DQ\', \'STR_SQ\', context=_context)\n        if _token == \'STR_DQ\':\n            STR_DQ = self._scan(\'STR_DQ\', context=_context)\n            return STR_DQ\n        else: # == \'STR_SQ\'\n            STR_SQ = self._scan(\'STR_SQ\', context=_context)\n            return STR_SQ\n\n\ndef parse(rule, text):\n    P = XPathParser(XPathParserScanner(text))\n    return wrap_error_reporter(P, rule)\n\nif __name__ == \'__main__\':\n    from sys import argv, stdin\n    if len(argv) >= 2:\n        if len(argv) >= 3:\n            f = open(argv[2],\'r\')\n        else:\n            f = stdin\n        print(parse(argv[1], f.read()))\n    else: print (\'Args:  <rule> [<filename>]\', file=sys.stderr)\n# End -- grammar generated by Yapps\n'], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 247, 'name': 'exec', 'args': [None, 'globals', 'globals'], 'keywords': [], 'hasInputs': False}"
compat.py,"{'type': 'function_call', 'line': 466, 'name': 'exec', 'args': ['def reraise(exception, traceback):\n        raise exception.__class__, exception, traceback'], 'keywords': [], 'hasInputs': False}"
failure.py,"{'type': 'function_call', 'line': 490, 'name': 'exec', 'args': ['def raiseException(self):\n    raise self.type, self.value, self.tb'], 'keywords': [], 'hasInputs': False}"
recvline.py,"{'type': 'function_call', 'line': 71, 'name': 'exec', 'args': [None], 'keywords': [], 'hasInputs': False}"
helper.py,"{'type': 'function_call', 'line': 117, 'name': 'exec', 'args': [None], 'keywords': [], 'hasInputs': False}"
lex.py,"{'type': 'function_call', 'line': 215, 'name': 'exec', 'args': ['import %stabfile'], 'keywords': [], 'hasInputs': False}"
lex.py,"{'type': 'function_call', 'line': 1039, 'name': 'exec', 'args': ['import %s'], 'keywords': [], 'hasInputs': False}"
yacc.py,"{'type': 'function_call', 'line': 1982, 'name': 'exec', 'args': ['import %smodule'], 'keywords': [], 'hasInputs': False}"
yacc.py,"{'type': 'function_call', 'line': 3254, 'name': 'exec', 'args': ['import %s'], 'keywords': [], 'hasInputs': False}"
compiled.py,"{'type': 'function_call', 'line': 569, 'name': 'exec', 'args': ['compile', 'scope'], 'keywords': [], 'hasInputs': False}"
config.py,"{'type': 'function_call', 'line': 129, 'name': 'exec', 'args': ['compile', 'd.__dict__'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 48, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 36, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
environment.py,"{'type': 'function_call', 'line': 937, 'name': 'exec', 'args': [None, 'namespace'], 'keywords': [], 'hasInputs': False}"
debug.py,"{'type': 'function_call', 'line': 29, 'name': 'exec', 'args': [""raise TypeError, 'foo'""], 'keywords': [], 'hasInputs': False}"
debug.py,"{'type': 'function_call', 'line': 267, 'name': 'exec', 'args': [None, 'globals', None], 'keywords': [], 'hasInputs': False}"
_compat.py,"{'type': 'function_call', 'line': 65, 'name': 'exec', 'args': ['def reraise(tp, value, tb=None):\n raise tp, value, tb'], 'keywords': [], 'hasInputs': False}"
setup.py,"{'type': 'function_call', 'line': 20, 'name': 'exec', 'args': ['f.read'], 'keywords': [], 'hasInputs': False}"
six.py,"{'type': 'function_call', 'line': 706, 'name': 'exec', 'args': ['exec _code_ in _globs_, _locs_'], 'keywords': [], 'hasInputs': False}"
