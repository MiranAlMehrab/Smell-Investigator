GifImagePlugin.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
JpegImagePlugin.py,"{""type"": ""comparison"", ""line"": 108, ""pairs"": [[""s"",  - Expecting value: line 1 column 53 (char 52)"
GimpPaletteFile.py,"{""type"": ""comparison"", ""line"": 32, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 62 (char 61)"
TiffImagePlugin.py,"{""type"": ""variable"", ""line"": 79, ""name"": ""II"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
ImImagePlugin.py,"{""type"": ""variable"", ""line"": 97, ""name"": ""split"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
BlpImagePlugin.py,"{""type"": ""comparison"", ""line"": 252, ""pairs"": [[""self.magic"",  - Expecting value: line 1 column 62 (char 61)"
GbrImagePlugin.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""magic_number"",  - Expecting value: line 1 column 63 (char 62)"
XpmImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""xpm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WebPImagePlugin.py,"{""type"": ""dict"", ""line"": 21, ""name"": ""_VP8_MODES_BY_IDENTIFIER"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 138 (char 137)"
Image.py,"{""type"": ""function_def"", ""line"": 769, ""name"": ""tobitmap"", ""args"": [""self"", ""name""], ""defaults"": [""image""], ""return"": ""None.join"", ""returnArgs"": [""None.encode"", ""None.encode"", ""None.encode"", ""data"",  - Expecting value: line 1 column 199 (char 198)"
MspImagePlugin.py,"{""type"": ""comparison"", ""line"": 57, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
BmpImagePlugin.py,"{""type"": ""comparison"", ""line"": 264, ""pairs"": [[""head_data"",  - Expecting value: line 1 column 61 (char 60)"
IcoImagePlugin.py,"{""type"": ""variable"", ""line"": 39, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
GimpGradientFile.py,"{""type"": ""comparison"", ""line"": 107, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 63 (char 62)"
FontFile.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
PpmImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""b_whitespace"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
ImtImagePlugin.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""field"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
PixarImagePlugin.py,"{""type"": ""comparison"", ""line"": 49, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
ImageFont.py,"{""type"": ""comparison"", ""line"": 90, ""pairs"": [[""file.readline"",  - Expecting value: line 1 column 64 (char 63)"
XbmImagePlugin.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""xbm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WalImageFile.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""quake2palette"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
WmfImagePlugin.py,"{""type"": ""comparison"", ""line"": 94, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
FtexImagePlugin.py,"{""type"": ""variable"", ""line"": 59, ""name"": ""MAGIC"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
BdfFontFile.py,"{""type"": ""comparison"", ""line"": 51, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
DdsImagePlugin.py,"{""type"": ""comparison"", ""line"": 140, ""pairs"": [[""fourcc"",  - Expecting value: line 1 column 58 (char 57)"
XVThumbImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
IcnsImagePlugin.py,"{""type"": ""comparison"", ""line"": 43, ""pairs"": [[""sig"",  - Expecting value: line 1 column 54 (char 53)"
EpsImagePlugin.py,"{""type"": ""variable"", ""line"": 175, ""name"": ""s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""self.char"",  - Expecting value: line 1 column 135 (char 134)"
Jpeg2KImagePlugin.py,"{""type"": ""comparison"", ""line"": 78, ""pairs"": [[""tbox"",  - Expecting value: line 1 column 55 (char 54)"
PdfParser.py,"{""type"": ""function_call"", ""line"": 175, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
ImageFile.py,"{""type"": ""variable"", ""line"": 209, ""name"": ""prefix"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
CurImagePlugin.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""m"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
PcdImagePlugin.py,"{""type"": ""comparison"", ""line"": 42, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
PngImagePlugin.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
ImageDraw.py,"{""type"": ""variable"", ""line"": 253, ""name"": ""split_character"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""\n"",  - Expecting value: line 1 column 142 (char 141)"
PaletteFile.py,"{""type"": ""comparison"", ""line"": 36, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
wheel.py,"{""type"": ""function_call"", ""line"": 595, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 197, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 471, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
models.py,"{""type"": ""variable"", ""line"": 828, ""name"": ""self._content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""None.join"",  - Expecting value: line 1 column 147 (char 146)"
fallback.py,"{""type"": ""function_def"", ""line"": 32, ""name"": ""__init__"", ""args"": [""self"", ""s""], ""defaults"": [ - Expecting value: line 1 column 94 (char 93)"
connection.py,"{""type"": ""function_call"", ""line"": 215, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 92, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""variable"", ""line"": 26, ""name"": ""self._data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 71, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 22, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
unicode_utils.py,"{""type"": ""variable"", ""line"": 48, ""name"": ""CODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
glob.py,"{""type"": ""variable"", ""line"": 146, ""name"": ""magic_check_bytes"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
build_py.py,"{""type"": ""comparison"", ""line"": 177, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
upload_docs.py,"{""type"": ""variable"", ""line"": 130, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
upload.py,"{""type"": ""function_call"", ""line"": 136, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_util.py,"{""type"": ""variable"", ""line"": 181, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
handlers.py,"{""type"": ""function_call"", ""line"": 257, ""name"": ""sha1.update"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
test_resmap.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""output"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
application.py,"{""type"": ""variable"", ""line"": 103, ""name"": ""response.body"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
status.py,"{""type"": ""variable"", ""line"": 58, ""name"": ""instance.response.body"", ""value"":  - Expecting value: line 1 column 77 (char 76)"
test_application.py,"{""type"": ""assert"", ""line"": 36, ""left"": ""res.body"", ""comparators"": [ - Expecting value: line 1 column 68 (char 67)"
test_admin.py,"{""type"": ""assert"", ""line"": 338, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views.py,"{""type"": ""assert"", ""line"": 90, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_admin.py,"{""type"": ""assert"", ""line"": 80, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_admin.py,"{""type"": ""assert"", ""line"": 118, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_cron.py,"{""type"": ""function_call"", ""line"": 213, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
test_update.py,"{""type"": ""variable"", ""line"": 642, ""name"": ""expected_output"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_tasks.py,"{""type"": ""function_call"", ""line"": 24, ""name"": ""dst.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
test_models.py,"{""type"": ""function_call"", ""line"": 83, ""name"": ""fobj.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
test_admin.py,"{""type"": ""assert"", ""line"": 143, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_forms.py,"{""type"": ""assert"", ""line"": 55, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_views.py,"{""type"": ""assert"", ""line"": 474, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_feeds.py,"{""type"": ""assert"", ""line"": 187, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views_submit.py,"{""type"": ""assert"", ""line"": 340, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views_edit.py,"{""type"": ""assert"", ""line"": 393, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views_validation.py,"{""type"": ""function_call"", ""line"": 126, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
test_admin.py,"{""type"": ""assert"", ""line"": 144, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views.py,"{""type"": ""variable"", ""line"": 65, ""name"": ""EMPTY_PNG"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_sql_model.py,"{""type"": ""assert"", ""line"": 269, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views.py,"{""type"": ""variable"", ""line"": 96, ""name"": ""path"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_utils.py,"{""type"": ""variable"", ""line"": 74, ""name"": ""next_path"", ""value"": null, ""valueSrc"": ""urlsafe_b64encode.rstrip"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 137 (char 136)"
test_views.py,"{""type"": ""assert"", ""line"": 1192, ""left"":  - Expecting value: line 1 column 42 (char 41)"
test_permissions.py,"{""type"": ""assert"", ""line"": 57, ""left"": ""response.content"", ""comparators"": [ - Expecting value: line 1 column 76 (char 75)"
utils.py,"{""type"": ""variable"", ""line"": 696, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_storage_utils.py,"{""type"": ""assert"", ""line"": 107, ""left"": ""self.contents"", ""comparators"": [ - Expecting value: line 1 column 74 (char 73)"
test_middleware.py,"{""type"": ""assert"", ""line"": 111, ""left"":  - Expecting value: line 1 column 41 (char 40)"
test_views.py,"{""type"": ""assert"", ""line"": 81, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_models.py,"{""type"": ""function_call"", ""line"": 177, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
test_utils.py,"{""type"": ""variable"", ""line"": 439, ""name"": ""manifest"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_views.py,"{""type"": ""assert"", ""line"": 440, ""left"": ""res.content"", ""comparators"": [ - Expecting value: line 1 column 72 (char 71)"
wps.py,"{""type"": ""variable"", ""line"": 866, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_wmts.py,"{""type"": ""function_call"", ""line"": 22, ""name"": ""bytearray"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
test_wps_describeprocess_language.py,"{""type"": ""function_def"", ""line"": 11, ""name"": ""read"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 98 (char 97)"
test_wps_execute_language.py,"{""type"": ""assert"", ""line"": 17, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_wps_getcapabilities_language.py,"{""type"": ""function_def"", ""line"": 12, ""name"": ""read"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 98 (char 97)"
crawler.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""linkregex"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
utils.py,"{""type"": ""variable"", ""line"": 189, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 462, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
connection.py,"{""type"": ""function_call"", ""line"": 200, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 88, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 278, ""name"": ""_flush_decoder"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 109 (char 108)"
securetransport.py,"{""type"": ""function_call"", ""line"": 55, ""name"": ""memoryview"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
test_applications.py,"{""type"": ""assert"", ""line"": 53, ""left"": ""response"", ""comparators"": [ - Expecting value: line 1 column 68 (char 67)"
test_command_import_wordpress_translation.py,"{""type"": ""variable"", ""line"": 86, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_task_scale_images.py,"{""type"": ""variable"", ""line"": 15, ""name"": ""PROFILE"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_command_import_wordpress.py,"{""type"": ""variable"", ""line"": 338, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
import_wordpress.py,"{""type"": ""comparison"", ""line"": 436, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
bundles.py,"{""type"": ""function_call"", ""line"": 70, ""name"": ""out_fh.write"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
sitemap.py,"{""type"": ""comparison"", ""line"": 180, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
unix.py,"{""type"": ""comparison"", ""line"": 54, ""pairs"": [[""data"",  - Expecting value: line 1 column 55 (char 54)"
test_websocket.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""self.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_basic.py,"{""type"": ""variable"", ""line"": 395, ""name"": ""self.data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
elements.py,"{""type"": ""comparison"", ""line"": 247, ""pairs"": [[""url"",  - Expecting value: line 1 column 55 (char 54)"
extras.py,"{""type"": ""variable"", ""line"": 822, ""name"": ""v"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
extensions.py,"{""type"": ""function_def"", ""line"": 144, ""name"": ""getquoted"", ""args"": [""self"", ""_null""], ""defaults"": [ - Expecting value: line 1 column 100 (char 99)"
_range.py,"{""type"": ""variable"", ""line"": 260, ""name"": ""lower"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_types_basic.py,"{""type"": ""variable"", ""line"": 341, ""name"": ""o1"", ""value"": null, ""valueSrc"": ""psycopg2.Binary"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
test_quote.py,"{""type"": ""variable"", ""line"": 77, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_types_extras.py,"{""type"": ""function_call"", ""line"": 101, ""name"": ""self.assertQuotedEqual"", ""args"": [""a.getquoted"",  - Expecting value: line 1 column 98 (char 97)"
test_lobject.py,"{""type"": ""function_call"", ""line"": 102, ""name"": ""self.conn.lobject.write"", ""args"": [ - Expecting value: line 1 column 84 (char 83)"
test_cursor.py,"{""type"": ""function_call"", ""line"": 71, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
unittest_utils.py,"{""type"": ""variable"", ""line"": 251, ""name"": ""binary_io"", ""value"": null, ""valueSrc"": ""io.BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
test_functional.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
too_many_star_expressions.py,"{""type"": ""list"", ""line"": 6, ""name"": null, ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""names"": [""THIRD""], ""values"": [ - Expecting value: line 1 column 137 (char 136)"
implicit_str_concat_in_sequence.py,"{""type"": ""list"", ""line"": 26, ""name"": ""TEST_LIST7"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 126 (char 125)"
anomalous_unicode_escape_py3.py,"{""type"": ""variable"", ""line"": 5, ""name"": ""BAD_UNICODE"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
using_constant_test.py,"{""type"": ""comparison"", ""line"": 46, ""pairs"": [], ""test"": [ - Expecting value: line 1 column 58 (char 57)"
future_unicode_literals.py,"{""type"": ""variable"", ""line"": 5, ""name"": ""BAD_STRING"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
member_checks.py,"{""type"": ""variable"", ""line"": 162, ""name"": ""something"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
literal_comparison.py,"{""type"": ""comparison"", ""line"": 7, ""pairs"": [[""a"",  - Expecting value: line 1 column 51 (char 50)"
invalid_envvar_value.py,"{""type"": ""function_def"", ""line"": 14, ""name"": ""function_returning_bytes"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 112 (char 111)"
wheel.py,"{""type"": ""function_call"", ""line"": 482, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 16, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 189, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 462, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
fallback.py,"{""type"": ""function_def"", ""line"": 32, ""name"": ""__init__"", ""args"": [""self"", ""s""], ""defaults"": [ - Expecting value: line 1 column 94 (char 93)"
connection.py,"{""type"": ""function_call"", ""line"": 200, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 88, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 278, ""name"": ""_flush_decoder"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 109 (char 108)"
securetransport.py,"{""type"": ""function_call"", ""line"": 55, ""name"": ""memoryview"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 69, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 22, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
main.py,"{""type"": ""variable"", ""line"": 61, ""name"": ""shebang_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
isort.py,"{""type"": ""variable"", ""line"": 1010, ""name"": ""pattern"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
multipartparser.py,"{""type"": ""variable"", ""line"": 326, ""name"": ""self._leftover"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 288, ""name"": ""__init__"", ""args"": [""self"", ""content"", ""args""], ""defaults"": [ - Expecting value: line 1 column 109 (char 108)"
__init__.py,"{""type"": ""list"", ""line"": 2246, ""name"": ""empty_values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [null,  - Expecting value: line 1 column 136 (char 135)"
debug.py,"{""type"": ""variable"", ""line"": 373, ""name"": ""match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
encoding.py,"{""type"": ""variable"", ""line"": 189, ""name"": ""bits"", ""value"": null, ""valueSrc"": ""uri.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
http.py,"{""type"": ""function_def"", ""line"": 221, ""name"": ""urlsafe_base64_encode"", ""args"": [""s""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.rstrip"", ""returnArgs"": [ - Expecting value: line 1 column 163 (char 162)"
client.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""response.content"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
signing.py,"{""type"": ""function_def"", ""line"": 62, ""name"": ""b64_encode"", ""args"": [""s""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 150 (char 149)"
wsgi.py,"{""type"": ""variable"", ""line"": 14, ""name"": ""_slashes_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
filebased.py,"{""type"": ""function_call"", ""line"": 49, ""name"": ""self.stream.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
uploadedfile.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""content"",  - Expecting value: line 1 column 139 (char 138)"
base.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""hash"", ""value"": null, ""valueSrc"": ""encoded_data.split"", ""args"": [ - Expecting value: line 1 column 109 (char 108)"
geometry.py,"{""type"": ""variable"", ""line"": 113, ""name"": ""parts"", ""value"": null, ""valueSrc"": ""ewkt.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
layer.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""self._random_read"", ""value"": null, ""valueSrc"": ""self.test_capability"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 141 (char 140)"
libgdal.py,"{""type"": ""function_def"", ""line"": 77, ""name"": ""gdal_version"", ""args"": [], ""defaults"": [], ""return"": ""_version_info"", ""returnArgs"": [ - Expecting value: line 1 column 132 (char 131)"
srs.py,"{""type"": ""variable"", ""line"": 79, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""c_char_p"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
glob.py,"{""type"": ""variable"", ""line"": 148, ""name"": ""magic_check_bytes"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
build_py.py,"{""type"": ""comparison"", ""line"": 177, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
upload_docs.py,"{""type"": ""variable"", ""line"": 130, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
GifImagePlugin.py,"{""type"": ""comparison"", ""line"": 64, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
JpegImagePlugin.py,"{""type"": ""variable"", ""line"": 350, ""name"": ""s"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
GimpPaletteFile.py,"{""type"": ""comparison"", ""line"": 32, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 62 (char 61)"
TiffImagePlugin.py,"{""type"": ""variable"", ""line"": 76, ""name"": ""II"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
ImImagePlugin.py,"{""type"": ""variable"", ""line"": 95, ""name"": ""split"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
BlpImagePlugin.py,"{""type"": ""comparison"", ""line"": 252, ""pairs"": [[""self.magic"",  - Expecting value: line 1 column 62 (char 61)"
GbrImagePlugin.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""magic_number"",  - Expecting value: line 1 column 63 (char 62)"
XpmImagePlugin.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""xpm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WebPImagePlugin.py,"{""type"": ""dict"", ""line"": 21, ""name"": ""_VP8_MODES_BY_IDENTIFIER"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 138 (char 137)"
Image.py,"{""type"": ""function_def"", ""line"": 758, ""name"": ""tobitmap"", ""args"": [""self"", ""name""], ""defaults"": [""image""], ""return"": ""None.join"", ""returnArgs"": [""None.encode"", ""None.encode"", ""None.encode"", ""data"",  - Expecting value: line 1 column 199 (char 198)"
MspImagePlugin.py,"{""type"": ""comparison"", ""line"": 55, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
IptcImagePlugin.py,"{""type"": ""comparison"", ""line"": 201, ""pairs"": [[""app"",  - Expecting value: line 1 column 55 (char 54)"
BmpImagePlugin.py,"{""type"": ""comparison"", ""line"": 238, ""pairs"": [[""head_data"",  - Expecting value: line 1 column 61 (char 60)"
IcoImagePlugin.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
GimpGradientFile.py,"{""type"": ""comparison"", ""line"": 107, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 63 (char 62)"
FontFile.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
PpmImagePlugin.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""b_whitespace"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
ImtImagePlugin.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""field"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
PixarImagePlugin.py,"{""type"": ""comparison"", ""line"": 47, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
ImageFont.py,"{""type"": ""comparison"", ""line"": 90, ""pairs"": [[""file.readline"",  - Expecting value: line 1 column 64 (char 63)"
XbmImagePlugin.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""xbm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WalImageFile.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""quake2palette"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
WmfImagePlugin.py,"{""type"": ""comparison"", ""line"": 92, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
FtexImagePlugin.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""MAGIC"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
BdfFontFile.py,"{""type"": ""comparison"", ""line"": 51, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
DdsImagePlugin.py,"{""type"": ""comparison"", ""line"": 131, ""pairs"": [[""fourcc"",  - Expecting value: line 1 column 58 (char 57)"
XVThumbImagePlugin.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
IcnsImagePlugin.py,"{""type"": ""comparison"", ""line"": 43, ""pairs"": [[""sig"",  - Expecting value: line 1 column 54 (char 53)"
EpsImagePlugin.py,"{""type"": ""variable"", ""line"": 174, ""name"": ""s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""self.char"",  - Expecting value: line 1 column 135 (char 134)"
Jpeg2KImagePlugin.py,"{""type"": ""comparison"", ""line"": 75, ""pairs"": [[""tbox"",  - Expecting value: line 1 column 55 (char 54)"
PdfParser.py,"{""type"": ""function_call"", ""line"": 175, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
ImageFile.py,"{""type"": ""variable"", ""line"": 206, ""name"": ""prefix"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
CurImagePlugin.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""m"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
PcdImagePlugin.py,"{""type"": ""comparison"", ""line"": 40, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
PngImagePlugin.py,"{""type"": ""variable"", ""line"": 50, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
ImageDraw.py,"{""type"": ""variable"", ""line"": 253, ""name"": ""split_character"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""\n"",  - Expecting value: line 1 column 142 (char 141)"
PaletteFile.py,"{""type"": ""comparison"", ""line"": 36, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
bip32.py,"{""type"": ""variable"", ""line"": 157, ""name"": ""hmac"", ""value"": null, ""valueSrc"": ""hmac_sha512"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
header.py,"{""type"": ""variable"", ""line"": 35, ""name"": ""genesis_hash"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
transaction.py,"{""type"": ""function_call"", ""line"": 711, ""name"": ""txin.serialize_to"", ""args"": [null,  - Expecting value: line 1 column 84 (char 83)"
claim_proofs.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""to_hash"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
script.py,"{""type"": ""variable"", ""line"": 172, ""name"": ""token"", ""value"": null, ""valueSrc"": ""DataToken"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
mnemonic.py,"{""type"": ""variable"", ""line"": 19, ""name"": ""SEED_PREFIX"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
jsonrpc.py,"{""type"": ""function_def"", ""line"": 323, ""name"": ""batch_message_from_parts"", ""args"": [""cls"", ""messages""], ""defaults"": [], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 158 (char 157)"
framing.py,"{""type"": ""variable"", ""line"": 73, ""name"": ""self.residual"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
socks.py,"{""type"": ""function_def"", ""line"": 114, ""name"": ""_start"", ""args"": [""self""], ""defaults"": [], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 129 (char 128)"
node.py,"{""type"": ""list"", ""line"": 210, ""name"": ""IGNORE_OUTPUT"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 130 (char 129)"
storage.py,"{""type"": ""function_def"", ""line"": 61, ""name"": ""iterator"", ""args"": [""self"", ""prefix"", ""reverse""], ""defaults"": [ - Expecting value: line 1 column 110 (char 109)"
leveldb.py,"{""type"": ""variable"", ""line"": 35, ""name"": ""HEADER_PREFIX"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
history.py,"{""type"": ""variable"", ""line"": 51, ""name"": ""state"", ""value"": null, ""valueSrc"": ""self.db.get"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
server.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
client.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""self.response_buff"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
crypt.py,"{""type"": ""variable"", ""line"": 57, ""name"": ""_"", ""value"": null, ""valueSrc"": ""data.split"", ""args"": [ - Expecting value: line 1 column 97 (char 96)"
server.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
serialization.py,"{""type"": ""variable"", ""line"": 151, ""name"": ""next_close_paren"", ""value"": null, ""valueSrc"": ""response_msg.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 138 (char 137)"
client.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
bencoding.py,"{""type"": ""variable"", ""line"": 13, ""name"": ""encoded_list_items"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
datagram.py,"{""type"": ""variable"", ""line"": 13, ""name"": ""PAGE_KEY"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
protocol.py,"{""type"": ""function_def"", ""line"": 48, ""name"": ""ping"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 92 (char 91)"
test_streaming.py,"{""type"": ""variable"", ""line"": 58, ""name"": ""self.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_file_commands.py,"{""type"": ""function_call"", ""line"": 201, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
test_claim_commands.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""image_data"", ""value"": null, ""valueSrc"": ""unhexlify"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
test_account.py,"{""type"": ""function_call"", ""line"": 361, ""name"": ""self.assertEqual"", ""args"": [""hexlify"",  - Expecting value: line 1 column 88 (char 87)"
key_fixtures.py,"{""type"": ""list"", ""line"": 1, ""name"": ""expected_ids"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 127 (char 126)"
test_bip32.py,"{""type"": ""function_call"", ""line"": 16, ""name"": ""PubKey"", ""args"": [null, null,  - Expecting value: line 1 column 78 (char 77)"
test_wallet.py,"{""type"": ""function_call"", ""line"": 64, ""name"": ""self.assertEqual"", ""args"": [""hexlify"",  - Expecting value: line 1 column 87 (char 86)"
test_hash.py,"{""type"": ""function_call"", ""line"": 51, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
test_script.py,"{""type"": ""function_call"", ""line"": 117, ""name"": ""self.assertEqual"", ""args"": [""self.redeem_pubkey_hash"",  - Expecting value: line 1 column 104 (char 103)"
test_ledger.py,"{""type"": ""dict"", ""line"": 66, ""name"": ""header"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""bits"", ""block_height"", ""merkle_root"", ""nonce"", ""prev_block_hash"", ""timestamp"", ""claim_trie_root"", ""version""], ""values"": [486604799, 0,  - Expecting value: line 1 column 256 (char 255)"
test_schema_signing.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""channel_txo"", ""value"": null, ""valueSrc"": ""Output.pay_claim_name_pubkey_hash"", ""isInput"": false, ""args"": [""CENT"", ""claim_name"", ""Claim"",  - Expecting value: line 1 column 179 (char 178)"
test_mnemonic.py,"{""type"": ""function_call"", ""line"": 11, ""name"": ""self.assertEqual"", ""args"": [""hexlify"",  - Expecting value: line 1 column 87 (char 86)"
test_headers.py,"{""type"": ""function_call"", ""line"": 106, ""name"": ""self.assertEqual"", ""args"": [""Headers.header_hash_to_pow_hash"",  - Expecting value: line 1 column 112 (char 111)"
test_transaction.py,"{""type"": ""function_def"", ""line"": 34, ""name"": ""get_claim_transaction"", ""args"": [""claim_name"", ""claim""], ""defaults"": [ - Expecting value: line 1 column 117 (char 116)"
test_sqldb.py,"{""type"": ""function_def"", ""line"": 78, ""name"": ""get_channel"", ""args"": [""self"", ""title"", ""amount"", ""name"", ""key""], ""defaults"": [""@foo"",  - Expecting value: line 1 column 134 (char 133)"
test_managed_stream.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""self.stream_bytes"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
test_stream_manager.py,"{""type"": ""function_def"", ""line"": 62, ""name"": ""get_claim_transaction"", ""args"": [""claim_name"", ""claim""], ""defaults"": [ - Expecting value: line 1 column 117 (char 116)"
test_stream_descriptor.py,"{""type"": ""variable"", ""line"": 101, ""name"": ""sd_bytes"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_transfer_blob.py,"{""type"": ""variable"", ""line"": 86, ""name"": ""mock_sd_blob_bytes"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
test_blob_file.py,"{""type"": ""function_call"", ""line"": 72, ""name"": ""writer.write"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
test_claim_from_bytes.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""claim"", ""value"": null, ""valueSrc"": ""Claim.from_bytes"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
test_blob_announcer.py,"{""type"": ""function_call"", ""line"": 145, ""name"": ""self.assertEqual"", ""args"": [null,  - Expecting value: line 1 column 83 (char 82)"
test_peer.py,"{""type"": ""function_call"", ""line"": 33, ""name"": ""self.assertRaises"", ""args"": [""ValueError"", ""make_kademlia_peer"",  - Expecting value: line 1 column 113 (char 112)"
test_bencoding.py,"{""type"": ""function_call"", ""line"": 10, ""name"": ""bencode"", ""args"": [ - Expecting value: line 1 column 67 (char 66)"
test_datagram.py,"{""type"": ""function_call"", ""line"": 19, ""name"": ""self.assertEqual"", ""args"": [""decoded.method"",  - Expecting value: line 1 column 94 (char 93)"
test_distance.py,"{""type"": ""function_call"", ""line"": 9, ""name"": ""self.assertRaises"", ""args"": [""ValueError"", ""Distance"",  - Expecting value: line 1 column 102 (char 101)"
test_protocol.py,"{""type"": ""function_call"", ""line"": 27, ""name"": ""self.assertEqual"", ""args"": [null,  - Expecting value: line 1 column 82 (char 81)"
generate_json_api.py,"{""type"": ""function_call"", ""line"": 252, ""name"": ""file.write"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
util.py,"{""type"": ""variable"", ""line"": 242, ""name"": ""encoded_b64"", ""value"": null, ""valueSrc"": ""base64.urlsafe_b64encode.rstrip"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 147 (char 146)"
tarfile.py,"{""type"": ""variable"", ""line"": 71, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
re.py,"{""type"": ""variable"", ""line"": 236, ""name"": ""_alphanum_bytes"", ""value"": null, ""valueSrc"": ""frozenset"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 129 (char 128)"
ntpath.py,"{""type"": ""variable"", ""line"": 323, ""name"": ""tilde"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
tokenize.py,"{""type"": ""function_obj"", ""line"": 36, ""objName"": ""blank_re"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 96 (char 95)"
posixpath.py,"{""type"": ""variable"", ""line"": 117, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
codecs.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""BOM_UTF8"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tempfile.py,"{""type"": ""function_call"", ""line"": 161, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
hashlib.py,"{""type"": ""function_def"", ""line"": 110, ""name"": ""__py_new"", ""args"": [""name"", ""data""], ""defaults"": [ - Expecting value: line 1 column 98 (char 97)"
base64.py,"{""type"": ""variable"", ""line"": 111, ""name"": ""_urlsafe_encode_translation"", ""value"": null, ""valueSrc"": ""bytes.maketrans"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 147 (char 146)"
wheel.py,"{""type"": ""function_call"", ""line"": 505, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
inputstream.py,"{""type"": ""function_def"", ""line"": 702, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 120, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 398, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
filepost.py,"{""type"": ""function_call"", ""line"": 88, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 204, ""name"": ""_flush_decoder"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 109 (char 108)"
universaldetector.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""self._highBitDetector"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 135 (char 134)"
charsetprober.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""aBuf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
serialize.py,"{""type"": ""function_def"", ""line"": 35, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
utils.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""response.content"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
multipartparser.py,"{""type"": ""variable"", ""line"": 307, ""name"": ""self._leftover"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 282, ""name"": ""__init__"", ""args"": [""self"", ""content"", ""args""], ""defaults"": [ - Expecting value: line 1 column 109 (char 108)"
__init__.py,"{""type"": ""list"", ""line"": 2325, ""name"": ""empty_values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [null,  - Expecting value: line 1 column 136 (char 135)"
operations.py,"{""type"": ""variable"", ""line"": 226, ""name"": ""value"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
debug.py,"{""type"": ""variable"", ""line"": 355, ""name"": ""match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
http.py,"{""type"": ""function_def"", ""line"": 215, ""name"": ""urlsafe_base64_encode"", ""args"": [""s""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.rstrip"", ""returnArgs"": [ - Expecting value: line 1 column 163 (char 162)"
client.py,"{""type"": ""function_call"", ""line"": 191, ""name"": ""lines.extend"", ""args"": [null,  - Expecting value: line 1 column 79 (char 78)"
signing.py,"{""type"": ""function_def"", ""line"": 70, ""name"": ""b64_encode"", ""args"": [""s""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 150 (char 149)"
wsgi.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""self.buffer"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
filebased.py,"{""type"": ""function_call"", ""line"": 49, ""name"": ""self.stream.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
uploadedfile.py,"{""type"": ""variable"", ""line"": 113, ""name"": ""content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""content"",  - Expecting value: line 1 column 139 (char 138)"
base.py,"{""type"": ""variable"", ""line"": 96, ""name"": ""hash"", ""value"": null, ""valueSrc"": ""encoded_data.split"", ""args"": [ - Expecting value: line 1 column 108 (char 107)"
io.py,"{""type"": ""variable"", ""line"": 236, ""name"": ""flag"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
layer.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""self._random_read"", ""value"": null, ""valueSrc"": ""self.test_capability"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 141 (char 140)"
libgdal.py,"{""type"": ""function_def"", ""line"": 77, ""name"": ""gdal_version"", ""args"": [], ""defaults"": [], ""return"": ""_version_info"", ""returnArgs"": [ - Expecting value: line 1 column 132 (char 131)"
srs.py,"{""type"": ""variable"", ""line"": 82, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""c_char_p"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
test_wheelfile.py,"{""type"": ""function_call"", ""line"": 53, ""name"": ""zf.writestr"", ""args"": [""one"",  - Expecting value: line 1 column 78 (char 77)"
sandbox.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""script"", ""value"": null, ""valueSrc"": ""script.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
build_py.py,"{""type"": ""comparison"", ""line"": 166, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
GifImagePlugin.py,"{""type"": ""comparison"", ""line"": 69, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
JpegImagePlugin.py,"{""type"": ""variable"", ""line"": 333, ""name"": ""s"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
GimpPaletteFile.py,"{""type"": ""comparison"", ""line"": 32, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 62 (char 61)"
TiffImagePlugin.py,"{""type"": ""variable"", ""line"": 71, ""name"": ""II"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
OleFileIO.py,"{""type"": ""variable"", ""line"": 361, ""name"": ""MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
ImImagePlugin.py,"{""type"": ""variable"", ""line"": 95, ""name"": ""split"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
GbrImagePlugin.py,"{""type"": ""variable"", ""line"": 64, ""name"": ""self.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
XpmImagePlugin.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""xpm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WebPImagePlugin.py,"{""type"": ""dict"", ""line"": 12, ""name"": ""_VP8_MODES_BY_IDENTIFIER"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 138 (char 137)"
Image.py,"{""type"": ""function_def"", ""line"": 697, ""name"": ""tobitmap"", ""args"": [""self"", ""name""], ""defaults"": [""image""], ""return"": ""None.join"", ""returnArgs"": [""None.encode"", ""None.encode"", ""None.encode"", ""data"",  - Expecting value: line 1 column 199 (char 198)"
MspImagePlugin.py,"{""type"": ""comparison"", ""line"": 48, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
IptcImagePlugin.py,"{""type"": ""comparison"", ""line"": 213, ""pairs"": [[""app"",  - Expecting value: line 1 column 55 (char 54)"
BmpImagePlugin.py,"{""type"": ""comparison"", ""line"": 194, ""pairs"": [[""head_data"",  - Expecting value: line 1 column 61 (char 60)"
IcoImagePlugin.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
GimpGradientFile.py,"{""type"": ""comparison"", ""line"": 106, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 63 (char 62)"
FontFile.py,"{""type"": ""function_call"", ""line"": 104, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
PpmImagePlugin.py,"{""type"": ""dict"", ""line"": 38, ""name"": ""MODES"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 119 (char 118)"
ImtImagePlugin.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""field"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
PixarImagePlugin.py,"{""type"": ""comparison"", ""line"": 44, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
ImageFont.py,"{""type"": ""comparison"", ""line"": 86, ""pairs"": [[""file.readline"",  - Expecting value: line 1 column 64 (char 63)"
XbmImagePlugin.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""xbm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WalImageFile.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""quake2palette"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
WmfImagePlugin.py,"{""type"": ""comparison"", ""line"": 94, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
BdfFontFile.py,"{""type"": ""comparison"", ""line"": 50, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
XVThumbImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""PALETTE"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
IcnsImagePlugin.py,"{""type"": ""comparison"", ""line"": 44, ""pairs"": [[""sig"",  - Expecting value: line 1 column 54 (char 53)"
EpsImagePlugin.py,"{""type"": ""variable"", ""line"": 173, ""name"": ""s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""self.char"",  - Expecting value: line 1 column 135 (char 134)"
Jpeg2KImagePlugin.py,"{""type"": ""comparison"", ""line"": 75, ""pairs"": [[""tbox"",  - Expecting value: line 1 column 55 (char 54)"
ImageFile.py,"{""type"": ""variable"", ""line"": 187, ""name"": ""prefix"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
CurImagePlugin.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""m"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
PcdImagePlugin.py,"{""type"": ""comparison"", ""line"": 41, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
PngImagePlugin.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
ImageDraw.py,"{""type"": ""variable"", ""line"": 235, ""name"": ""split_character"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""\n"",  - Expecting value: line 1 column 142 (char 141)"
PaletteFile.py,"{""type"": ""comparison"", ""line"": 36, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
idna.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""ace_prefix"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
uu_codec.py,"{""type"": ""function_call"", ""line"": 29, ""name"": ""write"", ""args"": [ - Expecting value: line 1 column 65 (char 64)"
punycode.py,"{""type"": ""variable"", ""line"": 77, ""name"": ""digits"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
gui-glut.py,"{""type"": ""function_call"", ""line"": 41, ""name"": ""glut.glutCreateWindow"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
gh_api.py,"{""type"": ""function_call"", ""line"": 256, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
iptest.py,"{""type"": ""function_call"", ""line"": 323, ""name"": ""os.write"", ""args"": [""self.writefd"",  - Expecting value: line 1 column 85 (char 84)"
test_tools.py,"{""type"": ""function_call"", ""line"": 76, ""name"": ""print"", ""args"": [ - Expecting value: line 1 column 65 (char 64)"
clipboard.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""bytes_"", ""value"": null, ""valueSrc"": ""bytes_.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
test_embed.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""_sample_embed"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
test_debug_magic.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""in_prompt"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
glut.py,"{""type"": ""function_call"", ""line"": 86, ""name"": ""glut.glutCreateWindow"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
_process_win32.py,"{""type"": ""variable"", ""line"": 168, ""name"": ""out"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_capture.py,"{""type"": ""dict"", ""line"": 35, ""name"": ""basic_data"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""image/png"", ""text/html""], ""values"": [ - Expecting value: line 1 column 162 (char 161)"
test_tempdir.py,"{""type"": ""function_call"", ""line"": 19, ""name"": ""file.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
display.py,"{""type"": ""variable"", ""line"": 758, ""name"": ""_PNG"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_magic.py,"{""type"": ""function_call"", ""line"": 960, ""name"": ""nt.assert_equal"", ""args"": [""ip.user_ns.read"",  - Expecting value: line 1 column 95 (char 94)"
test_interactiveshell.py,"{""type"": ""variable"", ""line"": 216, ""name"": ""ip.user_ns[f]"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
test_completer.py,"{""type"": ""list"", ""line"": 836, ""name"": ""keys"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""foo"",  - Expecting value: line 1 column 128 (char 127)"
test_display.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""img"", ""value"": null, ""valueSrc"": ""display.Image"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
test_inputsplitter.py,"{""type"": ""function_call"", ""line"": 104, ""name"": ""nt.assert_equal"", ""args"": [""None.encode"",  - Expecting value: line 1 column 91 (char 90)"
core.py,"{""type"": ""function_call"", ""line"": 212, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
test_certsrv.py,"{""type"": ""variable"", ""line"": 15, ""name"": ""san"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
auth.py,"{""type"": ""tuple"", ""line"": 52, ""name"": null, ""value"": null, ""valueSrc"": ""signing_input.split"", ""isInput"": false, ""names"": [""_"", ""payload_segment""], ""args"": [ - Expecting value: line 1 column 157 (char 156)"
state.py,"{""type"": ""comparison"", ""line"": 325, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
test_image.py,"{""type"": ""assert"", ""line"": 76, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_input.py,"{""type"": ""assert"", ""line"": 63, ""left"": ""file_input.value"", ""comparators"": [ - Expecting value: line 1 column 76 (char 75)"
media.py,"{""type"": ""variable"", ""line"": 98, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
misc.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
sphinx.py,"{""type"": ""comparison"", ""line"": 268, ""pairs"": [[""inventory_version"",  - Expecting value: line 1 column 69 (char 68)"
_search.py,"{""type"": ""variable"", ""line"": 389, ""name"": ""output"", ""value"": null, ""valueSrc"": ""bytearray"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
python.py,"{""type"": ""comparison"", ""line"": 1139, ""pairs"": [[""annotation"",  - Expecting value: line 1 column 63 (char 62)"
doxygen.py,"{""type"": ""function_call"", ""line"": 3710, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
populate-js-test-data.py,"{""type"": ""function_call"", ""line"": 44, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 67 (char 66)"
test_session.py,"{""type"": ""variable"", ""line"": 247, ""name"": ""json_content"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
test_partition.py,"{""type"": ""variable"", ""line"": 850, ""name"": ""image"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
models.py,"{""type"": ""dict"", ""line"": 592, ""name"": ""LOOP2_RECORD_VERIFICATION_MAP_WLK"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [0, 2, 3, 9, 15, 16, 18, 20, 33, 35, 36, 37, 38, 39, 40, 41, 42], ""values"": [ - Expecting value: line 1 column 224 (char 223)"
test_models.py,"{""type"": ""function_call"", ""line"": 358, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
test_serial.py,"{""type"": ""variable"", ""line"": 106, ""name"": ""mock_read_data.return_value"", ""value"":  - Expecting value: line 1 column 83 (char 82)"
tests.py,"{""type"": ""assert"", ""line"": 64, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_items.py,"{""type"": ""function_call"", ""line"": 85, ""name"": ""self.assertIn"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
test_basic.py,"{""type"": ""function_call"", ""line"": 55, ""name"": ""self.assertIn"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
test_users.py,"{""type"": ""function_call"", ""line"": 56, ""name"": ""self.assertIn"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
itsdangerous.py,"{""type"": ""function_def"", ""line"": 201, ""name"": ""base64_encode"", ""args"": [""string""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 159 (char 158)"
extras.py,"{""type"": ""variable"", ""line"": 809, ""name"": ""v"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
extensions.py,"{""type"": ""function_def"", ""line"": 144, ""name"": ""getquoted"", ""args"": [""self"", ""_null""], ""defaults"": [ - Expecting value: line 1 column 100 (char 99)"
_range.py,"{""type"": ""variable"", ""line"": 260, ""name"": ""lower"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_types_basic.py,"{""type"": ""variable"", ""line"": 319, ""name"": ""o1"", ""value"": null, ""valueSrc"": ""psycopg2.Binary"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
test_quote.py,"{""type"": ""variable"", ""line"": 77, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_types_extras.py,"{""type"": ""function_call"", ""line"": 101, ""name"": ""self.assertQuotedEqual"", ""args"": [""a.getquoted"",  - Expecting value: line 1 column 98 (char 97)"
test_lobject.py,"{""type"": ""function_call"", ""line"": 102, ""name"": ""self.conn.lobject.write"", ""args"": [ - Expecting value: line 1 column 84 (char 83)"
crypto.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""INTERRUPT"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
wheel.py,"{""type"": ""function_call"", ""line"": 506, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 16, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 124, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 445, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
connection.py,"{""type"": ""function_call"", ""line"": 195, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 88, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 208, ""name"": ""_flush_decoder"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 109 (char 108)"
pyopenssl.py,"{""type"": ""comparison"", ""line"": 148, ""pairs"": [[""ext_name"",  - Expecting value: line 1 column 60 (char 59)"
universaldetector.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""self._highBitDetector"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 135 (char 134)"
charsetprober.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""aBuf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 69, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 35, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
__init__.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""_normalize_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
glob.py,"{""type"": ""variable"", ""line"": 148, ""name"": ""magic_check_bytes"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
build_py.py,"{""type"": ""comparison"", ""line"": 177, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
upload_docs.py,"{""type"": ""variable"", ""line"": 130, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
utils.py,"{""type"": ""function_def"", ""line"": 21, ""name"": ""base64url_encode"", ""args"": [""input""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.replace"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
api_jws.py,"{""type"": ""tuple"", ""line"": 144, ""name"": null, ""value"": null, ""valueSrc"": ""signing_input.split"", ""isInput"": false, ""names"": [""header_segment"", ""payload_segment""], ""args"": [ - Expecting value: line 1 column 171 (char 170)"
algorithms.py,"{""type"": ""function_def"", ""line"": 95, ""name"": ""sign"", ""args"": [""self"", ""msg"", ""key""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 112 (char 111)"
_winconsole.py,"{""type"": ""variable"", ""line"": 60, ""name"": ""EOF"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
_compat.py,"{""type"": ""function_call"", ""line"": 121, ""name"": ""self._stream.write"", ""args"": [ - Expecting value: line 1 column 79 (char 78)"
testing.py,"{""type"": ""variable"", ""line"": 64, ""name"": ""input"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
formparser.py,"{""type"": ""function_def"", ""line"": 310, ""name"": ""_find_terminator"", ""args"": [""self"", ""iterator""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 123 (char 122)"
_internal.py,"{""type"": ""dict"", ""line"": 33, ""name"": ""_cookie_quoting_map"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 133 (char 132)"
urls.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""_always_safe"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
serving.py,"{""type"": ""function_call"", ""line"": 209, ""name"": ""self.wfile.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
http.py,"{""type"": ""comparison"", ""line"": 502, ""pairs"": [[""auth_type"",  - Expecting value: line 1 column 61 (char 60)"
__init__.py,"{""type"": ""variable"", ""line"": 75, ""name"": ""match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
tbtools.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""_coding_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
securecookie.py,"{""type"": ""comparison"", ""line"": 253, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
utils.py,"{""type"": ""variable"", ""line"": 299, ""name"": ""safe"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 125 (char 124)"
acoustid.py,"{""type"": ""variable"", ""line"": 309, ""name"": ""parts"", ""value"": null, ""valueSrc"": ""line.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
views.py,"{""type"": ""variable"", ""line"": 44, ""name"": ""post_data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
serializers.py,"{""type"": ""variable"", ""line"": 167, ""name"": ""val"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
dammit.py,"{""type"": ""variable"", ""line"": 281, ""name"": ""smart_quotes_re"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
testing.py,"{""type"": ""variable"", ""line"": 101, ""name"": ""markup"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_soup.py,"{""type"": ""variable"", ""line"": 101, ""name"": ""markup"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_tree.py,"{""type"": ""function_call"", ""line"": 672, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
moveblocks.py,"{""type"": ""variable"", ""line"": 188, ""name"": ""anim"", ""value"": null, ""valueSrc"": ""QPropertyAnimation"", ""isInput"": false, ""args"": [""button4"",  - Expecting value: line 1 column 138 (char 137)"
states_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
appchooser_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
appchooser.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""animation"", ""value"": null, ""valueSrc"": ""QPropertyAnimation"", ""isInput"": false, ""args"": [""obj"",  - Expecting value: line 1 column 138 (char 137)"
animatedtiles_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
animatedtiles.py,"{""type"": ""variable"", ""line"": 235, ""name"": ""anim"", ""value"": null, ""valueSrc"": ""QPropertyAnimation"", ""isInput"": false, ""args"": [""item"",  - Expecting value: line 1 column 135 (char 134)"
stickman.py,"{""type"": ""variable"", ""line"": 514, ""name"": ""pa"", ""value"": null, ""valueSrc"": ""QPropertyAnimation"", ""isInput"": false, ""args"": [""self.m_stickMan.node"",  - Expecting value: line 1 column 149 (char 148)"
stickman_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
easing_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
easing.py,"{""type"": ""function_obj"", ""line"": 140, ""objName"": ""self.m_anim"", ""funcName"": ""Animation"", ""args"": [""self.m_item"",  - Expecting value: line 1 column 114 (char 113)"
lightmaps.py,"{""type"": ""function_call"", ""line"": 222, ""name"": ""request.setRawHeader"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
animation_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
customgeometry_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
stringlistmodel_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
abstractitemmodel.py,"{""type"": ""dict"", ""line"": 69, ""name"": ""_roles"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""TypeRole"", ""SizeRole""], ""values"": [ - Expecting value: line 1 column 156 (char 155)"
abstractitemmodel_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
objectlistmodel_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
shared_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
canvas_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
padnavigator.py,"{""type"": ""variable"", ""line"": 95, ""name"": ""smoothSplashMove"", ""value"": null, ""valueSrc"": ""QPropertyAnimation"", ""isInput"": false, ""args"": [""splash"",  - Expecting value: line 1 column 148 (char 147)"
padnavigator_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
embeddeddialogs_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
diagramscene_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
mice_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
dragdroprobot.py,"{""type"": ""variable"", ""line"": 255, ""name"": ""rot_animation"", ""value"": null, ""valueSrc"": ""QPropertyAnimation"", ""isInput"": false, ""args"": [""item"",  - Expecting value: line 1 column 144 (char 143)"
systray_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
puzzle_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
draggabletext_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
draggableicons_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
fridgemagnets_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
delayedencoding_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
customcompleter_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
i18n_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
formextractor_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
jquery_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
modelviewserver.py,"{""type"": ""dict"", ""line"": 144, ""name"": ""roleNames"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""Qt.DisplayRole"", ""Qt.BackgroundRole""], ""values"": [ - Expecting value: line 1 column 175 (char 174)"
basicdrawing_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
svgviewer_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
mdi_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
sdi_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
dockwidgets_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
mainwindow_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
stylesheet_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
tooltips_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
combowidgetmapper.py,"{""type"": ""function_call"", ""line"": 80, ""name"": ""self.mapper.addMapping"", ""args"": [null, 2,  - Expecting value: line 1 column 91 (char 90)"
puzzle_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
editabletreemodel_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
pixelator_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
chart.py,"{""type"": ""function_call"", ""line"": 576, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
chart_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
spreadsheet_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
simpletreemodel_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
schema_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
classwizard_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
configdialog_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
demoitemanimation.py,"{""type"": ""function_call"", ""line"": 52, ""name"": ""super.__init__"", ""args"": [""item"",  - Expecting value: line 1 column 82 (char 81)"
textedit_rc.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
methods.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
default.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
grouped.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
binding.py,"{""type"": ""variable"", ""line"": 55, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
properties.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
valuesource.py,"{""type"": ""variable"", ""line"": 55, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
signal.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
coercion.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
attached.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
adding.py,"{""type"": ""variable"", ""line"": 51, ""name"": ""QML"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 310, ""name"": ""rv"", ""value"": null, ""valueSrc"": ""decoder.decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 121 (char 120)"
adapters.py,"{""type"": ""function_call"", ""line"": 337, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
filepost.py,"{""type"": ""function_call"", ""line"": 95, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
universaldetector.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""self._highBitDetector"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 135 (char 134)"
charsetprober.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""aBuf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
utils.py,"{""type"": ""variable"", ""line"": 17, ""name"": ""v"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 111 (char 110)"
aws4auth.py,"{""type"": ""variable"", ""line"": 355, ""name"": ""content_hash"", ""value"": null, ""valueSrc"": ""hashlib.sha256"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 131 (char 130)"
test_requests_aws4auth.py,"{""type"": ""variable"", ""line"": 242, ""name"": ""key"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
main.py,"{""type"": ""function_call"", ""line"": 750, ""name"": ""request.setRawHeader"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
png.py,"{""type"": ""function_call"", ""line"": 648, ""name"": ""write_chunk"", ""args"": [""outfile"",  - Expecting value: line 1 column 83 (char 82)"
wsgi_server.py,"{""type"": ""variable"", ""line"": 1, ""name"": ""BODY"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
test_inout.py,"{""type"": ""variable"", ""line"": 161, ""name"": ""self._value"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
file_util_test.py,"{""type"": ""function_call"", ""line"": 52, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
components_test.py,"{""type"": ""function_call"", ""line"": 304, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
streamlit_test.py,"{""type"": ""function_call"", ""line"": 189, ""name"": ""st.audio"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
hashing_test.py,"{""type"": ""variable"", ""line"": 320, ""name"": ""b1"", ""value"": null, ""valueSrc"": ""BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
upload_file_request_handler_test.py,"{""type"": ""variable"", ""line"": 60, ""name"": ""file"", ""value"": null, ""valueSrc"": ""UploadedFile"", ""isInput"": false, ""args"": [""image.png"",  - Expecting value: line 1 column 133 (char 132)"
server_test.py,"{""type"": ""variable"", ""line"": 329, ""name"": ""file"", ""value"": null, ""valueSrc"": ""UploadedFile"", ""isInput"": false, ""args"": [""file.txt"",  - Expecting value: line 1 column 133 (char 132)"
cli_test.py,"{""type"": ""variable"", ""line"": 92, ""name"": ""file_content"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
hashing.py,"{""type"": ""variable"", ""line"": 57, ""name"": ""_CYCLE_PLACEHOLDER"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
util.py,"{""type"": ""variable"", ""line"": 49, ""name"": ""file_bytes"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
demos.py,"{""type"": ""variable"", ""line"": 159, ""name"": ""Z"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
test_compress.py,"{""type"": ""dict"", ""line"": 18, ""name"": ""TEST_FILES"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""COMPRESSABLE_FILE"", ""TOO_SMALL_FILE""], ""values"": [""a1000"",  - Expecting value: line 1 column 184 (char 183)"
tests.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""version"", ""value"": null, ""valueSrc"": ""version.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
test_crosstown_traffic.py,"{""type"": ""function_def"", ""line"": 43, ""name"": ""wsgi_thing"", ""args"": [""self"", ""environ"", ""start_response""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 133 (char 132)"
resources.py,"{""type"": ""function_def"", ""line"": 21, ""name"": ""application"", ""args"": [""environ"", ""start_response""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 126 (char 125)"
test_hey_joe.py,"{""type"": ""variable"", ""line"": 17, ""name"": ""data_to_send"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
services.py,"{""type"": ""function_call"", ""line"": 20, ""name"": ""self.transport.write"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
extras.py,"{""type"": ""variable"", ""line"": 826, ""name"": ""v"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
extensions.py,"{""type"": ""function_def"", ""line"": 141, ""name"": ""getquoted"", ""args"": [""self"", ""_null""], ""defaults"": [ - Expecting value: line 1 column 100 (char 99)"
_range.py,"{""type"": ""variable"", ""line"": 275, ""name"": ""lower"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
_openssl_crypt.py,"{""type"": ""function_def"", ""line"": 100, ""name"": ""from_string"", ""args"": [""key"", ""password""], ""defaults"": [ - Expecting value: line 1 column 104 (char 103)"
_helpers.py,"{""type"": ""variable"", ""line"": 272, ""name"": ""offset"", ""value"": null, ""valueSrc"": ""raw_key_input.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 129 (char 128)"
_pure_python_crypt.py,"{""type"": ""comparison"", ""line"": 117, ""pairs"": [[""remaining"",  - Expecting value: line 1 column 61 (char 60)"
tools.py,"{""type"": ""function_call"", ""line"": 131, ""name"": ""self.wfile.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
crypt.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""header"", ""value"": null, ""valueSrc"": ""jwt.split"", ""args"": [ - Expecting value: line 1 column 102 (char 101)"
_pkce.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""verifier"", ""value"": null, ""valueSrc"": ""base64.urlsafe_b64encode.rstrip"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 143 (char 142)"
client.py,"{""type"": ""variable"", ""line"": 1576, ""name"": ""segments"", ""value"": null, ""valueSrc"": ""id_token.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
xsrfutil.py,"{""type"": ""variable"", ""line"": 26, ""name"": ""DELIMITER"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
_helpers.py,"{""type"": ""function_def"", ""line"": 220, ""name"": ""unpadded_urlsafe_b64encode"", ""args"": [""value""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.rstrip"", ""returnArgs"": [ - Expecting value: line 1 column 172 (char 171)"
jwt.py,"{""type"": ""variable"", ""line"": 134, ""name"": ""encoded_header"", ""value"": null, ""valueSrc"": ""token.split"", ""args"": [ - Expecting value: line 1 column 112 (char 111)"
_python_rsa.py,"{""type"": ""variable"", ""line"": 35, ""name"": ""_CERTIFICATE_MARKER"", ""value"":  - Expecting value: line 1 column 74 (char 73)"
_cryptography_rsa.py,"{""type"": ""variable"", ""line"": 45, ""name"": ""_CERTIFICATE_MARKER"", ""value"":  - Expecting value: line 1 column 74 (char 73)"
wheel.py,"{""type"": ""function_call"", ""line"": 482, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 16, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 189, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 462, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
fallback.py,"{""type"": ""function_def"", ""line"": 32, ""name"": ""__init__"", ""args"": [""self"", ""s""], ""defaults"": [ - Expecting value: line 1 column 94 (char 93)"
connection.py,"{""type"": ""function_call"", ""line"": 200, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 88, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""function_def"", ""line"": 278, ""name"": ""_flush_decoder"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 109 (char 108)"
securetransport.py,"{""type"": ""function_call"", ""line"": 55, ""name"": ""memoryview"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 69, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 22, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
wheel.py,"{""type"": ""function_call"", ""line"": 601, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 197, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 471, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
models.py,"{""type"": ""variable"", ""line"": 828, ""name"": ""self._content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""None.join"",  - Expecting value: line 1 column 147 (char 146)"
fallback.py,"{""type"": ""function_def"", ""line"": 42, ""name"": ""__init__"", ""args"": [""self"", ""s""], ""defaults"": [ - Expecting value: line 1 column 94 (char 93)"
connection.py,"{""type"": ""function_call"", ""line"": 217, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 92, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""variable"", ""line"": 31, ""name"": ""self._data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 71, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 22, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
__init__.py,"{""type"": ""variable"", ""line"": 117, ""name"": ""BSONNUM"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
authentication.py,"{""type"": ""variable"", ""line"": 20, ""name"": ""auth"", ""value"": null, ""valueSrc"": ""request.META.get"", ""isInput"": false, ""args"": [""HTTP_AUTHORIZATION"",  - Expecting value: line 1 column 146 (char 145)"
tests.py,"{""type"": ""variable"", ""line"": 113, ""name"": ""content_file"", ""value"": null, ""valueSrc"": ""ContentFile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
test_compressor.py,"{""type"": ""function_call"", ""line"": 38, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
test_views.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""result_ok"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
multipartparser.py,"{""type"": ""variable"", ""line"": 326, ""name"": ""self._leftover"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
request.py,"{""type"": ""function_def"", ""line"": 354, ""name"": ""__iter__"", ""args"": [""self""], ""defaults"": [], ""return"": ""iter"", ""returnArgs"": [""self.readline"",  - Expecting value: line 1 column 143 (char 142)"
response.py,"{""type"": ""function_def"", ""line"": 288, ""name"": ""__init__"", ""args"": [""self"", ""content"", ""args""], ""defaults"": [ - Expecting value: line 1 column 109 (char 108)"
__init__.py,"{""type"": ""list"", ""line"": 2257, ""name"": ""empty_values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [null,  - Expecting value: line 1 column 136 (char 135)"
debug.py,"{""type"": ""variable"", ""line"": 373, ""name"": ""match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
encoding.py,"{""type"": ""variable"", ""line"": 186, ""name"": ""bits"", ""value"": null, ""valueSrc"": ""uri.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
client.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""response.content"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
signing.py,"{""type"": ""function_def"", ""line"": 62, ""name"": ""b64_encode"", ""args"": [""s""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 150 (char 149)"
wsgi.py,"{""type"": ""variable"", ""line"": 14, ""name"": ""_slashes_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
filebased.py,"{""type"": ""function_call"", ""line"": 49, ""name"": ""self.stream.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
uploadedfile.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""content"",  - Expecting value: line 1 column 139 (char 138)"
base.py,"{""type"": ""variable"", ""line"": 103, ""name"": ""hash"", ""value"": null, ""valueSrc"": ""encoded_data.split"", ""args"": [ - Expecting value: line 1 column 109 (char 108)"
geometry.py,"{""type"": ""variable"", ""line"": 119, ""name"": ""parts"", ""value"": null, ""valueSrc"": ""ewkt.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
layer.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""self._random_read"", ""value"": null, ""valueSrc"": ""self.test_capability"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 141 (char 140)"
libgdal.py,"{""type"": ""function_def"", ""line"": 77, ""name"": ""gdal_version"", ""args"": [], ""defaults"": [], ""return"": ""_version_info"", ""returnArgs"": [ - Expecting value: line 1 column 132 (char 131)"
srs.py,"{""type"": ""variable"", ""line"": 79, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""c_char_p"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
timed.py,"{""type"": ""variable"", ""line"": 56, ""name"": ""result"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""e.payload"",  - Expecting value: line 1 column 139 (char 138)"
serializer.py,"{""type"": ""function_def"", ""line"": 80, ""name"": ""__init__"", ""args"": [""self"", ""secret_key"", ""salt"", ""serializer"", ""serializer_kwargs"", ""signer"", ""signer_kwargs"", ""fallback_signers""], ""defaults"": [ - Expecting value: line 1 column 193 (char 192)"
jws.py,"{""type"": ""comparison"", ""line"": 64, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
encoding.py,"{""type"": ""function_def"", ""line"": 15, ""name"": ""base64_encode"", ""args"": [""string""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.rstrip"", ""returnArgs"": [ - Expecting value: line 1 column 159 (char 158)"
signer.py,"{""type"": ""function_def"", ""line"": 33, ""name"": ""get_signature"", ""args"": [""self"", ""key"", ""value""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 123 (char 122)"
GifImagePlugin.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
JpegImagePlugin.py,"{""type"": ""comparison"", ""line"": 108, ""pairs"": [[""s"",  - Expecting value: line 1 column 53 (char 52)"
GimpPaletteFile.py,"{""type"": ""comparison"", ""line"": 32, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 62 (char 61)"
TiffImagePlugin.py,"{""type"": ""variable"", ""line"": 79, ""name"": ""II"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
ImImagePlugin.py,"{""type"": ""variable"", ""line"": 97, ""name"": ""split"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
BlpImagePlugin.py,"{""type"": ""comparison"", ""line"": 252, ""pairs"": [[""self.magic"",  - Expecting value: line 1 column 62 (char 61)"
GbrImagePlugin.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""magic_number"",  - Expecting value: line 1 column 63 (char 62)"
XpmImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""xpm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WebPImagePlugin.py,"{""type"": ""dict"", ""line"": 21, ""name"": ""_VP8_MODES_BY_IDENTIFIER"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 138 (char 137)"
Image.py,"{""type"": ""function_def"", ""line"": 769, ""name"": ""tobitmap"", ""args"": [""self"", ""name""], ""defaults"": [""image""], ""return"": ""None.join"", ""returnArgs"": [""None.encode"", ""None.encode"", ""None.encode"", ""data"",  - Expecting value: line 1 column 199 (char 198)"
MspImagePlugin.py,"{""type"": ""comparison"", ""line"": 57, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
BmpImagePlugin.py,"{""type"": ""comparison"", ""line"": 264, ""pairs"": [[""head_data"",  - Expecting value: line 1 column 61 (char 60)"
IcoImagePlugin.py,"{""type"": ""variable"", ""line"": 39, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
GimpGradientFile.py,"{""type"": ""comparison"", ""line"": 107, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 63 (char 62)"
FontFile.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
PpmImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""b_whitespace"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
ImtImagePlugin.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""field"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
PixarImagePlugin.py,"{""type"": ""comparison"", ""line"": 49, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
ImageFont.py,"{""type"": ""comparison"", ""line"": 90, ""pairs"": [[""file.readline"",  - Expecting value: line 1 column 64 (char 63)"
XbmImagePlugin.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""xbm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WalImageFile.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""quake2palette"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
WmfImagePlugin.py,"{""type"": ""comparison"", ""line"": 94, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
FtexImagePlugin.py,"{""type"": ""variable"", ""line"": 59, ""name"": ""MAGIC"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
BdfFontFile.py,"{""type"": ""comparison"", ""line"": 51, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
DdsImagePlugin.py,"{""type"": ""comparison"", ""line"": 140, ""pairs"": [[""fourcc"",  - Expecting value: line 1 column 58 (char 57)"
XVThumbImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
IcnsImagePlugin.py,"{""type"": ""comparison"", ""line"": 43, ""pairs"": [[""sig"",  - Expecting value: line 1 column 54 (char 53)"
EpsImagePlugin.py,"{""type"": ""variable"", ""line"": 175, ""name"": ""s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""self.char"",  - Expecting value: line 1 column 135 (char 134)"
Jpeg2KImagePlugin.py,"{""type"": ""comparison"", ""line"": 78, ""pairs"": [[""tbox"",  - Expecting value: line 1 column 55 (char 54)"
PdfParser.py,"{""type"": ""function_call"", ""line"": 175, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
ImageFile.py,"{""type"": ""variable"", ""line"": 209, ""name"": ""prefix"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
CurImagePlugin.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""m"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
PcdImagePlugin.py,"{""type"": ""comparison"", ""line"": 42, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
PngImagePlugin.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
ImageDraw.py,"{""type"": ""variable"", ""line"": 253, ""name"": ""split_character"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""\n"",  - Expecting value: line 1 column 142 (char 141)"
PaletteFile.py,"{""type"": ""comparison"", ""line"": 36, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
testing.py,"{""type"": ""variable"", ""line"": 82, ""name"": ""sep"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 123 (char 122)"
__init__.py,"{""type"": ""comparison"", ""line"": 160, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
arbiter.py,"{""type"": ""function_call"", ""line"": 338, ""name"": ""os.write"", ""args"": [""self.PIPE[1]"",  - Expecting value: line 1 column 85 (char 84)"
util.py,"{""type"": ""variable"", ""line"": 297, ""name"": ""chunk"", ""value"": null, ""valueSrc"": ""None.join"", ""isInput"": false, ""args"": [""chunk_size.encode"", ""data"",  - Expecting value: line 1 column 148 (char 147)"
message.py,"{""type"": ""variable"", ""line"": 211, ""name"": ""idx"", ""value"": null, ""valueSrc"": ""data.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
body.py,"{""type"": ""variable"", ""line"": 43, ""name"": ""idx"", ""value"": null, ""valueSrc"": ""buf.getvalue.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
wsgi.py,"{""type"": ""function_call"", ""line"": 134, ""name"": ""sock.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
workertmp.py,"{""type"": ""function_call"", ""line"": 47, ""name"": ""os.write"", ""args"": [""self._tmp.fileno"",  - Expecting value: line 1 column 88 (char 87)"
common.py,"{""type"": ""function_def"", ""line"": 62, ""name"": ""quote"", ""args"": [""s"", ""safe""], ""defaults"": [ - Expecting value: line 1 column 91 (char 90)"
__init__.py,"{""type"": ""variable"", ""line"": 1581, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
grid_file.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""EMPTY"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_random.py,"{""type"": ""variable"", ""line"": 465, ""name"": ""desired"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_randomstate.py,"{""type"": ""variable"", ""line"": 633, ""name"": ""desired"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_generator_mt19937.py,"{""type"": ""variable"", ""line"": 705, ""name"": ""desired"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_utils.py,"{""type"": ""variable"", ""line"": 985, ""name"": ""xi"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
format.py,"{""type"": ""variable"", ""line"": 176, ""name"": ""MAGIC_PREFIX"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
npyio.py,"{""type"": ""variable"", ""line"": 433, ""name"": ""_ZIP_PREFIX"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_twodim_base.py,"{""type"": ""function_call"", ""line"": 95, ""name"": ""assert_equal"", ""args"": [""eye"",  - Expecting value: line 1 column 79 (char 78)"
test__iotools.py,"{""type"": ""variable"", ""line"": 56, ""name"": ""strg"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test__datasource.py,"{""type"": ""variable"", ""line"": 56, ""name"": ""magic_line"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
test_format.py,"{""type"": ""variable"", ""line"": 572, ""name"": ""expected"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [null, ""xrange"", ""\u512a\u826f"",  - Expecting value: line 1 column 153 (char 152)"
test_histograms.py,"{""type"": ""variable"", ""line"": 204, ""name"": ""weights"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_arraysetops.py,"{""type"": ""list"", ""line"": 497, ""name"": ""aa"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1.0,  - Expecting value: line 1 column 124 (char 123)"
test_function_base.py,"{""type"": ""function_call"", ""line"": 428, ""name"": ""assert_equal"", ""args"": [""select"",  - Expecting value: line 1 column 83 (char 82)"
test_polynomial.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""r"", ""value"": null, ""valueSrc"": ""np.poly1d"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
test_type_check.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""acs"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
test_io.py,"{""type"": ""variable"", ""line"": 142, ""name"": ""a"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
test_scripts.py,"{""type"": ""function_call"", ""line"": 44, ""name"": ""assert_equal"", ""args"": [""stdout.strip"",  - Expecting value: line 1 column 88 (char 87)"
core.py,"{""type"": ""dict"", ""line"": 184, ""name"": ""default_filler"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""b"", ""c"", ""f"", ""i"", ""O"", ""S"", ""u"", ""V"", ""U""], ""values"": [true, 1e+20, 1e+20, 999999, ""?"",  - Expecting value: line 1 column 219 (char 218)"
bench.py,"{""type"": ""variable"", ""line"": 18, ""name"": ""zs"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
test_core.py,"{""type"": ""variable"", ""line"": 647, ""name"": ""z"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
test_old_ma.py,"{""type"": ""variable"", ""line"": 372, ""name"": ""z"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
test_extras.py,"{""type"": ""variable"", ""line"": 235, ""name"": ""a"", ""value"": null, ""valueSrc"": ""masked_array"", ""isInput"": false, ""args"": [0,  - Expecting value: line 1 column 121 (char 120)"
test_mrecords.py,"{""type"": ""list"", ""line"": 33, ""name"": ""slist"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 121 (char 120)"
test_hermite.py,"{""type"": ""list"", ""line"": 462, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 121 (char 120)"
test_hermite_e.py,"{""type"": ""list"", ""line"": 463, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 121 (char 120)"
test_laguerre.py,"{""type"": ""list"", ""line"": 452, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 121 (char 120)"
test_legendre.py,"{""type"": ""list"", ""line"": 463, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 121 (char 120)"
test_polyutils.py,"{""type"": ""list"", ""line"": 56, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 117 (char 116)"
test_chebyshev.py,"{""type"": ""list"", ""line"": 474, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 121 (char 120)"
test_polynomial.py,"{""type"": ""list"", ""line"": 569, ""name"": ""x"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 121 (char 120)"
misc_util.py,"{""type"": ""variable"", ""line"": 1841, ""name"": ""m"", ""value"": null, ""valueSrc"": ""re.match"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
ccompiler.py,"{""type"": ""variable"", ""line"": 152, ""name"": ""o"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
function_base.py,"{""type"": ""variable"", ""line"": 415, ""name"": ""out_sign[all_imag]"", ""value"":  - Expecting value: line 1 column 74 (char 73)"
_internal.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""_nbo"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
memmap.py,"{""type"": ""function_call"", ""line"": 251, ""name"": ""fid.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
getlimits.py,"{""type"": ""function_call"", ""line"": 114, ""name"": ""_register_type"", ""args"": [null,  - Expecting value: line 1 column 81 (char 80)"
test_arrayprint.py,"{""type"": ""variable"", ""line"": 550, ""name"": ""c"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
test_memmap.py,"{""type"": ""function_call"", ""line"": 213, ""name"": ""self.tmpfp.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
test_multiarray.py,"{""type"": ""variable"", ""line"": 565, ""name"": ""b"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
test_regression.py,"{""type"": ""variable"", ""line"": 134, ""name"": ""x"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
test_records.py,"{""type"": ""function_call"", ""line"": 308, ""name"": ""assert_equal"", ""args"": [""a.qux.D"",  - Expecting value: line 1 column 84 (char 83)"
test_nditer.py,"{""type"": ""function_call"", ""line"": 1774, ""name"": ""assert_equal"", ""args"": [null,  - Expecting value: line 1 column 80 (char 79)"
test_defchararray.py,"{""type"": ""function_call"", ""line"": 21, ""name"": ""assert_array_equal"", ""args"": [null,  - Expecting value: line 1 column 84 (char 83)"
test_umath_complex.py,"{""type"": ""variable"", ""line"": 136, ""name"": ""x"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [1,  - Expecting value: line 1 column 117 (char 116)"
test_numeric.py,"{""type"": ""variable"", ""line"": 220, ""name"": ""B[0]"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_ufunc.py,"{""type"": ""variable"", ""line"": 157, ""name"": ""astring"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_scalarinherit.py,"{""type"": ""variable"", ""line"": 47, ""name"": ""s"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
test_item_selection.py,"{""type"": ""list"", ""line"": 14, ""name"": ""a_str"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 121 (char 120)"
test_longdouble.py,"{""type"": ""function_call"", ""line"": 50, ""name"": ""np.longdouble"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
test_umath.py,"{""type"": ""variable"", ""line"": 242, ""name"": ""x"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
test_function_base.py,"{""type"": ""variable"", ""line"": 121, ""name"": ""y"", ""value"": null, ""valueSrc"": ""geomspace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
test_dtype.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""assert_raises"", ""args"": [""TypeError"", ""np.dtype"",  - Expecting value: line 1 column 99 (char 98)"
linalg.py,"{""type"": ""variable"", ""line"": 43, ""name"": ""_N"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
test_regression.py,"{""type"": ""variable"", ""line"": 19, ""name"": ""rva"", ""value"": null, ""valueSrc"": ""array"", ""isInput"": false, ""args"": [103.221168, null,  - Expecting value: line 1 column 130 (char 129)"
test_build.py,"{""type"": ""function_obj"", ""line"": 50, ""objName"": ""deps"", ""funcName"": ""f.grep_dependencies"", ""args"": [""lapack_lite.__file__"",  - Expecting value: line 1 column 125 (char 124)"
test_linalg.py,"{""type"": ""variable"", ""line"": 1516, ""name"": ""d[0]"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
util.py,"{""type"": ""variable"", ""line"": 215, ""name"": ""m"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
test_compile_function.py,"{""type"": ""variable"", ""line"": 89, ""name"": ""ret_val"", ""value"": null, ""valueSrc"": ""numpy.f2py.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 129 (char 128)"
test_defmatrix.py,"{""type"": ""variable"", ""line"": 142, ""name"": ""B"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
utils.py,"{""type"": ""variable"", ""line"": 197, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 471, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
models.py,"{""type"": ""variable"", ""line"": 828, ""name"": ""self._content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""None.join"",  - Expecting value: line 1 column 147 (char 146)"
pkcs1.py,"{""type"": ""dict"", ""line"": 38, ""name"": ""HASH_ASN1"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""MD5"", ""SHA-1"", ""SHA-224"", ""SHA-256"", ""SHA-384"", ""SHA-512""], ""values"": [ - Expecting value: line 1 column 195 (char 194)"
pem.py,"{""type"": ""comparison"", ""line"": 85, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
transform.py,"{""type"": ""list"", ""line"": 86, ""name"": ""raw_bytes"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 125 (char 124)"
key.py,"{""type"": ""variable"", ""line"": 559, ""name"": ""der"", ""value"": null, ""valueSrc"": ""rsa.pem.load_pem"", ""isInput"": false, ""args"": [""keyfile"",  - Expecting value: line 1 column 135 (char 134)"
localization.py,"{""type"": ""variable"", ""line"": 149, ""name"": ""raw_locales"", ""value"": null, ""valueSrc"": ""raw_locales.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 133 (char 132)"
stata.py,"{""type"": ""variable"", ""line"": 734, ""name"": ""null_byte"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
parsers.py,"{""type"": ""dict"", ""line"": 476, ""name"": ""_parser_defaults"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""delimiter"", ""escapechar"", ""quotechar"", ""quoting"", ""doublequote"", ""skipinitialspace"", ""lineterminator"", ""header"", ""index_col"", ""names"", ""prefix"", ""skiprows"", ""skipfooter"", ""nrows"", ""na_values"", ""keep_default_na"", ""true_values"", ""false_values"", ""converters"", ""dtype"", ""cache_dates"", ""thousands"", ""comment"", ""decimal"", ""parse_dates"", ""keep_date_col"", ""dayfirst"", ""date_parser"", ""usecols"", ""chunksize"", ""verbose"", ""encoding"", ""squeeze"", ""compression"", ""mangle_dupe_cols"", ""infer_datetime_format"", ""skip_blank_lines""], ""values"": [null, null, ""\"""", ""csv.QUOTE_MINIMAL"", true, false, null, ""infer"", null, null, null, null, 0, null, null, true, null, null, null, null, true, null, null,  - Expecting value: line 1 column 811 (char 810)"
windows.py,"{""type"": ""variable"", ""line"": 111, ""name"": ""hwnd"", ""value"": null, ""valueSrc"": ""safeCreateWindowExA"", ""isInput"": false, ""args"": [0,  - Expecting value: line 1 column 131 (char 130)"
sas7bdat.py,"{""type"": ""comparison"", ""line"": 162, ""pairs"": [[""buf"",  - Expecting value: line 1 column 55 (char 54)"
sas_constants.py,"{""type"": ""variable"", ""line"": 8, ""name"": ""align_1_checker_value"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_strings.py,"{""type"": ""variable"", ""line"": 3191, ""name"": ""decodeBase"", ""value"": null, ""valueSrc"": ""Series"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
test_algos.py,"{""type"": ""variable"", ""line"": 827, ""name"": ""comps"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [""nan"",  - Expecting value: line 1 column 125 (char 124)"
test_nanops.py,"{""type"": ""variable"", ""line"": 29, ""name"": ""self.arr_complex"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_to_csv.py,"{""type"": ""variable"", ""line"": 946, ""name"": ""expected"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_api.py,"{""type"": ""assert"", ""line"": 347, ""left"": ""arr"", ""comparators"": [ - Expecting value: line 1 column 64 (char 63)"
test_constructors.py,"{""type"": ""dict"", ""line"": 950, ""name"": ""data"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""int"", ""bool"", ""float"", ""complex"", ""object""], ""values"": [1, true, 3.0,  - Expecting value: line 1 column 190 (char 189)"
test_indexing.py,"{""type"": ""variable"", ""line"": 3122, ""name"": ""expected"", ""value"": null, ""valueSrc"": ""DataFrame"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
test_arithmetic.py,"{""type"": ""variable"", ""line"": 240, ""name"": ""arr2"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
test_axis_select_reindex.py,"{""type"": ""variable"", ""line"": 1087, ""name"": ""df"", ""value"": null, ""valueSrc"": ""DataFrame"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
test_packers.py,"{""type"": ""variable"", ""line"": 187, ""name"": ""x"", ""value"": null, ""valueSrc"": ""np.complex64"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
test_parquet.py,"{""type"": ""list"", ""line"": 283, ""name"": ""df.columns"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 127 (char 126)"
test_s3.py,"{""type"": ""list"", ""line"": 22, ""name"": ""data"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 120 (char 119)"
test_to_csv.py,"{""type"": ""variable"", ""line"": 380, ""name"": ""expected_lf"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_pandas.py,"{""type"": ""list"", ""line"": 1440, ""name"": ""values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 124 (char 123)"
test_ujson.py,"{""type"": ""variable"", ""line"": 600, ""name"": ""quote"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_pytables.py,"{""type"": ""variable"", ""line"": 4982, ""name"": ""complex64"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
test_buffer.py,"{""type"": ""assert"", ""line"": 14, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_read_size.py,"{""type"": ""assert"", ""line"": 11, ""left"": ""unpacker.unpack"", ""comparators"": [ - Expecting value: line 1 column 75 (char 74)"
test_extension.py,"{""type"": ""assert"", ""line"": 15, ""left"": ""p"", ""comparators"": [ - Expecting value: line 1 column 61 (char 60)"
test_limits.py,"{""type"": ""variable"", ""line"": 95, ""name"": ""d"", ""value"": null, ""valueSrc"": ""ExtType"", ""isInput"": false, ""args"": [42,  - Expecting value: line 1 column 116 (char 115)"
test_newspec.py,"{""type"": ""variable"", ""line"": 7, ""name"": ""header"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_sequnpack.py,"{""type"": ""function_call"", ""line"": 19, ""name"": ""unpacker.feed"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
test_case.py,"{""type"": ""assert"", ""line"": 151, ""left"": ""unpackb"", ""comparators"": [ - Expecting value: line 1 column 68 (char 67)"
test_unpack_raw.py,"{""type"": ""function_call"", ""line"": 10, ""name"": ""unpacker.feed"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
test_pack.py,"{""type"": ""list"", ""line"": 17, ""name"": ""test_data"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [0, 1, 127, 128, 255, 256, 65535, 65536, 1.0,  - Expecting value: line 1 column 170 (char 169)"
test_except.py,"{""type"": ""function_call"", ""line"": 38, ""name"": ""unpackb"", ""args"": [ - Expecting value: line 1 column 67 (char 66)"
test_format.py,"{""type"": ""function_call"", ""line"": 11, ""name"": ""check"", ""args"": [ - Expecting value: line 1 column 65 (char 64)"
test_obj.py,"{""type"": ""comparison"", ""line"": 20, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
test_c_parser_only.py,"{""type"": ""variable"", ""line"": 519, ""name"": ""t"", ""value"": null, ""valueSrc"": ""BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
test_python_parser_only.py,"{""type"": ""variable"", ""line"": 134, ""name"": ""data"", ""value"": null, ""valueSrc"": ""data.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 121 (char 120)"
test_common.py,"{""type"": ""variable"", ""line"": 1983, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_coercion.py,"{""type"": ""variable"", ""line"": 156, ""name"": ""obj"", ""value"": null, ""valueSrc"": ""pd.Series"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
test_indexing.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""df.loc"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
test_constructors.py,"{""type"": ""list"", ""line"": 600, ""name"": ""values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1, 2,  - Expecting value: line 1 column 129 (char 128)"
test_dtypes.py,"{""type"": ""variable"", ""line"": 429, ""name"": ""b"", ""value"": null, ""valueSrc"": ""Series"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 112 (char 111)"
test_inference.py,"{""type"": ""variable"", ""line"": 651, ""name"": ""arr"", ""value"": null, ""valueSrc"": ""np.array"", ""isInput"": false, ""args"": [1.0, 2.0,  - Expecting value: line 1 column 126 (char 125)"
test_move.py,"{""type"": ""variable"", ""line"": 19, ""name"": ""b"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
message.py,"{""type"": ""variable"", ""line"": 62, ""name"": ""_EMPTY"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
auth.py,"{""type"": ""variable"", ""line"": 255, ""name"": ""user"", ""value"": null, ""valueSrc"": ""username.encode.replace.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 140 (char 139)"
network.py,"{""type"": ""comparison"", ""line"": 225, ""pairs"": [[""chunk"",  - Expecting value: line 1 column 57 (char 56)"
_unicodefun.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""rv"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
_winconsole.py,"{""type"": ""variable"", ""line"": 60, ""name"": ""EOF"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
_compat.py,"{""type"": ""function_call"", ""line"": 140, ""name"": ""self._stream.write"", ""args"": [ - Expecting value: line 1 column 79 (char 78)"
testing.py,"{""type"": ""variable"", ""line"": 65, ""name"": ""input"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
connection.py,"{""type"": ""function_call"", ""line"": 215, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 92, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""variable"", ""line"": 26, ""name"": ""self._data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
isoparser.py,"{""type"": ""variable"", ""line"": 202, ""name"": ""_DATE_SEP"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
server.py,"{""type"": ""function_def"", ""line"": 1111, ""name"": ""__init__"", ""args"": [""self"", ""code"", ""headers"", ""body""], ""defaults"": [""HTTP_OK"", null,  - Expecting value: line 1 column 135 (char 134)"
filestore.py,"{""type"": ""variable"", ""line"": 29, ""name"": ""h64"", ""value"": null, ""valueSrc"": ""h64.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
formparser.py,"{""type"": ""function_def"", ""line"": 362, ""name"": ""_find_terminator"", ""args"": [""self"", ""iterator""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 123 (char 122)"
_internal.py,"{""type"": ""set"", ""line"": 30, ""name"": ""_cookie_params"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 129 (char 128)"
security.py,"{""type"": ""function_def"", ""line"": 168, ""name"": ""hashfunc"", ""args"": [""d""], ""defaults"": [ - Expecting value: line 1 column 87 (char 86)"
utils.py,"{""type"": ""comparison"", ""line"": 311, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
urls.py,"{""type"": ""variable"", ""line"": 358, ""name"": ""_at"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
serving.py,"{""type"": ""function_call"", ""line"": 239, ""name"": ""self.wfile.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
http.py,"{""type"": ""comparison"", ""line"": 554, ""pairs"": [[""auth_type"",  - Expecting value: line 1 column 61 (char 60)"
__init__.py,"{""type"": ""variable"", ""line"": 103, ""name"": ""match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
tbtools.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""_coding_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
securecookie.py,"{""type"": ""comparison"", ""line"": 275, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
utils.py,"{""type"": ""variable"", ""line"": 299, ""name"": ""safe"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 125 (char 124)"
webserver.py,"{""type"": ""list"", ""line"": 230, ""name"": ""net_interface_names"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 136 (char 135)"
main.py,"{""type"": ""comparison"", ""line"": 74, ""pairs"": [[""topic"",  - Expecting value: line 1 column 56 (char 55)"
umqtt.py,"{""type"": ""variable"", ""line"": 60, ""name"": ""msg"", ""value"": null, ""valueSrc"": ""bytearray"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 116 (char 115)"
hello.py,"{""type"": ""function_def"", ""line"": 71, ""name"": ""hello_binary"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
storage.py,"{""type"": ""variable"", ""line"": 144, ""name"": ""file_data"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""file.data"",  - Expecting value: line 1 column 143 (char 142)"
mock.py,"{""type"": ""function_def"", ""line"": 101, ""name"": ""method"", ""args"": [""self"", ""method"", ""location"", ""query"", ""data"", ""scheme"", ""address"", ""headers""], ""defaults"": ["""",  - Expecting value: line 1 column 163 (char 162)"
cache.py,"{""type"": ""variable"", ""line"": 177, ""name"": ""expires_s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""legacy.bytes"",  - Expecting value: line 1 column 146 (char 145)"
session.py,"{""type"": ""variable"", ""line"": 667, ""name"": ""digest"", ""value"": null, ""valueSrc"": ""data.split"", ""args"": [ - Expecting value: line 1 column 103 (char 102)"
structures.py,"{""type"": ""variable"", ""line"": 272, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
util.py,"{""type"": ""variable"", ""line"": 1373, ""name"": ""part_s"", ""value"": null, ""valueSrc"": ""part.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
http.py,"{""type"": ""function_call"", ""line"": 1084, ""name"": ""buffer.append"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
base.py,"{""type"": ""variable"", ""line"": 228, ""name"": ""CSS_ABS_REGEX"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
log.py,"{""type"": ""function_call"", ""line"": 131, ""name"": ""self.assertEqual"", ""args"": [null,  - Expecting value: line 1 column 83 (char 82)"
typesf.py,"{""type"": ""variable"", ""line"": 76, ""name"": ""person.car"", ""value"": null, ""valueSrc"": null, ""isInput"": false, ""args"": [ - Expecting value: line 1 column 116 (char 115)"
crypt.py,"{""type"": ""variable"", ""line"": 47, ""name"": ""rc4"", ""value"": null, ""valueSrc"": ""appier.RC4"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
cache.py,"{""type"": ""variable"", ""line"": 93, ""name"": ""cache[first]"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
legacy.py,"{""type"": ""function_call"", ""line"": 64, ""name"": ""self.assertEqual"", ""args"": [null,  - Expecting value: line 1 column 82 (char 81)"
util.py,"{""type"": ""variable"", ""line"": 1062, ""name"": ""file"", ""value"": null, ""valueSrc"": ""appier.FileTuple.from_data"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 136 (char 135)"
http.py,"{""type"": ""function_def"", ""line"": 167, ""name"": ""text_g"", ""args"": [""message""], ""defaults"": [ - Expecting value: line 1 column 91 (char 90)"
test_provider.py,"{""type"": ""variable"", ""line"": 144, ""name"": ""handler.body"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
test_movecopy.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""handler.body"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_zip.py,"{""type"": ""variable"", ""line"": 18, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_crud.py,"{""type"": ""variable"", ""line"": 39, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_provider.py,"{""type"": ""function_call"", ""line"": 133, ""name"": ""aiohttpretty.register_uri"", ""args"": [""POST"", null], ""keywords"": [[""body"",  - Expecting value: line 1 column 123 (char 122)"
fixtures.py,"{""type"": ""function_def"", ""line"": 51, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_def"", ""line"": 63, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""variable"", ""line"": 394, ""name"": ""file_data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
test_provider.py,"{""type"": ""function_call"", ""line"": 43, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
test_provider.py,"{""type"": ""function_def"", ""line"": 31, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_def"", ""line"": 156, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 101 (char 100)"
fixtures.py,"{""type"": ""function_def"", ""line"": 189, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 101 (char 100)"
test_provider.py,"{""type"": ""function_def"", ""line"": 33, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_call"", ""line"": 472, ""name"": ""aiohttpretty.register_uri"", ""args"": [""GET"", ""http://base.url/api/v4/projects/123/repository/files/folder1%2Ffile.py/raw?ref=a1b2c3d4""], ""keywords"": [[""body"",  - Expecting value: line 1 column 207 (char 206)"
test_provider.py,"{""type"": ""function_def"", ""line"": 81, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_def"", ""line"": 72, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_call"", ""line"": 163, ""name"": ""aiohttpretty.register_uri"", ""args"": [""GET"", null], ""keywords"": [[""body"",  - Expecting value: line 1 column 122 (char 121)"
fixtures.py,"{""type"": ""function_def"", ""line"": 99, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_def"", ""line"": 58, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_provider.py,"{""type"": ""function_call"", ""line"": 301, ""name"": ""aiohttpretty.register_uri"", ""args"": [""GET"", null], ""keywords"": [[""body"",  - Expecting value: line 1 column 122 (char 121)"
fixtures.py,"{""type"": ""function_def"", ""line"": 39, ""name"": ""file_content"", ""args"": [], ""defaults"": [], ""return"":  - Expecting value: line 1 column 100 (char 99)"
test_base64encodestream.py,"{""type"": ""variable"", ""line"": 20, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_stringstream.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_zip.py,"{""type"": ""assert"", ""line"": 31, ""left"": ""result.read"", ""comparators"": [ - Expecting value: line 1 column 71 (char 70)"
test_jsonstream.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""buffer"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_http.py,"{""type"": ""assert"", ""line"": 21, ""left"": null, ""comparators"": [ - Expecting value: line 1 column 62 (char 61)"
__init__.py,"{""type"": ""variable"", ""line"": 96, ""name"": ""self.body"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
zip.py,"{""type"": ""variable"", ""line"": 276, ""name"": ""signature"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
base.py,"{""type"": ""comparison"", ""line"": 32, ""pairs"": [[""chunk"",  - Expecting value: line 1 column 56 (char 55)"
base64.py,"{""type"": ""variable"", ""line"": 17, ""name"": ""self.extra"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
test_checkout_flow.py,"{""type"": ""assert"", ""line"": 75, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_model_resolver.py,"{""type"": ""assert"", ""line"": 19, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_product.py,"{""type"": ""assert"", ""line"": 32, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_product_price.py,"{""type"": ""assert"", ""line"": 34, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_thumbnails_templatetag.py,"{""type"": ""variable"", ""line"": 144, ""name"": ""TEST_SVG"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_uploads.py,"{""type"": ""function_call"", ""line"": 78, ""name"": ""tmp_file.write"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
test_error_handling.py,"{""type"": ""assert"", ""line"": 89, ""left"":  - Expecting value: line 1 column 40 (char 39)"
ensure_unicode_literals.py,"{""type"": ""comparison"", ""line"": 51, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
check_sanity.py,"{""type"": ""function_def"", ""line"": 115, ""name"": ""check_line"", ""args"": [""cls"", ""line""], ""defaults"": [], ""return"": ""line.endswith"", ""returnArgs"": [ - Expecting value: line 1 column 144 (char 143)"
installer.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""self._log_buffer"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
itsdangerous.py,"{""type"": ""function_def"", ""line"": 201, ""name"": ""base64_encode"", ""args"": [""string""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 159 (char 158)"
crypto.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""INTERRUPT"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
formparser.py,"{""type"": ""function_def"", ""line"": 315, ""name"": ""_find_terminator"", ""args"": [""self"", ""iterator""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 123 (char 122)"
_internal.py,"{""type"": ""dict"", ""line"": 33, ""name"": ""_cookie_quoting_map"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 133 (char 132)"
urls.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""_always_safe"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
serving.py,"{""type"": ""function_call"", ""line"": 119, ""name"": ""self.wfile.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
http.py,"{""type"": ""comparison"", ""line"": 440, ""pairs"": [[""auth_type"",  - Expecting value: line 1 column 61 (char 60)"
formparser.py,"{""type"": ""variable"", ""line"": 50, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
exceptions.py,"{""type"": ""function_call"", ""line"": 35, ""name"": ""self.assert_equal"", ""args"": [""resp.get_data"",  - Expecting value: line 1 column 94 (char 93)"
test.py,"{""type"": ""function_call"", ""line"": 95, ""name"": ""self.assert_strict_equal"", ""args"": [""list"",  - Expecting value: line 1 column 92 (char 91)"
utils.py,"{""type"": ""function_call"", ""line"": 32, ""name"": ""self.assert_in"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
datastructures.py,"{""type"": ""function_call"", ""line"": 69, ""name"": ""d.setlist"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
urls.py,"{""type"": ""function_call"", ""line"": 44, ""name"": ""self.assert_strict_equal"", ""args"": [""urls.url_unquote"",  - Expecting value: line 1 column 104 (char 103)"
internal.py,"{""type"": ""assert"", ""line"": 35, ""left"":  - Expecting value: line 1 column 40 (char 39)"
wrappers.py,"{""type"": ""function_call"", ""line"": 87, ""name"": ""self.assert_strict_equal"", ""args"": [""response[data]"",  - Expecting value: line 1 column 102 (char 101)"
wsgi.py,"{""type"": ""function_call"", ""line"": 51, ""name"": ""self.assert_equal"", ""args"": [null,  - Expecting value: line 1 column 83 (char 82)"
serving.py,"{""type"": ""function_call"", ""line"": 80, ""name"": ""self.assert_in"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
routing.py,"{""type"": ""assert"", ""line"": 205, ""left"": ""dispatch.data"", ""comparators"": [ - Expecting value: line 1 column 74 (char 73)"
http.py,"{""type"": ""variable"", ""line"": 268, ""name"": ""env[HTTP_IF_NONE_MATCH]"", ""value"": null, ""valueSrc"": ""http.generate_etag"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 146 (char 145)"
fixers.py,"{""type"": ""function_call"", ""line"": 40, ""name"": ""self.assert_equal"", ""args"": [""response.get_data"",  - Expecting value: line 1 column 98 (char 97)"
securecookie.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""c2"", ""value"": null, ""valueSrc"": ""SecureCookie.unserialize"", ""isInput"": false, ""args"": [""s"",  - Expecting value: line 1 column 135 (char 134)"
cache.py,"{""type"": ""function_call"", ""line"": 108, ""name"": ""c._client.set"", ""args"": [""foo"",  - Expecting value: line 1 column 81 (char 80)"
iterio.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""io"", ""value"": null, ""valueSrc"": ""IterIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 112 (char 111)"
securecookie.py,"{""type"": ""variable"", ""line"": 243, ""name"": ""base64_hash"", ""value"": null, ""valueSrc"": ""string.split"", ""args"": [ - Expecting value: line 1 column 110 (char 109)"
generate_tfrecord.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""image_format"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_eutils.py,"{""type"": ""assert"", ""line"": 115, ""left"":  - Expecting value: line 1 column 41 (char 40)"
dupespotter.py,"{""type"": ""function_def"", ""line"": 39, ""name"": ""lower_escapes"", ""args"": [""url""], ""defaults"": [], ""return"": ""re.sub"", ""returnArgs"": [ - Expecting value: line 1 column 131 (char 130)"
ignoracle_test.py,"{""type"": ""function_call"", ""line"": 96, ""name"": ""self.oracle.set_patterns"", ""args"": [ - Expecting value: line 1 column 84 (char 83)"
test_utils.py,"{""type"": ""function_call"", ""line"": 145, ""name"": ""self.assertEqual"", ""args"": [""attachments.file.read"",  - Expecting value: line 1 column 102 (char 101)"
test_backends.py,"{""type"": ""function_call"", ""line"": 97, ""name"": ""message.attach"", ""args"": [""attachment.txt"",  - Expecting value: line 1 column 92 (char 91)"
typing.py,"{""type"": ""function_def"", ""line"": 17, ""name"": ""is_dir"", ""args"": [""self"", ""follow_symlinks""], ""defaults"": [ - Expecting value: line 1 column 106 (char 105)"
test_celery_beat.py,"{""type"": ""assert"", ""line"": 44, ""left"": ""foo"", ""comparators"": [ - Expecting value: line 1 column 63 (char 62)"
test_redis.py,"{""type"": ""function_call"", ""line"": 16, ""name"": ""redis.set"", ""args"": [""foo"",  - Expecting value: line 1 column 76 (char 75)"
test_simple_route.py,"{""type"": ""assert"", ""line"": 45, ""left"": ""res.body"", ""comparators"": [ - Expecting value: line 1 column 68 (char 67)"
wheel.py,"{""type"": ""function_call"", ""line"": 595, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 197, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 471, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
models.py,"{""type"": ""variable"", ""line"": 828, ""name"": ""self._content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""None.join"",  - Expecting value: line 1 column 147 (char 146)"
fallback.py,"{""type"": ""function_def"", ""line"": 32, ""name"": ""__init__"", ""args"": [""self"", ""s""], ""defaults"": [ - Expecting value: line 1 column 94 (char 93)"
connection.py,"{""type"": ""function_call"", ""line"": 215, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 92, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""variable"", ""line"": 26, ""name"": ""self._data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 71, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 22, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
_component.py,"{""type"": ""variable"", ""line"": 29, ""name"": ""tmp_name"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 128 (char 127)"
test_config.py,"{""type"": ""function_call"", ""line"": 142, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
bsdf_lite.py,"{""type"": ""function_call"", ""line"": 233, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
_tornadoserver.py,"{""type"": ""function_call"", ""line"": 585, ""name"": ""self.ping"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
test_assetstore.py,"{""type"": ""function_call"", ""line"": 110, ""name"": ""s.add_shared_data"", ""args"": [""xx"",  - Expecting value: line 1 column 84 (char 83)"
test_session.py,"{""type"": ""function_call"", ""line"": 48, ""name"": ""store.add_shared_data"", ""args"": [""ww"",  - Expecting value: line 1 column 87 (char 86)"
test_dump_export.py,"{""type"": ""function_call"", ""line"": 120, ""name"": ""store.add_shared_data"", ""args"": [""foo.png"",  - Expecting value: line 1 column 93 (char 92)"
test_account.py,"{""type"": ""variable"", ""line"": 117, ""name"": ""xml"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_properties.py,"{""type"": ""function_call"", ""line"": 58, ""name"": ""self.assertEqual"", ""args"": [""UID"",  - Expecting value: line 1 column 83 (char 82)"
test_transport.py,"{""type"": ""function_call"", ""line"": 96, ""name"": ""self.assertEqual"", ""args"": [""PrettyXmlHandler.prettify_xml"",  - Expecting value: line 1 column 109 (char 108)"
test_attachments.py,"{""type"": ""function_call"", ""line"": 161, ""name"": ""self.assertEqual"", ""args"": [""fresh_item.attachments.content"",  - Expecting value: line 1 column 111 (char 110)"
test_util.py,"{""type"": ""function_call"", ""line"": 106, ""name"": ""to_xml"", ""args"": [ - Expecting value: line 1 column 67 (char 66)"
test_services.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""xml"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
test_field.py,"{""type"": ""variable"", ""line"": 135, ""name"": ""payload"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_autodiscover.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""self.dummy_ews_response"", ""value"":  - Expecting value: line 1 column 78 (char 77)"
test_protocol.py,"{""type"": ""variable"", ""line"": 152, ""name"": ""xml"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
attachments.py,"{""type"": ""variable"", ""line"": 257, ""name"": ""self._overflow"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
util.py,"{""type"": ""function_def"", ""line"": 512, ""name"": ""prettify_xml"", ""args"": [""cls"", ""xml_bytes""], ""defaults"": [], ""return"": ""lxml.etree.tostring.replace.replace"", ""returnArgs"": [ - Expecting value: line 1 column 173 (char 172)"
t2w.py,"{""type"": ""function_call"", ""line"": 264, ""name"": ""self._finished.callback"", ""args"": [ - Expecting value: line 1 column 84 (char 83)"
socks.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""self._buf"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
utils.py,"{""type"": ""variable"", ""line"": 17, ""name"": ""file_data"", ""value"": null, ""valueSrc"": ""SimpleUploadedFile"", ""isInput"": false, ""args"": [""file_name"",  - Expecting value: line 1 column 144 (char 143)"
test_cli.py,"{""type"": ""assert"", ""line"": 212, ""left"": ""check_output"", ""comparators"": [ - Expecting value: line 1 column 73 (char 72)"
user.py,"{""type"": ""comparison"", ""line"": 108, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
scep.py,"{""type"": ""variable"", ""line"": 86, ""name"": ""encrypted_container"", ""value"":  - Expecting value: line 1 column 74 (char 73)"
CryptMessagePlugin.py,"{""type"": ""tuple"", ""line"": 65, ""name"": null, ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""names"": [""encrypted"", ""iv""], ""values"": [ - Expecting value: line 1 column 149 (char 148)"
TestCrypt.py,"{""type"": ""assert"", ""line"": 24, ""left"": ""CryptMessage.eciesDecrypt"", ""comparators"": [ - Expecting value: line 1 column 85 (char 84)"
BigfilePiecefield.py,"{""type"": ""comparison"", ""line"": 12, ""pairs"": [[""data[0]"",  - Expecting value: line 1 column 58 (char 57)"
BigfilePlugin.py,"{""type"": ""variable"", ""line"": 83, ""name"": ""buffer"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
TestBigfile.py,"{""type"": ""assert"", ""line"": 45, ""left"": ""binascii.hexlify"", ""comparators"": [ - Expecting value: line 1 column 76 (char 75)"
UiWebsocketPlugin.py,"{""type"": ""variable"", ""line"": 74, ""name"": ""row[pieces_downloaded]"", ""value"": null, ""valueSrc"": ""piecefield.count"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 142 (char 141)"
BenchmarkPack.py,"{""type"": ""variable"", ""line"": 137, ""name"": ""binary"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
Connection.py,"{""type"": ""comparison"", ""line"": 193, ""pairs"": [[""first_byte"",  - Expecting value: line 1 column 62 (char 61)"
FileRequest.py,"{""type"": ""function_call"", ""line"": 429, ""name"": ""self.response"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
subtl.py,"{""type"": ""variable"", ""line"": 106, ""name"": ""payload"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
_ecc.py,"{""type"": ""variable"", ""line"": 394, ""name"": ""tag"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
cssvendor.py,"{""type"": ""variable"", ""line"": 5, ""name"": ""content"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 116 (char 115)"
libsecp256k1message.py,"{""type"": ""variable"", ""line"": 149, ""name"": ""privatekey"", ""value"": ""PrivateKey"", ""valueSrc"": ""decode_secret_key"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 140 (char 139)"
__init__.py,"{""type"": ""comparison"", ""line"": 157, ""pairs"": [[""block"",  - Expecting value: line 1 column 57 (char 56)"
DebugMedia.py,"{""type"": ""variable"", ""line"": 74, ""name"": ""old_parts[match.decode]"", ""value"": null, ""valueSrc"": ""match.strip"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 138 (char 137)"
TestFileRequest.py,"{""type"": ""assert"", ""line"": 23, ""left"":  - Expecting value: line 1 column 40 (char 39)"
TestMsgpack.py,"{""type"": ""assert"", ""line"": 18, ""left"": ""Msgpack.pack"", ""comparators"": [ - Expecting value: line 1 column 72 (char 71)"
TestCryptBitcoin.py,"{""type"": ""variable"", ""line"": 31, ""name"": ""sign_uncompressed"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
TestTor.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""sign"", ""value"": null, ""valueSrc"": ""CryptRsa.sign"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 121 (char 120)"
TestCryptHash.py,"{""type"": ""variable"", ""line"": 6, ""name"": ""sha512t_sum_bin"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
TestDiff.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""old_f"", ""value"": null, ""valueSrc"": ""io.BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
TestPeer.py,"{""type"": ""assert"", ""line"": 46, ""left"":  - Expecting value: line 1 column 40 (char 39)"
TestSite.py,"{""type"": ""function_call"", ""line"": 40, ""name"": ""new_site.storage.write"", ""args"": [""index.html"",  - Expecting value: line 1 column 96 (char 95)"
TestSiteDownload.py,"{""type"": ""variable"", ""line"": 365, ""name"": ""data_new"", ""value"": null, ""valueSrc"": ""data_original.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 134 (char 133)"
UiRequest.py,"{""type"": ""variable"", ""line"": 712, ""name"": ""block"", ""value"": null, ""valueSrc"": ""block.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
UiServer.py,"{""type"": ""function_call"", ""line"": 192, ""name"": ""sock.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
Peer.py,"{""type"": ""variable"", ""line"": 373, ""name"": ""body"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
Electrum.py,"{""type"": ""variable"", ""line"": 13, ""name"": ""result"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
keys.py,"{""type"": ""function_def"", ""line"": 254, ""name"": ""sign_deterministic"", ""args"": [""self"", ""data"", ""hashfunc"", ""sigencode"", ""extra_entropy""], ""defaults"": [null, ""sigencode_string"",  - Expecting value: line 1 column 176 (char 175)"
rfc6979.py,"{""type"": ""function_def"", ""line"": 45, ""name"": ""generate_k"", ""args"": [""order"", ""secexp"", ""hash_func"", ""data"", ""retry_gen"", ""extra_entropy""], ""defaults"": [0,  - Expecting value: line 1 column 156 (char 155)"
exchange.py,"{""type"": ""variable"", ""line"": 1933, ""name"": ""domain_struct_header"", ""value"":  - Expecting value: line 1 column 77 (char 76)"
file_helpers.py,"{""type"": ""variable"", ""line"": 83, ""name"": ""buffer_gen"", ""value"": null, ""valueSrc"": ""iter"", ""isInput"": false, ""args"": [""partial"",  - Expecting value: line 1 column 129 (char 128)"
CommonOptimizations.py,"{""type"": ""dict"", ""line"": 51, ""name"": ""_non_iterable_tests"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""Float value"", ""Type value"", ""Int value"", ""Complex value""], ""values"": [1.0, ""float"", 1,  - Expecting value: line 1 column 221 (char 220)"
TrickAssignments32.py,"{""type"": ""function_def"", ""line"": 556, ""name"": ""__complex__"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
Referencing.py,"{""type"": ""variable"", ""line"": 589, ""name"": ""a"", ""value"": null, ""valueSrc"": ""array.array"", ""isInput"": false, ""args"": [""b"",  - Expecting value: line 1 column 122 (char 121)"
BuiltinsTest.py,"{""type"": ""list"", ""line"": 438, ""name"": ""values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 123 (char 122)"
Referencing36.py,"{""type"": ""variable"", ""line"": 169, ""name"": ""rawdata"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
Boto3Using.py,"{""type"": ""variable"", ""line"": 72, ""name"": ""value"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
compile_extension_modules.py,"{""type"": ""comparison"", ""line"": 146, ""pairs"": [[""output"",  - Expecting value: line 1 column 58 (char 57)"
Standalone.py,"{""type"": ""variable"", ""line"": 273, ""name"": ""parts"", ""value"": null, ""valueSrc"": ""line.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
CStrings.py,"{""type"": ""comparison"", ""line"": 54, ""pairs"": [[""c"",  - Expecting value: line 1 column 52 (char 51)"
SharedLibraries.py,"{""type"": ""assert"", ""line"": 88, ""left"":  - Expecting value: line 1 column 40 (char 39)"
__main__.py,"{""type"": ""function_call"", ""line"": 158, ""name"": ""output.write"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
Common.py,"{""type"": ""comparison"", ""line"": 552, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
OutputComparison.py,"{""type"": ""variable"", ""line"": 88, ""name"": ""match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
__main__.py,"{""type"": ""comparison"", ""line"": 80, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
MSI.py,"{""type"": ""comparison"", ""line"": 84, ""pairs"": [[""branch_name"",  - Expecting value: line 1 column 62 (char 61)"
__main__.py,"{""type"": ""variable"", ""line"": 49, ""name"": ""contents"", ""value"": null, ""valueSrc"": ""contents.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
Autoformat.py,"{""type"": ""variable"", ""line"": 61, ""name"": ""updated_code"", ""value"": null, ""valueSrc"": ""source_code.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 135 (char 134)"
GlobalConstants.py,"{""type"": ""list"", ""line"": 38, ""name"": ""result"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [0, 1, 0.0, 1.0, """",  - Expecting value: line 1 column 142 (char 141)"
BuiltinTypeShapes.py,"{""type"": ""variable"", ""line"": 912, ""name"": ""typical_value"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
Action.py,"{""type"": ""function_call"", ""line"": 252, ""name"": ""contents.extend"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
pefile.py,"{""type"": ""variable"", ""line"": 2128, ""name"": ""rich_index"", ""value"": null, ""valueSrc"": ""self.__data__.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 134 (char 133)"
__init__.py,"{""type"": ""dict"", ""line"": 12, ""name"": ""ords"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 118 (char 117)"
ws2_32.py,"{""type"": ""dict"", ""line"": 2, ""name"": ""ord_names"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 151, 500], ""values"": [ - Expecting value: line 1 column 611 (char 610)"
oleaut32.py,"{""type"": ""dict"", ""line"": 1, ""name"": ""ord_names"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 401, 402, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443], ""values"": [ - Expecting value: line 1 column 2018 (char 2017)"
SourceReading.py,"{""type"": ""variable"", ""line"": 56, ""name"": ""line1_match"", ""value"": null, ""valueSrc"": ""re.search"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
utils.py,"{""type"": ""variable"", ""line"": 55, ""name"": ""file_data"", ""value"": null, ""valueSrc"": ""SimpleUploadedFile"", ""isInput"": false, ""args"": [""file_name"",  - Expecting value: line 1 column 144 (char 143)"
resources_rc.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""qt_resource_data"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_stateful_browser.py,"{""type"": ""assert"", ""line"": 509, ""left"": ""response.content"", ""comparators"": [ - Expecting value: line 1 column 77 (char 76)"
test_browser.py,"{""type"": ""variable"", ""line"": 116, ""name"": ""expected_content"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
test_fields.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""read_mock.read.return_value"", ""value"":  - Expecting value: line 1 column 82 (char 81)"
test_client.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""read_mock.read.return_value"", ""value"":  - Expecting value: line 1 column 82 (char 81)"
httplib2test.py,"{""type"": ""function_def"", ""line"": 196, ""name"": ""getresponse"", ""args"": [""self""], ""defaults"": [], ""return"": ""_MyResponse"", ""returnArgs"": [ - Expecting value: line 1 column 136 (char 135)"
__init__.py,"{""type"": ""variable"", ""line"": 1614, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
__init__.py,"{""type"": ""variable"", ""line"": 61, ""name"": ""self._buf"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_https.py,"{""type"": ""assert"", ""line"": 30, ""left"": ""content"", ""comparators"": [ - Expecting value: line 1 column 67 (char 66)"
test_encoding.py,"{""type"": ""assert"", ""line"": 31, ""left"": ""content"", ""comparators"": [ - Expecting value: line 1 column 67 (char 66)"
test_proxy.py,"{""type"": ""assert"", ""line"": 156, ""left"": ""data"", ""comparators"": [ - Expecting value: line 1 column 65 (char 64)"
test_auth.py,"{""type"": ""variable"", ""line"": 285, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_http.py,"{""type"": ""assert"", ""line"": 27, ""left"": ""content"", ""comparators"": [ - Expecting value: line 1 column 67 (char 66)"
test_attributes.py,"{""type"": ""variable"", ""line"": 178, ""name"": ""file_field"", ""value"": null, ""valueSrc"": ""SimpleUploadedFile"", ""isInput"": false, ""args"": [""test_file.txt"",  - Expecting value: line 1 column 150 (char 149)"
test_product.py,"{""type"": ""variable"", ""line"": 206, ""name"": ""file1"", ""value"": null, ""valueSrc"": ""Upload"", ""isInput"": false, ""args"": [""file1.txt"",  - Expecting value: line 1 column 129 (char 128)"
test_range.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""form[file_upload]"", ""value"": null, ""valueSrc"": ""Upload"", ""isInput"": false, ""args"": [""new_skus.txt"",  - Expecting value: line 1 column 143 (char 142)"
test_emails.py,"{""type"": ""list"", ""line"": 48, ""name"": ""attachments"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""fake_file.html"",  - Expecting value: line 1 column 145 (char 144)"
browser.py,"{""type"": ""function_call"", ""line"": 13, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 67 (char 66)"
encoding.py,"{""type"": ""variable"", ""line"": 6, ""name"": ""RE_CHARSET"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
_codec3.py,"{""type"": ""comparison"", ""line"": 108, ""pairs"": [[""input"",  - Expecting value: line 1 column 57 (char 56)"
dammit.py,"{""type"": ""comparison"", ""line"": 288, ""pairs"": [[""data"",  - Expecting value: line 1 column 56 (char 55)"
element.py,"{""type"": ""comparison"", ""line"": 288, ""pairs"": [[""data"",  - Expecting value: line 1 column 56 (char 55)"
diagnose.py,"{""type"": ""comparison"", ""line"": 288, ""pairs"": [[""data"",  - Expecting value: line 1 column 56 (char 55)"
testing.py,"{""type"": ""variable"", ""line"": 130, ""name"": ""markup"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_soup.py,"{""type"": ""variable"", ""line"": 130, ""name"": ""markup"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_tree.py,"{""type"": ""function_call"", ""line"": 718, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
universaldetector.py,"{""type"": ""variable"", ""line"": 68, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
test_tz.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""TZFILE_EST5EDT"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
__init__.py,"{""type"": ""variable"", ""line"": 269, ""name"": ""fmt"", ""value"": null, ""valueSrc"": ""fmt.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
constants.py,"{""type"": ""variable"", ""line"": 269, ""name"": ""fmt"", ""value"": null, ""valueSrc"": ""fmt.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
utils.py,"{""type"": ""function_def"", ""line"": 271, ""name"": ""align_block"", ""args"": [""raw"", ""multiple"", ""pad""], ""defaults"": [4,  - Expecting value: line 1 column 114 (char 113)"
huffcdic.py,"{""type"": ""comparison"", ""line"": 25, ""pairs"": [[""huff"",  - Expecting value: line 1 column 55 (char 54)"
markup.py,"{""type"": ""function_obj"", ""line"": 26, ""objName"": ""posfid_pattern"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 102 (char 101)"
headers.py,"{""type"": ""comparison"", ""line"": 58, ""pairs"": [[""content"",  - Expecting value: line 1 column 58 (char 57)"
index.py,"{""type"": ""function_call"", ""line"": 44, ""name"": ""check_signature"", ""args"": [""data"",  - Expecting value: line 1 column 83 (char 82)"
mobi8.py,"{""type"": ""variable"", ""line"": 44, ""name"": ""pgt"", ""value"": null, ""valueSrc"": ""ml.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 114 (char 113)"
serializer.py,"{""type"": ""function_call"", ""line"": 116, ""name"": ""buf.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
resources.py,"{""type"": ""function_call"", ""line"": 116, ""name"": ""buf.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
indexer.py,"{""type"": ""variable"", ""line"": 56, ""name"": ""header"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
skeleton.py,"{""type"": ""function_def"", ""line"": 41, ""name"": ""close_self_closing_tags"", ""args"": [""raw""], ""defaults"": [], ""return"": ""_self_closing_pat.sub"", ""returnArgs"": [ - Expecting value: line 1 column 156 (char 155)"
header.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""HEADER_NAME"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
index.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""HEADER_NAME"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
exth.py,"{""type"": ""variable"", ""line"": 85, ""name"": ""rights"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
mobi.py,"{""type"": ""variable"", ""line"": 85, ""name"": ""rights"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
localunzip.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""HEADER_BYTE_SIG"", ""value"": null, ""valueSrc"": ""pack"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
client.py,"{""type"": ""function_def"", ""line"": 138, ""name"": ""fetch"", ""args"": [""self"", ""method"", ""path"", ""query_args"", ""headers"", ""body"", ""recursed""], ""defaults"": [""/"", null, null,  - Expecting value: line 1 column 167 (char 166)"
client_tests.py,"{""type"": ""variable"", ""line"": 144, ""name"": ""content"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
config_tests.py,"{""type"": ""function_call"", ""line"": 37, ""name"": ""handle.write"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
test_wrappers.py,"{""type"": ""variable"", ""line"": 8, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
test_utils.py,"{""type"": ""assert"", ""line"": 6, ""left"": ""calc_md5"", ""comparators"": [ - Expecting value: line 1 column 67 (char 66)"
utils.py,"{""type"": ""function_def"", ""line"": 127, ""name"": ""calc_md5"", ""args"": [""string""], ""defaults"": [], ""return"": ""base64.b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 146 (char 145)"
Numbers.py,"{""type"": ""variable"", ""line"": 15, ""name"": ""c"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
string.py,"{""type"": ""variable"", ""line"": 15, ""name"": ""c"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
test_types.py,"{""type"": ""variable"", ""line"": 112, ""name"": ""Popen.return_value.stdout.read.return_value"", ""value"":  - Expecting value: line 1 column 99 (char 98)"
test_rerun.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""popen_mock.return_value.stdout.read.return_value"", ""value"":  - Expecting value: line 1 column 103 (char 102)"
test_npm.py,"{""type"": ""variable"", ""line"": 6, ""name"": ""run_script_stdout"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_gulp_not_task.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""mock.return_value.stdout"", ""value"": null, ""valueSrc"": ""BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 135 (char 134)"
test_ifconfig_device_not_found.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""stdout"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_apt_invalid_operation.py,"{""type"": ""variable"", ""line"": 8, ""name"": ""apt_help"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
test_npm_missing_script.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""run_script_stdout"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
test_docker_not_command.py,"{""type"": ""variable"", ""line"": 49, ""name"": ""help"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_gem_unknown_command.py,"{""type"": ""variable"", ""line"": 11, ""name"": ""gem_help_commands_stdout"", ""value"":  - Expecting value: line 1 column 79 (char 78)"
test_grunt_task_not_found.py,"{""type"": ""variable"", ""line"": 20, ""name"": ""grunt_help_stdout"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
test_port_already_in_use.py,"{""type"": ""variable"", ""line"": 64, ""name"": ""lsof_stdout"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_dnf_no_such_command.py,"{""type"": ""variable"", ""line"": 7, ""name"": ""help_text"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_yarn_command_not_found.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""yarn_help_stdout"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_gradle_not_task.py,"{""type"": ""variable"", ""line"": 6, ""name"": ""gradle_tasks"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_npm_run_script.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""run_script_stdout"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
test_react_native_command_unrecognized.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""stdout"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_zsh.py,"{""type"": ""list"", ""line"": 78, ""name"": ""Popen.return_value.stdout.read.side_effect"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 158 (char 157)"
test_bash.py,"{""type"": ""list"", ""line"": 83, ""name"": ""Popen.return_value.stdout.read.side_effect"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 158 (char 157)"
test_fish.py,"{""type"": ""list"", ""line"": 17, ""name"": ""mock.return_value.stdout.read.side_effect"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 157 (char 156)"
test_tcsh.py,"{""type"": ""variable"", ""line"": 16, ""name"": ""mock.return_value.stdout.read.return_value"", ""value"":  - Expecting value: line 1 column 97 (char 96)"
msgfmt.py,"{""type"": ""variable"", ""line"": 126, ""name"": ""ids"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
wheel.py,"{""type"": ""function_call"", ""line"": 583, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
multipartparser.py,"{""type"": ""variable"", ""line"": 330, ""name"": ""self._leftover"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
request.py,"{""type"": ""function_def"", ""line"": 366, ""name"": ""__iter__"", ""args"": [""self""], ""defaults"": [], ""return"": ""iter"", ""returnArgs"": [""self.readline"",  - Expecting value: line 1 column 143 (char 142)"
response.py,"{""type"": ""function_def"", ""line"": 289, ""name"": ""__init__"", ""args"": [""self"", ""content"", ""args""], ""defaults"": [ - Expecting value: line 1 column 109 (char 108)"
__init__.py,"{""type"": ""list"", ""line"": 2214, ""name"": ""empty_values"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [null,  - Expecting value: line 1 column 136 (char 135)"
encoding.py,"{""type"": ""variable"", ""line"": 185, ""name"": ""bits"", ""value"": null, ""valueSrc"": ""uri.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
client.py,"{""type"": ""variable"", ""line"": 103, ""name"": ""response.content"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
signing.py,"{""type"": ""function_def"", ""line"": 62, ""name"": ""b64_encode"", ""args"": [""s""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 150 (char 149)"
wsgi.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""_slashes_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
filebased.py,"{""type"": ""function_call"", ""line"": 46, ""name"": ""self.stream.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
uploadedfile.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""content"",  - Expecting value: line 1 column 139 (char 138)"
base.py,"{""type"": ""variable"", ""line"": 113, ""name"": ""hash"", ""value"": null, ""valueSrc"": ""encoded_data.split"", ""args"": [ - Expecting value: line 1 column 109 (char 108)"
geometry.py,"{""type"": ""variable"", ""line"": 119, ""name"": ""parts"", ""value"": null, ""valueSrc"": ""ewkt.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
layer.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""self._random_read"", ""value"": null, ""valueSrc"": ""self.test_capability"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 141 (char 140)"
libgdal.py,"{""type"": ""function_def"", ""line"": 76, ""name"": ""gdal_version"", ""args"": [], ""defaults"": [], ""return"": ""_version_info"", ""returnArgs"": [ - Expecting value: line 1 column 132 (char 131)"
srs.py,"{""type"": ""variable"", ""line"": 79, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""c_char_p"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
GifImagePlugin.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
JpegImagePlugin.py,"{""type"": ""variable"", ""line"": 382, ""name"": ""s"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
GimpPaletteFile.py,"{""type"": ""comparison"", ""line"": 33, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 62 (char 61)"
TiffImagePlugin.py,"{""type"": ""variable"", ""line"": 61, ""name"": ""II"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
ImImagePlugin.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""split"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
BlpImagePlugin.py,"{""type"": ""comparison"", ""line"": 246, ""pairs"": [[""self.magic"",  - Expecting value: line 1 column 62 (char 61)"
GbrImagePlugin.py,"{""type"": ""comparison"", ""line"": 65, ""pairs"": [[""magic_number"",  - Expecting value: line 1 column 63 (char 62)"
XpmImagePlugin.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""xpm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WebPImagePlugin.py,"{""type"": ""dict"", ""line"": 17, ""name"": ""_VP8_MODES_BY_IDENTIFIER"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 138 (char 137)"
Image.py,"{""type"": ""function_def"", ""line"": 753, ""name"": ""tobitmap"", ""args"": [""self"", ""name""], ""defaults"": [""image""], ""return"": ""None.join"", ""returnArgs"": [""None.encode"", ""None.encode"", ""None.encode"", ""data"",  - Expecting value: line 1 column 199 (char 198)"
MspImagePlugin.py,"{""type"": ""comparison"", ""line"": 54, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
BmpImagePlugin.py,"{""type"": ""comparison"", ""line"": 266, ""pairs"": [[""head_data"",  - Expecting value: line 1 column 61 (char 60)"
IcoImagePlugin.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
GimpGradientFile.py,"{""type"": ""comparison"", ""line"": 108, ""pairs"": [[""fp.readline"",  - Expecting value: line 1 column 63 (char 62)"
FontFile.py,"{""type"": ""function_call"", ""line"": 106, ""name"": ""fp.write"", ""args"": [ - Expecting value: line 1 column 69 (char 68)"
PpmImagePlugin.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""b_whitespace"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
ImtImagePlugin.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""field"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
PixarImagePlugin.py,"{""type"": ""comparison"", ""line"": 46, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
ImageFont.py,"{""type"": ""comparison"", ""line"": 99, ""pairs"": [[""file.readline"",  - Expecting value: line 1 column 64 (char 63)"
ContainerIO.py,"{""type"": ""variable"", ""line"": 95, ""name"": ""s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 121 (char 120)"
XbmImagePlugin.py,"{""type"": ""variable"", ""line"": 27, ""name"": ""xbm_head"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
WalImageFile.py,"{""type"": ""variable"", ""line"": 73, ""name"": ""quake2palette"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
WmfImagePlugin.py,"{""type"": ""comparison"", ""line"": 86, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
FtexImagePlugin.py,"{""type"": ""variable"", ""line"": 59, ""name"": ""MAGIC"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
BdfFontFile.py,"{""type"": ""comparison"", ""line"": 45, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
DdsImagePlugin.py,"{""type"": ""comparison"", ""line"": 139, ""pairs"": [[""fourcc"",  - Expecting value: line 1 column 58 (char 57)"
XVThumbImagePlugin.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
IcnsImagePlugin.py,"{""type"": ""comparison"", ""line"": 45, ""pairs"": [[""sig"",  - Expecting value: line 1 column 54 (char 53)"
EpsImagePlugin.py,"{""type"": ""variable"", ""line"": 173, ""name"": ""s"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""self.char"",  - Expecting value: line 1 column 135 (char 134)"
Jpeg2KImagePlugin.py,"{""type"": ""comparison"", ""line"": 74, ""pairs"": [[""tbox"",  - Expecting value: line 1 column 55 (char 54)"
PdfParser.py,"{""type"": ""function_call"", ""line"": 164, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
ImageFile.py,"{""type"": ""variable"", ""line"": 217, ""name"": ""prefix"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
CurImagePlugin.py,"{""type"": ""variable"", ""line"": 48, ""name"": ""m"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
PcdImagePlugin.py,"{""type"": ""comparison"", ""line"": 38, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
PngImagePlugin.py,"{""type"": ""variable"", ""line"": 49, ""name"": ""_MAGIC"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
ImageDraw.py,"{""type"": ""variable"", ""line"": 254, ""name"": ""split_character"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""\n"",  - Expecting value: line 1 column 142 (char 141)"
PaletteFile.py,"{""type"": ""comparison"", ""line"": 36, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
utils.py,"{""type"": ""variable"", ""line"": 198, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 471, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
models.py,"{""type"": ""variable"", ""line"": 829, ""name"": ""self._content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""None.join"",  - Expecting value: line 1 column 147 (char 146)"
__init__.py,"{""type"": ""variable"", ""line"": 404, ""name"": ""space"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
dammit.py,"{""type"": ""comparison"", ""line"": 337, ""pairs"": [[""data"",  - Expecting value: line 1 column 56 (char 55)"
testing.py,"{""type"": ""function_call"", ""line"": 311, ""name"": ""self.assertEqual"", ""args"": [""soup.encode"",  - Expecting value: line 1 column 92 (char 91)"
test_soup.py,"{""type"": ""function_call"", ""line"": 263, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
test_tree.py,"{""type"": ""function_call"", ""line"": 790, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
test_html5lib.py,"{""type"": ""function_call"", ""line"": 72, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
connection.py,"{""type"": ""function_call"", ""line"": 229, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 92, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""self._data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
tests.py,"{""type"": ""variable"", ""line"": 173, ""name"": ""value"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
cryptography.py,"{""type"": ""variable"", ""line"": 153, ""name"": ""cn"", ""value"": null, ""valueSrc"": ""next"", ""isInput"": false, ""args"": [""iter"",  - Expecting value: line 1 column 119 (char 118)"
pyopenssl.py,"{""type"": ""comparison"", ""line"": 97, ""pairs"": [[""ext.get_short_name"",  - Expecting value: line 1 column 69 (char 68)"
_common.py,"{""type"": ""variable"", ""line"": 144, ""name"": ""_RE_LEGAL_CHARS"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 130 (char 129)"
test_update.py,"{""type"": ""function_call"", ""line"": 31, ""name"": ""packagedir.child.setContent"", ""args"": [ - Expecting value: line 1 column 87 (char 86)"
test_rrqueue.py,"{""type"": ""function_call"", ""line"": 24, ""name"": ""self.q.push"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_pqueue.py,"{""type"": ""function_call"", ""line"": 24, ""name"": ""self.q.push"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_queue.py,"{""type"": ""function_call"", ""line"": 24, ""name"": ""q.push"", ""args"": [ - Expecting value: line 1 column 66 (char 65)"
__init__.py,"{""type"": ""variable"", ""line"": 118, ""name"": ""BSONNUM"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
connection.py,"{""type"": ""variable"", ""line"": 83, ""name"": ""SYM_STAR"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
client.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""SYM_EMPTY"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
SSL.py,"{""type"": ""variable"", ""line"": 235, ""name"": ""_CRYPTOGRAPHY_MANYLINUX1_CA_DIR"", ""value"":  - Expecting value: line 1 column 87 (char 86)"
crypto.py,"{""type"": ""list"", ""line"": 1961, ""name"": ""_crl_reasons"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 130 (char 129)"
wheel.py,"{""type"": ""function_call"", ""line"": 595, ""name"": ""installer_file.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
encoding.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""ENCODING_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
_inputstream.py,"{""type"": ""function_def"", ""line"": 719, ""name"": ""handleComment"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.data.jumpTo"", ""returnArgs"": [ - Expecting value: line 1 column 143 (char 142)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
__init__.py,"{""type"": ""variable"", ""line"": 230, ""name"": ""output"", ""value"": null, ""valueSrc"": ""decode"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 117 (char 116)"
tests.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""assert_raises"", ""args"": [""LookupError"", ""decode"",  - Expecting value: line 1 column 98 (char 97)"
resources.py,"{""type"": ""variable"", ""line"": 141, ""name"": ""sep"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
scripts.py,"{""type"": ""variable"", ""line"": 40, ""name"": ""FIRST_LINE_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
wheel.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""SHEBANG_RE"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
index.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""boundary"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
tarfile.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""NUL"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
utils.py,"{""type"": ""variable"", ""line"": 197, ""name"": ""splitstr"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
adapters.py,"{""type"": ""function_call"", ""line"": 471, ""name"": ""low_conn.send"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
models.py,"{""type"": ""variable"", ""line"": 828, ""name"": ""self._content"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""None.join"",  - Expecting value: line 1 column 147 (char 146)"
fallback.py,"{""type"": ""function_def"", ""line"": 32, ""name"": ""__init__"", ""args"": [""self"", ""s""], ""defaults"": [ - Expecting value: line 1 column 94 (char 93)"
connection.py,"{""type"": ""function_call"", ""line"": 215, ""name"": ""self.send"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
filepost.py,"{""type"": ""function_call"", ""line"": 92, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
response.py,"{""type"": ""variable"", ""line"": 26, ""name"": ""self._data"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
low_level.py,"{""type"": ""function_obj"", ""line"": 22, ""objName"": ""_PEM_CERTS_RE"", ""funcName"": ""re.compile"", ""args"": [ - Expecting value: line 1 column 101 (char 100)"
universaldetector.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""HIGH_BYTE_DETECTOR"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
charsetprober.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""buf"", ""value"": null, ""valueSrc"": ""re.sub"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 113 (char 112)"
filewrapper.py,"{""type"": ""comparison"", ""line"": 71, ""pairs"": [[""amt"", 2], [""data"",  - Expecting value: line 1 column 67 (char 66)"
serialize.py,"{""type"": ""function_def"", ""line"": 22, ""name"": ""dumps"", ""args"": [""self"", ""request"", ""response"", ""body""], ""defaults"": [null], ""return"": ""None.join"", ""returnArgs"": [ - Expecting value: line 1 column 162 (char 161)"
core.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""_alabel_prefix"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
form.py,"{""type"": ""function_call"", ""line"": 64, ""name"": ""body.write"", ""args"": [ - Expecting value: line 1 column 70 (char 69)"
url.py,"{""type"": ""variable"", ""line"": 29, ""name"": ""RFC3986_GEN_DELIMS"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
exporters.py,"{""type"": ""function_call"", ""line"": 113, ""name"": ""self.file.write"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
responsetypes.py,"{""type"": ""comparison"", ""line"": 74, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
__init__.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""self._body"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
form.py,"{""type"": ""function_call"", ""line"": 34, ""name"": ""self.headers.setdefault"", ""args"": [ - Expecting value: line 1 column 83 (char 82)"
__init__.py,"{""type"": ""function_def"", ""line"": 19, ""name"": ""__init__"", ""args"": [""self"", ""url"", ""status"", ""headers"", ""body"", ""flags"", ""request""], ""defaults"": [200, null,  - Expecting value: line 1 column 156 (char 155)"
text.py,"{""type"": ""variable"", ""line"": 43, ""name"": ""self._body"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
benchserver.py,"{""type"": ""function_def"", ""line"": 15, ""name"": ""render"", ""args"": [""self"", ""request""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 111 (char 110)"
testproc.py,"{""type"": ""variable"", ""line"": 38, ""name"": ""self.out"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
gz.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""chunk"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
testsite.py,"{""type"": ""function_def"", ""line"": 24, ""name"": ""render"", ""args"": [""self"", ""request""], ""defaults"": [], ""return"": ""content.replace"", ""returnArgs"": [ - Expecting value: line 1 column 145 (char 144)"
response.py,"{""type"": ""comparison"", ""line"": 64, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
webclient.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
http11.py,"{""type"": ""variable"", ""line"": 104, ""name"": ""_responseMatcher"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 131 (char 130)"
http10.py,"{""type"": ""comparison"", ""line"": 23, ""pairs"": [[""factory.scheme"",  - Expecting value: line 1 column 65 (char 64)"
httpcompression.py,"{""type"": ""list"", ""line"": 9, ""name"": ""ACCEPTED_ENCODINGS"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 133 (char 132)"
useragent.py,"{""type"": ""function_call"", ""line"": 23, ""name"": ""request.headers.setdefault"", ""args"": [ - Expecting value: line 1 column 86 (char 85)"
fetch.py,"{""type"": ""function_call"", ""line"": 41, ""name"": ""self._print_headers"", ""args"": [""response.request.headers"",  - Expecting value: line 1 column 107 (char 106)"
httpcache.py,"{""type"": ""variable"", ""line"": 54, ""name"": ""cch"", ""value"": null, ""valueSrc"": ""r.headers.get"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
hosts.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""idx"", ""value"": null, ""valueSrc"": ""line.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 116 (char 115)"
authority.py,"{""type"": ""comparison"", ""line"": 374, ""pairs"": [[""line[0]"",  - Expecting value: line 1 column 59 (char 58)"
dns.py,"{""type"": ""variable"", ""line"": 242, ""name"": ""labels"", ""value"": null, ""valueSrc"": ""name.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 121 (char 120)"
client.py,"{""type"": ""variable"", ""line"": 185, ""name"": ""self.domain"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_cache.py,"{""type"": ""function_call"", ""line"": 90, ""name"": ""self.assertEqual"", ""args"": [""result.name.name"",  - Expecting value: line 1 column 96 (char 95)"
test_server.py,"{""type"": ""function_call"", ""line"": 645, ""name"": ""m.addQuery"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_rootresolve.py,"{""type"": ""variable"", ""line"": 196, ""name"": ""d"", ""value"": null, ""valueSrc"": ""resolver.lookupAddress"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
test_dns.py,"{""type"": ""function_call"", ""line"": 48, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
test_names.py,"{""type"": ""variable"", ""line"": 670, ""name"": ""_A"", ""value"": null, ""valueSrc"": ""dns.Record_A"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
test_client.py,"{""type"": ""comparison"", ""line"": 50, ""pairs"": [[""name"",  - Expecting value: line 1 column 55 (char 54)"
test_examples.py,"{""type"": ""function_call"", ""line"": 85, ""name"": ""self.assertEqual"", ""args"": [""f.readline.rstrip"",  - Expecting value: line 1 column 97 (char 96)"
test_hosts.py,"{""type"": ""function_call"", ""line"": 36, ""name"": ""hosts.setContent"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
nmea.py,"{""type"": ""comparison"", ""line"": 118, ""pairs"": [[""sentence"",  - Expecting value: line 1 column 60 (char 59)"
test_nmea.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""GPGGA"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
tuntap.py,"{""type"": ""variable"", ""line"": 37, ""name"": ""_TUN_KO_PATH"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
testing.py,"{""type"": ""variable"", ""line"": 163, ""name"": ""_DEVICE_NAME"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
test_tuntap.py,"{""type"": ""variable"", ""line"": 342, ""name"": ""self.fileno"", ""value"": null, ""valueSrc"": ""self.system.open"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 132 (char 131)"
test_ethernet.py,"{""type"": ""function_call"", ""line"": 38, ""name"": ""proto.datagramReceived"", ""args"": [ - Expecting value: line 1 column 82 (char 81)"
test_rawudp.py,"{""type"": ""function_call"", ""line"": 33, ""name"": ""proto.datagramReceived"", ""args"": [ - Expecting value: line 1 column 82 (char 81)"
pb.py,"{""type"": ""function_def"", ""line"": 155, ""name"": ""__call__"", ""args"": [""self"", ""args""], ""defaults"": [], ""return"": ""self.obj.broker._sendMessage"", ""returnArgs"": [ - Expecting value: line 1 column 158 (char 157)"
flavors.py,"{""type"": ""variable"", ""line"": 44, ""name"": ""copy_atom"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
banana.py,"{""type"": ""list"", ""line"": 105, ""name"": ""knownDialects"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 130 (char 129)"
jelly.py,"{""type"": ""variable"", ""line"": 114, ""name"": ""None_atom"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
test_banana.py,"{""type"": ""function_call"", ""line"": 86, ""name"": ""selectDialect"", ""args"": [null,  - Expecting value: line 1 column 79 (char 78)"
test_pb.py,"{""type"": ""function_call"", ""line"": 1038, ""name"": ""self.assertEqual"", ""args"": [""None.join"",  - Expecting value: line 1 column 91 (char 90)"
test_pbfailure.py,"{""type"": ""function_call"", ""line"": 305, ""name"": ""self.assertEqual"", ""args"": [""fail.type"",  - Expecting value: line 1 column 90 (char 89)"
test_jelly.py,"{""type"": ""list"", ""line"": 125, ""name"": ""decimalData"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 128 (char 127)"
_pidfile.py,"{""type"": ""variable"", ""line"": 124, ""name"": ""pidString"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
test_pidfile.py,"{""type"": ""function_call"", ""line"": 85, ""name"": ""self.assertEqual"", ""args"": [""PIDFile._format"",  - Expecting value: line 1 column 95 (char 94)"
test_irc.py,"{""type"": ""function_call"", ""line"": 1695, ""name"": ""self.check"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
test_ircsupport.py,"{""type"": ""function_call"", ""line"": 266, ""name"": ""self.assertEqual"", ""args"": [""self.transport.io.getvalue"",  - Expecting value: line 1 column 107 (char 106)"
test_xmlstream.py,"{""type"": ""function_call"", ""line"": 38, ""name"": ""self.xmlstream.send"", ""args"": [ - Expecting value: line 1 column 79 (char 78)"
test_jabbersaslmechanisms.py,"{""type"": ""function_call"", ""line"": 24, ""name"": ""self.assertEqual"", ""args"": [""m.getInitialResponse"",  - Expecting value: line 1 column 100 (char 99)"
test_tap.py,"{""type"": ""variable"", ""line"": 15, ""name"": ""PASSWD_TEXT"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_domish.py,"{""type"": ""function_call"", ""line"": 191, ""name"": ""self.assertRaises"", ""args"": [""TypeError"", ""element.addContent"",  - Expecting value: line 1 column 113 (char 112)"
test_jabbersasl.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""response"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_jabberxmlstream.py,"{""type"": ""function_call"", ""line"": 55, ""name"": ""self.assertRaises"", ""args"": [""TypeError"", ""xmlstream.hashPassword"",  - Expecting value: line 1 column 116 (char 115)"
test_jabbercomponent.py,"{""type"": ""function_call"", ""line"": 82, ""name"": ""xs.dataReceived"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
test_irc_service.py,"{""type"": ""function_call"", ""line"": 66, ""name"": ""self.ircUser.irc_NICK"", ""args"": ["""",  - Expecting value: line 1 column 85 (char 84)"
test_service.py,"{""type"": ""list"", ""line"": 160, ""name"": ""STATIC_USERS"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""useruser"", ""otheruser"", ""someguy"", ""firstuser"", ""username"", ""userone"", ""usertwo"", ""userthree"", ""userfour"",  - Expecting value: line 1 column 237 (char 236)"
irc.py,"{""type"": ""variable"", ""line"": 1208, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
sasl.py,"{""type"": ""function_def"", ""line"": 172, ""name"": ""sendResponse"", ""args"": [""self"", ""data""], ""defaults"": [ - Expecting value: line 1 column 102 (char 101)"
sasl_mechanisms.py,"{""type"": ""comparison"", ""line"": 139, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
inotify.py,"{""type"": ""variable"", ""line"": 186, ""name"": ""self._buffer"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
_pollingfile.py,"{""type"": ""function_call"", ""line"": 277, ""name"": ""win32file.WriteFile"", ""args"": [""writePipe"",  - Expecting value: line 1 column 93 (char 92)"
endpoints.py,"{""type"": ""function_def"", ""line"": 2180, ""name"": ""_parseClientTLS"", ""args"": [""reactor"", ""host"", ""port"", ""timeout"", ""bindAddress"", ""certificate"", ""privateKey"", ""trustRoots"", ""endpoint"", ""kwargs""], ""defaults"": [ - Expecting value: line 1 column 208 (char 207)"
abstract.py,"{""type"": ""variable"", ""line"": 174, ""name"": ""dataBuffer"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
posixbase.py,"{""type"": ""function_call"", ""line"": 91, ""name"": ""util.untilConcludes"", ""args"": [""self.w.send"",  - Expecting value: line 1 column 94 (char 93)"
testing.py,"{""type"": ""variable"", ""line"": 74, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
abstract.py,"{""type"": ""variable"", ""line"": 146, ""name"": ""dataBuffer"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_tls.py,"{""type"": ""variable"", ""line"": 58, ""name"": ""_pem"", ""value"": null, ""valueSrc"": ""FilePath.sibling.child"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 130 (char 129)"
test_udp.py,"{""type"": ""function_call"", ""line"": 226, ""name"": ""port.write"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_win32serialport.py,"{""type"": ""variable"", ""line"": 85, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_stdio.py,"{""type"": ""variable"", ""line"": 39, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_filedescriptor.py,"{""type"": ""function_call"", ""line"": 75, ""name"": ""self.assertRaises"", ""args"": [""TypeError"", ""fileDescriptor.writeSequence"",  - Expecting value: line 1 column 122 (char 121)"
test_gireactor.py,"{""type"": ""variable"", ""line"": 202, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_tcp.py,"{""type"": ""variable"", ""line"": 213, ""name"": ""skt"", ""value"": null, ""valueSrc"": ""FakeSocket"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
test_inotify.py,"{""type"": ""function_call"", ""line"": 93, ""name"": ""path.setContent"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
test_udp_internals.py,"{""type"": ""variable"", ""line"": 86, ""name"": ""port.socket"", ""value"": null, ""valueSrc"": ""StringUDPSocket"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 130 (char 129)"
test_address.py,"{""type"": ""function_def"", ""line"": 86, ""name"": ""buildAddress"", ""args"": [""self""], ""defaults"": [], ""return"": ""HostnameAddress"", ""returnArgs"": [ - Expecting value: line 1 column 140 (char 139)"
test_resolver.py,"{""type"": ""function_def"", ""line"": 138, ""name"": ""addResultForHost"", ""args"": [""self"", ""host"", ""sockaddr"", ""family"", ""socktype"", ""proto"", ""canonname""], ""defaults"": [""AF_INET"", ""SOCK_STREAM"", ""IPPROTO_TCP"",  - Expecting value: line 1 column 203 (char 202)"
test_unix.py,"{""type"": ""variable"", ""line"": 303, ""name"": ""server"", ""value"": null, ""valueSrc"": ""SendFileDescriptor"", ""isInput"": false, ""args"": [""s.fileno"",  - Expecting value: line 1 column 141 (char 140)"
test_fdset.py,"{""type"": ""function_call"", ""line"": 87, ""name"": ""server.sendall"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
connectionmixins.py,"{""type"": ""function_call"", ""line"": 241, ""name"": ""self.consumer.write"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
test_process.py,"{""type"": ""variable"", ""line"": 115, ""name"": ""transport"", ""value"": null, ""valueSrc"": ""reactor.spawnProcess"", ""isInput"": false, ""args"": [""protocol"", ""pyExe"", ""pyExe"",  - Expecting value: line 1 column 164 (char 163)"
test_testing.py,"{""type"": ""variable"", ""line"": 265, ""name"": ""connector"", ""value"": null, ""valueSrc"": ""memoryReactor.connectUNIX"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 139 (char 138)"
test_endpoints.py,"{""type"": ""function_call"", ""line"": 316, ""name"": ""p.dataReceived"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
test_protocol.py,"{""type"": ""function_call"", ""line"": 455, ""name"": ""consumer.write"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
util.py,"{""type"": ""function_call"", ""line"": 367, ""name"": ""testdir.child.setContent"", ""args"": [ - Expecting value: line 1 column 85 (char 84)"
test_script.py,"{""type"": ""function_call"", ""line"": 805, ""name"": ""package.child.setContent"", ""args"": [ - Expecting value: line 1 column 85 (char 84)"
test_loader.py,"{""type"": ""function_call"", ""line"": 245, ""name"": ""filename.setContent"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
test_warning.py,"{""type"": ""variable"", ""line"": 287, ""name"": ""package"", ""value"": null, ""valueSrc"": ""FilePath.child"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 126 (char 125)"
test_reporter.py,"{""type"": ""function_call"", ""line"": 1314, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 78 (char 77)"
workertrial.py,"{""type"": ""comparison"", ""line"": 94, ""pairs"": [[""r"",  - Expecting value: line 1 column 52 (char 51)"
test_workertrial.py,"{""type"": ""function_call"", ""line"": 95, ""name"": ""self.assertEqual"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
test_worker.py,"{""type"": ""variable"", ""line"": 283, ""name"": ""dataString"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
dirdbm.py,"{""type"": ""function_def"", ""line"": 79, ""name"": ""_encode"", ""args"": [""self"", ""k""], ""defaults"": [], ""return"": ""base64.encodestring.replace.replace"", ""returnArgs"": [ - Expecting value: line 1 column 160 (char 159)"
credentials.py,"{""type"": ""variable"", ""line"": 154, ""name"": ""qop"", ""value"": null, ""valueSrc"": ""self.fields.get"", ""isInput"": false, ""args"": [""qop"",  - Expecting value: line 1 column 130 (char 129)"
_digest.py,"{""type"": ""dict"", ""line"": 20, ""name"": ""algorithms"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 124 (char 123)"
checkers.py,"{""type"": ""function_def"", ""line"": 124, ""name"": ""__init__"", ""args"": [""self"", ""filename"", ""delim"", ""usernameField"", ""passwordField"", ""caseSensitive"", ""hash"", ""cache""], ""defaults"": [ - Expecting value: line 1 column 179 (char 178)"
test_simpleauth.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""creds"", ""value"": null, ""valueSrc"": ""UsernamePassword"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
test_cramauth.py,"{""type"": ""function_call"", ""line"": 80, ""name"": ""self.assertEqual"", ""args"": [""c.username"",  - Expecting value: line 1 column 90 (char 89)"
test_strcred.py,"{""type"": ""variable"", ""line"": 195, ""name"": ""self.adminBytes"", ""value"": null, ""valueSrc"": ""credentials.UsernamePassword"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 148 (char 147)"
test_digestauth.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""self.privateKey"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
test_cred.py,"{""type"": ""function_call"", ""line"": 114, ""name"": ""self.checker.addUser"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
_json.py,"{""type"": ""comparison"", ""line"": 306, ""pairs"": [[""first"",  - Expecting value: line 1 column 57 (char 56)"
test_json.py,"{""type"": ""function_call"", ""line"": 428, ""name"": ""self.assertEqual"", ""args"": [""self.errorEvents[0][record]"",  - Expecting value: line 1 column 108 (char 107)"
test_global.py,"{""type"": ""function_call"", ""line"": 318, ""name"": ""self.sysModule.stdout.write"", ""args"": [ - Expecting value: line 1 column 88 (char 87)"
test_format.py,"{""type"": ""variable"", ""line"": 70, ""name"": ""badResult"", ""value"": ""result"", ""valueSrc"": ""format"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
test_io.py,"{""type"": ""function_call"", ""line"": 179, ""name"": ""LoggingFile.write"", ""args"": [ - Expecting value: line 1 column 78 (char 77)"
test_iutils.py,"{""type"": ""function_def"", ""line"": 44, ""name"": ""test_output"", ""args"": [""self""], ""defaults"": [], ""return"": ""d.addCallback"", ""returnArgs"": [""self.assertEqual"",  - Expecting value: line 1 column 157 (char 156)"
test_socks.py,"{""type"": ""function_call"", ""line"": 122, ""name"": ""self.sock.dataReceived"", ""args"": [ - Expecting value: line 1 column 83 (char 82)"
stdio_test_producer.py,"{""type"": ""variable"", ""line"": 22, ""name"": ""buf"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
test_udp.py,"{""type"": ""function_call"", ""line"": 223, ""name"": ""server.transport.write"", ""args"": [ - Expecting value: line 1 column 83 (char 82)"
test_postfix.py,"{""type"": ""function_call"", ""line"": 110, ""name"": ""server.lineReceived"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
stdio_test_write.py,"{""type"": ""function_call"", ""line"": 22, ""name"": ""self.transport.write"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
test_ftp_options.py,"{""type"": ""tuple"", ""line"": 22, ""name"": ""usernamePassword"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 133 (char 132)"
test_stdio.py,"{""type"": ""variable"", ""line"": 31, ""name"": ""UNIQUE_LAST_WRITE_STRING"", ""value"":  - Expecting value: line 1 column 79 (char 78)"
stdio_test_halfclose.py,"{""type"": ""function_call"", ""line"": 36, ""name"": ""self.transport.write"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
process_fds.py,"{""type"": ""comparison"", ""line"": 20, ""pairs"": [[""abcd"",  - Expecting value: line 1 column 55 (char 54)"
test_memcache.py,"{""type"": ""function_def"", ""line"": 36, ""name"": ""test_get"", ""args"": [""self""], ""defaults"": [], ""return"": ""self._test"", ""returnArgs"": [""self.proto.get"",  - Expecting value: line 1 column 149 (char 148)"
test_ftp.py,"{""type"": ""variable"", ""line"": 65, ""name"": ""self.buffer"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_reflect.py,"{""type"": ""tuple"", ""line"": 436, ""name"": ""xs"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [1,  - Expecting value: line 1 column 123 (char 122)"
test_dirdbm.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""self.dbm[k]"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_logfile.py,"{""type"": ""function_call"", ""line"": 111, ""name"": ""self.assertEqual"", ""args"": [""f.read"",  - Expecting value: line 1 column 87 (char 86)"
test_tpfile.py,"{""type"": ""variable"", ""line"": 14, ""name"": ""buffer"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_twistd.py,"{""type"": ""variable"", ""line"": 1890, ""name"": ""self.mockos.readData"", ""value"":  - Expecting value: line 1 column 77 (char 76)"
test_finger.py,"{""type"": ""function_call"", ""line"": 31, ""name"": ""self.protocol.dataReceived"", ""args"": [ - Expecting value: line 1 column 86 (char 85)"
test_ident.py,"{""type"": ""comparison"", ""line"": 158, ""pairs"": [[""struct.pack"",  - Expecting value: line 1 column 63 (char 62)"
test_main.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""output"", ""value"": null, ""valueSrc"": ""f.getvalue.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
test_iosim.py,"{""type"": ""function_call"", ""line"": 43, ""name"": ""a.write"", ""args"": [ - Expecting value: line 1 column 67 (char 66)"
test_stateful.py,"{""type"": ""list"", ""line"": 79, ""name"": ""strings"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 123 (char 122)"
test_ssl.py,"{""type"": ""list"", ""line"": 48, ""name"": ""pretext"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 123 (char 122)"
test_tcp.py,"{""type"": ""function_call"", ""line"": 852, ""name"": ""self.transport.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
test_policies.py,"{""type"": ""variable"", ""line"": 31, ""name"": ""buffer"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_log.py,"{""type"": ""function_call"", ""line"": 842, ""name"": ""self.assertIn"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
test_protocols.py,"{""type"": ""function_call"", ""line"": 27, ""name"": ""a.dataReceived"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
test_dict.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""paramString"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_modules.py,"{""type"": ""variable"", ""line"": 58, ""name"": ""namespaceBoilerplate"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_abstract.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""self.assertRaises"", ""args"": [""ValueError"", ""isIPAddress"",  - Expecting value: line 1 column 107 (char 106)"
test_plugin.py,"{""type"": ""function_call"", ""line"": 67, ""name"": ""self.package.child.setContent"", ""args"": [ - Expecting value: line 1 column 89 (char 88)"
test_roots.py,"{""type"": ""function_call"", ""line"": 14, ""name"": ""request.write"", ""args"": [ - Expecting value: line 1 column 73 (char 72)"
test_internet.py,"{""type"": ""variable"", ""line"": 1049, ""name"": ""expected_output"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
test_unix.py,"{""type"": ""dict"", ""line"": 158, ""name"": ""env"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 118 (char 117)"
stdio_test_writeseq.py,"{""type"": ""function_call"", ""line"": 22, ""name"": ""self.transport.writeSequence"", ""args"": [ - Expecting value: line 1 column 88 (char 87)"
test_threadable.py,"{""type"": ""variable"", ""line"": 129, ""name"": ""lockPickle"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_compat.py,"{""type"": ""function_call"", ""line"": 542, ""name"": ""self.assertRaises"", ""args"": [""UnicodeError"", ""nativeString"",  - Expecting value: line 1 column 110 (char 109)"
test_loopback.py,"{""type"": ""comparison"", ""line"": 51, ""pairs"": [[""self.lines"",  - Expecting value: line 1 column 61 (char 60)"
test_process.py,"{""type"": ""variable"", ""line"": 114, ""name"": ""bytesToSend"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_fdesc.py,"{""type"": ""variable"", ""line"": 108, ""name"": ""n"", ""value"": null, ""valueSrc"": ""self.write"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 116 (char 115)"
test_persisted.py,"{""type"": ""variable"", ""line"": 346, ""name"": ""pickledStringIWithText"", ""value"":  - Expecting value: line 1 column 78 (char 77)"
process_stdinreader.py,"{""type"": ""function_call"", ""line"": 26, ""name"": ""stdout.write"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
test_sslverify.py,"{""type"": ""variable"", ""line"": 272, ""name"": ""greeting"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_application.py,"{""type"": ""function_call"", ""line"": 303, ""name"": ""self.transport.write"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
test_amp.py,"{""type"": ""function_def"", ""line"": 95, ""name"": ""sendHello"", ""args"": [""self"", ""text""], ""defaults"": [], ""return"": ""self.callRemoteString"", ""returnArgs"": [ - Expecting value: line 1 column 151 (char 150)"
test_paths.py,"{""type"": ""variable"", ""line"": 45, ""name"": ""f1content"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
protocols.py,"{""type"": ""variable"", ""line"": 76, ""name"": ""authStr"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
pop3client.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""OK"", ""value"":  - Expecting value: line 1 column 57 (char 56)"
pop3.py,"{""type"": ""variable"", ""line"": 119, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
imap4.py,"{""type"": ""variable"", ""line"": 447, ""name"": ""passon"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
_cred.py,"{""type"": ""function_def"", ""line"": 26, ""name"": ""getName"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 101 (char 100)"
smtp.py,"{""type"": ""variable"", ""line"": 192, ""name"": ""atom"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
_except.py,"{""type"": ""function_call"", ""line"": 154, ""name"": ""res.append"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_pop3client.py,"{""type"": ""dict"", ""line"": 34, ""name"": ""capCache"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 122 (char 121)"
test_imap.py,"{""type"": ""list"", ""line"": 62, ""name"": ""tests"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""Hello world"",  - Expecting value: line 1 column 136 (char 135)"
test_smtp.py,"{""type"": ""function_call"", ""line"": 103, ""name"": ""deferred.callback"", ""args"": [ - Expecting value: line 1 column 78 (char 77)"
pop3testserver.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""CONNECTION_MADE"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
test_pop3.py,"{""type"": ""function_call"", ""line"": 84, ""name"": ""self.assertEqual"", ""args"": [""pop3.successResponse"",  - Expecting value: line 1 column 100 (char 99)"
procmon.py,"{""type"": ""variable"", ""line"": 74, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_procmon.py,"{""type"": ""function_call"", ""line"": 364, ""name"": ""self.pm.protocols.outReceived"", ""args"": [ - Expecting value: line 1 column 90 (char 89)"
filepath.py,"{""type"": ""function_def"", ""line"": 1492, ""name"": ""setContent"", ""args"": [""self"", ""content"", ""ext""], ""defaults"": [ - Expecting value: line 1 column 111 (char 110)"
_shellcomp.py,"{""type"": ""function_call"", ""line"": 185, ""name"": ""self.file.write"", ""args"": [ - Expecting value: line 1 column 76 (char 75)"
htmlizer.py,"{""type"": ""comparison"", ""line"": 66, ""pairs"": [[""token"",  - Expecting value: line 1 column 56 (char 55)"
zipstream.py,"{""type"": ""variable"", ""line"": 124, ""name"": ""line"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
reflect.py,"{""type"": ""variable"", ""line"": 342, ""name"": ""initPy"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
randbytes.py,"{""type"": ""variable"", ""line"": 120, ""name"": ""_BYTES"", ""value"": null, ""valueSrc"": ""_maketrans"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 121 (char 120)"
urlpath.py,"{""type"": ""function_def"", ""line"": 59, ""name"": ""__init__"", ""args"": [""self"", ""scheme"", ""netloc"", ""path"", ""query"", ""fragment""], ""defaults"": [ - Expecting value: line 1 column 138 (char 137)"
test_shellcomp.py,"{""type"": ""variable"", ""line"": 574, ""name"": ""testOutput1"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_sendmsg.py,"{""type"": ""variable"", ""line"": 142, ""name"": ""self.output"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_util.py,"{""type"": ""function_call"", ""line"": 415, ""name"": ""self.assertEqual"", ""args"": [""d.keys"",  - Expecting value: line 1 column 87 (char 86)"
test_zipstream.py,"{""type"": ""function_call"", ""line"": 56, ""name"": ""self.assertEqual"", ""args"": [""fileEntry.readline"",  - Expecting value: line 1 column 98 (char 97)"
test_runtime.py,"{""type"": ""function_call"", ""line"": 201, ""name"": ""f.write"", ""args"": [ - Expecting value: line 1 column 68 (char 67)"
modules_helpers.py,"{""type"": ""function_call"", ""line"": 54, ""name"": ""pkg.child.setContent"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
test_release.py,"{""type"": ""variable"", ""line"": 67, ""name"": ""gitVersion"", ""value"": null, ""valueSrc"": ""runCommand.split.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 136 (char 135)"
test_deprecate.py,"{""type"": ""variable"", ""line"": 369, ""name"": ""self.package"", ""value"": null, ""valueSrc"": ""FilePath.child"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 131 (char 130)"
test_htmlizer.py,"{""type"": ""variable"", ""line"": 23, ""name"": ""input"", ""value"": null, ""valueSrc"": ""BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 116 (char 115)"
test_urlpath.py,"{""type"": ""function_call"", ""line"": 168, ""name"": ""self.assertEqual"", ""args"": [""str.encode"",  - Expecting value: line 1 column 91 (char 90)"
stdio.py,"{""type"": ""function_call"", ""line"": 103, ""name"": ""os.write"", ""args"": [null,  - Expecting value: line 1 column 75 (char 74)"
endpoints.py,"{""type"": ""variable"", ""line"": 121, ""name"": ""name"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
telnet.py,"{""type"": ""comparison"", ""line"": 564, ""pairs"": [[""b"",  - Expecting value: line 1 column 53 (char 52)"
manhole.py,"{""type"": ""variable"", ""line"": 162, ""name"": ""CTRL_C"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
recvline.py,"{""type"": ""variable"", ""line"": 73, ""name"": ""TAB"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
helper.py,"{""type"": ""variable"", ""line"": 119, ""name"": ""TAB"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
window.py,"{""type"": ""comparison"", ""line"": 92, ""pairs"": [[""keyID"",  - Expecting value: line 1 column 56 (char 55)"
insults.py,"{""type"": ""variable"", ""line"": 362, ""name"": ""CSI"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_channel.py,"{""type"": ""variable"", ""line"": 113, ""name"": ""self.channel.name"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
test_recvline.py,"{""type"": ""function_call"", ""line"": 49, ""name"": ""self.p.keystrokeReceived"", ""args"": [ - Expecting value: line 1 column 84 (char 83)"
test_transport.py,"{""type"": ""function_def"", ""line"": 59, ""name"": ""NS"", ""args"": [""self"", ""arg""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 103 (char 102)"
test_agent.py,"{""type"": ""function_obj"", ""line"": 98, ""objName"": ""d"", ""funcName"": ""self.client.sendRequest"", ""args"": [""agent.AGENTC_REQUEST_RSA_IDENTITIES"",  - Expecting value: line 1 column 141 (char 140)"
test_ckeygen.py,"{""type"": ""variable"", ""line"": 327, ""name"": ""persistedKey"", ""value"": null, ""valueSrc"": ""key.fromString"", ""isInput"": false, ""args"": [""persistedKeyContent"", null,  - Expecting value: line 1 column 160 (char 159)"
test_conch.py,"{""type"": ""comparison"", ""line"": 130, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
test_ssh.py,"{""type"": ""variable"", ""line"": 163, ""name"": ""self.cmd"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_default.py,"{""type"": ""variable"", ""line"": 69, ""name"": ""client"", ""value"": null, ""valueSrc"": ""SSHUserAuthClient"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
test_openssh_compat.py,"{""type"": ""function_call"", ""line"": 43, ""name"": ""self.keysDir.child.setContent"", ""args"": [ - Expecting value: line 1 column 89 (char 88)"
test_cftp.py,"{""type"": ""function_call"", ""line"": 383, ""name"": ""d.addCallback"", ""args"": [""self.assertEqual"",  - Expecting value: line 1 column 94 (char 93)"
test_knownhosts.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""sampleEncodedKey"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_connection.py,"{""type"": ""variable"", ""line"": 53, ""name"": ""name"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_checkers.py,"{""type"": ""variable"", ""line"": 166, ""name"": ""self.key1"", ""value"": null, ""valueSrc"": ""_b64encodebytes"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 129 (char 128)"
test_insults.py,"{""type"": ""variable"", ""line"": 221, ""name"": ""TEST_BYTES"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_session.py,"{""type"": ""assert"", ""line"": 46, ""left"": ""name"", ""comparators"": [ - Expecting value: line 1 column 64 (char 63)"
test_filetransfer.py,"{""type"": ""comparison"", ""line"": 85, ""pairs"": [[""extName"",  - Expecting value: line 1 column 58 (char 57)"
test_keys.py,"{""type"": ""variable"", ""line"": 75, ""name"": ""self.rsaSignature"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
keydata.py,"{""type"": ""dict"", ""line"": 77, ""name"": ""ECDatanistp256"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""x"", ""y"", ""privateValue"", ""curve""], ""values"": [""long"", ""long"", ""long"",  - Expecting value: line 1 column 199 (char 198)"
test_helper.py,"{""type"": ""function_call"", ""line"": 48, ""name"": ""self.term.insertAtCursor"", ""args"": [ - Expecting value: line 1 column 84 (char 83)"
test_manhole_tap.py,"{""type"": ""tuple"", ""line"": 46, ""name"": ""usernamePassword"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 133 (char 132)"
test_tap.py,"{""type"": ""tuple"", ""line"": 50, ""name"": ""usernamePassword"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 133 (char 132)"
test_mixin.py,"{""type"": ""list"", ""line"": 30, ""name"": ""L"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 117 (char 116)"
test_endpoints.py,"{""type"": ""dict"", ""line"": 215, ""name"": ""services"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 123 (char 122)"
test_userauth.py,"{""type"": ""function_def"", ""line"": 74, ""name"": ""getPassword"", ""args"": [""self"", ""prompt""], ""defaults"": [null], ""return"": ""defer.succeed"", ""returnArgs"": [ - Expecting value: line 1 column 151 (char 150)"
test_manhole.py,"{""type"": ""variable"", ""line"": 135, ""name"": ""res"", ""value"": null, ""valueSrc"": ""manhole.lastColorizedLine"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 133 (char 132)"
test_telnet.py,"{""type"": ""variable"", ""line"": 29, ""name"": ""self.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
options.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""macs"", ""value"": null, ""valueSrc"": ""macs.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 118 (char 117)"
knownhosts.py,"{""type"": ""variable"", ""line"": 65, ""name"": ""comment"", ""value"": null, ""valueSrc"": ""comment.rstrip"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
ckeygen.py,"{""type"": ""variable"", ""line"": 277, ""name"": ""options[pass]"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
tkconch.py,"{""type"": ""variable"", ""line"": 412, ""name"": ""encodedKey"", ""value"": null, ""valueSrc"": ""base64.encodestring.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 142 (char 141)"
conch.py,"{""type"": ""variable"", ""line"": 285, ""name"": ""d"", ""value"": null, ""valueSrc"": ""self.conn.sendGlobalRequest"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 133 (char 132)"
cftp.py,"{""type"": ""variable"", ""line"": 134, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
connection.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""name"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
keys.py,"{""type"": ""dict"", ""line"": 51, ""name"": ""_curveTable"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 125 (char 124)"
session.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""name"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
factory.py,"{""type"": ""dict"", ""line"": 29, ""name"": ""services"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 122 (char 121)"
transport.py,"{""type"": ""dict"", ""line"": 86, ""name"": ""cipherMap"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 123 (char 122)"
filetransfer.py,"{""type"": ""variable"", ""line"": 30, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
userauth.py,"{""type"": ""variable"", ""line"": 70, ""name"": ""name"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
forwarding.py,"{""type"": ""variable"", ""line"": 44, ""name"": ""self.client.buf"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
sexpy.py,"{""type"": ""comparison"", ""line"": 13, ""pairs"": [[""s"",  - Expecting value: line 1 column 52 (char 51)"
channel.py,"{""type"": ""variable"", ""line"": 70, ""name"": ""self.specificData"", ""value"":  - Expecting value: line 1 column 72 (char 71)"
_kex.py,"{""type"": ""dict"", ""line"": 153, ""name"": ""_kexAlgorithms"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 129 (char 128)"
agent.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
postfix.py,"{""type"": ""variable"", ""line"": 63, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
wire.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""noise"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
loopback.py,"{""type"": ""variable"", ""line"": 274, ""name"": ""buffer"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
dict.py,"{""type"": ""comparison"", ""line"": 18, ""pairs"": [[""line"",  - Expecting value: line 1 column 55 (char 54)"
tls.py,"{""type"": ""comparison"", ""line"": 584, ""pairs"": [[""protocolName"",  - Expecting value: line 1 column 64 (char 63)"
ftp.py,"{""type"": ""variable"", ""line"": 3192, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
memcache.py,"{""type"": ""comparison"", ""line"": 232, ""pairs"": [[""cmd.command"",  - Expecting value: line 1 column 63 (char 62)"
finger.py,"{""type"": ""list"", ""line"": 14, ""name"": ""parts"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 121 (char 120)"
amp.py,"{""type"": ""variable"", ""line"": 300, ""name"": ""ASK"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
socks.py,"{""type"": ""variable"", ""line"": 90, ""name"": ""self.buf"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
basic.py,"{""type"": ""function_def"", ""line"": 29, ""name"": ""_formatNetstring"", ""args"": [""data""], ""defaults"": [], ""return"": ""None.join"", ""returnArgs"": [""str.encode"",  - Expecting value: line 1 column 152 (char 151)"
_v1parser.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""PROXYSTR"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
_v2parser.py,"{""type"": ""variable"", ""line"": 59, ""name"": ""PREFIX"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_v1parser.py,"{""type"": ""function_call"", ""line"": 26, ""name"": ""self.assertRaises"", ""args"": [""InvalidProxyHeader"", ""_v1parser.V1Parser.parse"",  - Expecting value: line 1 column 127 (char 126)"
test_v2parser.py,"{""type"": ""variable"", ""line"": 14, ""name"": ""V2_SIGNATURE"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_wrapper.py,"{""type"": ""variable"", ""line"": 25, ""name"": ""self.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_tls.py,"{""type"": ""function_call"", ""line"": 528, ""name"": ""self.assertEqual"", ""args"": [""cert.digest"",  - Expecting value: line 1 column 92 (char 91)"
test_basic.py,"{""type"": ""variable"", ""line"": 32, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
_twistd_unix.py,"{""type"": ""function_call"", ""line"": 266, ""name"": ""untilConcludes"", ""args"": [""os.write"", null,  - Expecting value: line 1 column 93 (char 92)"
_responses.py,"{""type"": ""dict"", ""line"": 59, ""name"": ""RESPONSES"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [""_CONTINUE"", ""SWITCHING"", ""OK"", ""CREATED"", ""ACCEPTED"", ""NON_AUTHORITATIVE_INFORMATION"", ""NO_CONTENT"", ""RESET_CONTENT"", ""PARTIAL_CONTENT"", ""MULTI_STATUS"", ""MULTIPLE_CHOICE"", ""MOVED_PERMANENTLY"", ""FOUND"", ""SEE_OTHER"", ""NOT_MODIFIED"", ""USE_PROXY"", ""TEMPORARY_REDIRECT"", ""BAD_REQUEST"", ""UNAUTHORIZED"", ""PAYMENT_REQUIRED"", ""FORBIDDEN"", ""NOT_FOUND"", ""NOT_ALLOWED"", ""NOT_ACCEPTABLE"", ""PROXY_AUTH_REQUIRED"", ""REQUEST_TIMEOUT"", ""CONFLICT"", ""GONE"", ""LENGTH_REQUIRED"", ""PRECONDITION_FAILED"", ""REQUEST_ENTITY_TOO_LARGE"", ""REQUEST_URI_TOO_LONG"", ""UNSUPPORTED_MEDIA_TYPE"", ""REQUESTED_RANGE_NOT_SATISFIABLE"", ""EXPECTATION_FAILED"", ""INTERNAL_SERVER_ERROR"", ""NOT_IMPLEMENTED"", ""BAD_GATEWAY"", ""SERVICE_UNAVAILABLE"", ""GATEWAY_TIMEOUT"", ""HTTP_VERSION_NOT_SUPPORTED"", ""INSUFFICIENT_STORAGE_SPACE"", ""NOT_EXTENDED""], ""values"": [ - Expecting value: line 1 column 928 (char 927)"
proxy.py,"{""type"": ""comparison"", ""line"": 45, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
_flatten.py,"{""type"": ""variable"", ""line"": 49, ""name"": ""data"", ""value"": null, ""valueSrc"": ""data.replace.replace.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 136 (char 135)"
server.py,"{""type"": ""tuple"", ""line"": 79, ""name"": ""supportedMethods"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 133 (char 132)"
resource.py,"{""type"": ""function_call"", ""line"": 340, ""name"": ""request.setHeader"", ""args"": [ - Expecting value: line 1 column 78 (char 77)"
template.py,"{""type"": ""function_def"", ""line"": 527, ""name"": ""renderElement"", ""args"": [""request"", ""element"", ""doctype"", ""_failElement""], ""defaults"": [ - Expecting value: line 1 column 136 (char 135)"
demo.py,"{""type"": ""function_call"", ""line"": 16, ""name"": ""static.Data.__init__"", ""args"": [""self"",  - Expecting value: line 1 column 88 (char 87)"
wsgi.py,"{""type"": ""variable"", ""line"": 285, ""name"": ""scriptName"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
http_headers.py,"{""type"": ""dict"", ""line"": 66, ""name"": ""_caseMappings"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 127 (char 126)"
twcgi.py,"{""type"": ""variable"", ""line"": 106, ""name"": ""qindex"", ""value"": null, ""valueSrc"": ""request.uri.index"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
_newclient.py,"{""type"": ""variable"", ""line"": 243, ""name"": ""delimiter"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
vhost.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""hostHeader"", ""value"": null, ""valueSrc"": ""request.getHeader"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 131 (char 130)"
client.py,"{""type"": ""function_call"", ""line"": 97, ""name"": ""self.sendHeader"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
util.py,"{""type"": ""function_call"", ""line"": 62, ""name"": ""request.setHeader"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
static.py,"{""type"": ""function_call"", ""line"": 68, ""name"": ""request.setHeader"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
http.py,"{""type"": ""comparison"", ""line"": 358, ""pairs"": [[""rest"",  - Expecting value: line 1 column 56 (char 55)"
script.py,"{""type"": ""function_call"", ""line"": 164, ""name"": ""request.setHeader"", ""args"": [ - Expecting value: line 1 column 78 (char 77)"
xmlrpc.py,"{""type"": ""tuple"", ""line"": 128, ""name"": ""allowedMethods"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 132 (char 131)"
error.py,"{""type"": ""variable"", ""line"": 346, ""name"": ""ellipsis"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
_http2.py,"{""type"": ""comparison"", ""line"": 940, ""pairs"": [[""header[0]"",  - Expecting value: line 1 column 61 (char 60)"
digest.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""scheme"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
wrapper.py,"{""type"": ""function_def"", ""line"": 41, ""name"": ""render"", ""args"": [""self"", ""request""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 111 (char 110)"
basic.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""scheme"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_xml.py,"{""type"": ""variable"", ""line"": 38, ""name"": ""s"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
test_xmlrpc.py,"{""type"": ""function_call"", ""line"": 343, ""name"": ""self.assertEqual"", ""args"": [""self.factories.headers[b'content-type']"",  - Expecting value: line 1 column 120 (char 119)"
test_resource.py,"{""type"": ""variable"", ""line"": 38, ""name"": ""request"", ""value"": null, ""valueSrc"": ""DummyRequest"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
test_agent.py,"{""type"": ""variable"", ""line"": 182, ""name"": ""inputBytes"", ""value"":  - Expecting value: line 1 column 66 (char 65)"
test_distrib.py,"{""type"": ""function_call"", ""line"": 89, ""name"": ""r1.putChild"", ""args"": [ - Expecting value: line 1 column 71 (char 70)"
test_flatten.py,"{""type"": ""function_def"", ""line"": 39, ""name"": ""test_nestedTags"", ""args"": [""self""], ""defaults"": [], ""return"": ""self.assertFlattensTo"", ""returnArgs"": [""tags.html"",  - Expecting value: line 1 column 162 (char 161)"
test_util.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""request.method"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
test_template.py,"{""type"": ""list"", ""line"": 333, ""name"": ""fragments"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 126 (char 125)"
test_vhost.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""bazroot"", ""value"": null, ""valueSrc"": ""Data"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 115 (char 114)"
test_error.py,"{""type"": ""variable"", ""line"": 26, ""name"": ""m"", ""value"": null, ""valueSrc"": ""error._codeToMessage"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 125 (char 124)"
test_script.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""request"", ""value"": null, ""valueSrc"": ""DummyRequest"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
requesthelper.py,"{""type"": ""function_call"", ""line"": 111, ""name"": ""headerSequence.append"", ""args"": [ - Expecting value: line 1 column 82 (char 81)"
test_newclient.py,"{""type"": ""function_def"", ""line"": 139, ""name"": ""justTransportResponse"", ""args"": [""transport""], ""defaults"": [], ""return"": ""Response"", ""returnArgs"": [200,  - Expecting value: line 1 column 153 (char 152)"
test_httpauth.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""self.realm"", ""value"":  - Expecting value: line 1 column 65 (char 64)"
injectionhelpers.py,"{""type"": ""variable"", ""line"": 50, ""name"": ""method"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
test_webclient.py,"{""type"": ""function_def"", ""line"": 83, ""name"": ""redirectTo"", ""args"": [""self"", ""url"", ""request"", ""code""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 130 (char 129)"
test_static.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""data"", ""value"": null, ""valueSrc"": ""static.Data"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
test_cgi.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""root.putChild"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
test_web.py,"{""type"": ""function_call"", ""line"": 49, ""name"": ""request.responseHeaders.setRawHeaders"", ""args"": [ - Expecting value: line 1 column 97 (char 96)"
test_proxy.py,"{""type"": ""variable"", ""line"": 31, ""name"": ""resource"", ""value"": null, ""valueSrc"": ""ReverseProxyResource"", ""isInput"": false, ""args"": [""127.0.0.1"", 1234,  - Expecting value: line 1 column 151 (char 150)"
test_http2.py,"{""type"": ""function_def"", ""line"": 63, ""name"": ""clientConnectionPreface"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 117 (char 116)"
test_tap.py,"{""type"": ""function_call"", ""line"": 96, ""name"": ""path.child.setContent"", ""args"": [ - Expecting value: line 1 column 81 (char 80)"
test_http.py,"{""type"": ""list"", ""line"": 113, ""name"": ""dateStrings"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 128 (char 127)"
test_http_headers.py,"{""type"": ""function_call"", ""line"": 74, ""name"": ""self.assertEqual"", ""args"": [""h.getRawHeaders"",  - Expecting value: line 1 column 95 (char 94)"
test_wsgi.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""self.assertRaises"", ""args"": [""RuntimeError"", ""self.resource.getChildWithDefault"",  - Expecting value: line 1 column 131 (char 130)"
grid_file.py,"{""type"": ""variable"", ""line"": 47, ""name"": ""EMPTY"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
keywrap.py,"{""type"": ""variable"", ""line"": 46, ""name"": ""a"", ""value"":  - Expecting value: line 1 column 56 (char 55)"
padding.py,"{""type"": ""variable"", ""line"": 112, ""name"": ""self._buffer"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
x963kdf.py,"{""type"": ""list"", ""line"": 50, ""name"": ""output"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 122 (char 121)"
hkdf.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""info"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
kbkdf.py,"{""type"": ""variable"", ""line"": 71, ""name"": ""label"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
concatkdf.py,"{""type"": ""list"", ""line"": 36, ""name"": ""output"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 122 (char 121)"
ssh.py,"{""type"": ""variable"", ""line"": 18, ""name"": ""key_parts"", ""value"": null, ""valueSrc"": ""data.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
aead.py,"{""type"": ""variable"", ""line"": 36, ""name"": ""associated_data"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
ciphers.py,"{""type"": ""function_call"", ""line"": 152, ""name"": ""self.update"", ""args"": [ - Expecting value: line 1 column 72 (char 71)"
backend.py,"{""type"": ""function_obj"", ""line"": 181, ""objName"": ""res"", ""funcName"": ""self._lib.ENGINE_ctrl_cmd"", ""args"": [""e"",  - Expecting value: line 1 column 112 (char 111)"
message.py,"{""type"": ""variable"", ""line"": 64, ""name"": ""_EMPTY"", ""value"":  - Expecting value: line 1 column 61 (char 60)"
auth.py,"{""type"": ""variable"", ""line"": 255, ""name"": ""user"", ""value"": null, ""valueSrc"": ""username.encode.replace.replace"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 140 (char 139)"
network.py,"{""type"": ""comparison"", ""line"": 240, ""pairs"": [[""chunk"",  - Expecting value: line 1 column 57 (char 56)"
_url.py,"{""type"": ""variable"", ""line"": 573, ""name"": ""bits"", ""value"": null, ""valueSrc"": ""quoted_bytes.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 127 (char 126)"
test_decoded_url.py,"{""type"": ""assert"", ""line"": 153, ""left"": ""_percent_decode"", ""comparators"": [ - Expecting value: line 1 column 76 (char 75)"
test_url.py,"{""type"": ""function_call"", ""line"": 1127, ""name"": ""self.assertRaises"", ""args"": [""TypeError"", ""URL.from_text"",  - Expecting value: line 1 column 109 (char 108)"
selector.py,"{""type"": ""variable"", ""line"": 41, ""name"": ""body"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""text.strip.replace.encode"",  - Expecting value: line 1 column 153 (char 152)"
test_adapter.py,"{""type"": ""variable"", ""line"": 1401, ""name"": ""STR"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
fuzzer.py,"{""type"": ""variable"", ""line"": 78, ""name"": ""out"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
java_wrapper.py,"{""type"": ""comparison"", ""line"": 29, ""pairs"": [[""fd.read"",  - Expecting value: line 1 column 58 (char 57)"
from_binary.py,"{""type"": ""variable"", ""line"": 42, ""name"": ""cursor"", ""value"": null, ""valueSrc"": ""binr.find"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 119 (char 118)"
jar_extract.py,"{""type"": ""variable"", ""line"": 89, ""name"": ""SIG_NANO"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
example_extra_headers.py,"{""type"": ""variable"", ""line"": 38, ""name"": ""headers"", ""value"":  - Expecting value: line 1 column 62 (char 61)"
example_basic_auth_deco.py,"{""type"": ""variable"", ""line"": 18, ""name"": ""auth"", ""value"": null, ""valueSrc"": ""req.headers.get"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 123 (char 122)"
example_basic_auth.py,"{""type"": ""comparison"", ""line"": 13, ""pairs"": [[ - Expecting value: line 1 column 47 (char 46)"
example_header_modes.py,"{""type"": ""comparison"", ""line"": 36, ""pairs"": [[""l"",  - Expecting value: line 1 column 52 (char 51)"
__init__.py,"{""type"": ""comparison"", ""line"": 106, ""pairs"": [[""l"",  - Expecting value: line 1 column 53 (char 52)"
app_helpers.py,"{""type"": ""comparison"", ""line"": 225, ""pairs"": [[""data"",  - Expecting value: line 1 column 56 (char 55)"
helpers.py,"{""type"": ""variable"", ""line"": 122, ""name"": ""body"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
multipart.py,"{""type"": ""comparison"", ""line"": 110, ""pairs"": [[""separator"",  - Expecting value: line 1 column 61 (char 60)"
app.py,"{""type"": ""variable"", ""line"": 400, ""name"": ""data"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
reader.py,"{""type"": ""variable"", ""line"": 52, ""name"": ""self._buffer"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
stream.py,"{""type"": ""variable"", ""line"": 103, ""name"": ""self._buffer"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
multipart.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""_ALLOWED_CONTENT_HEADERS"", ""value"": null, ""valueSrc"": ""frozenset"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 137 (char 136)"
reader.py,"{""type"": ""variable"", ""line"": 35, ""name"": ""self._buffer"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
uri.py,"{""type"": ""variable"", ""line"": 261, ""name"": ""tokens"", ""value"": null, ""valueSrc"": ""decoded_uri.split"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 128 (char 127)"
test_media_multipart.py,"{""type"": ""variable"", ""line"": 17, ""name"": ""EXAMPLE1"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_buffered_reader.py,"{""type"": ""assert"", ""line"": 75, ""left"": ""stream.peek"", ""comparators"": [ - Expecting value: line 1 column 71 (char 70)"
test_error_handlers.py,"{""type"": ""variable"", ""line"": 254, ""name"": ""res.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_response_media.py,"{""type"": ""dict"", ""line"": 98, ""name"": ""resp.media"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 124 (char 123)"
test_media_urlencoded.py,"{""type"": ""variable"", ""line"": 14, ""name"": ""stream"", ""value"": null, ""valueSrc"": ""io.BytesIO"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 120 (char 119)"
test_wsgi_errors.py,"{""type"": ""assert"", ""line"": 47, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_request_media.py,"{""type"": ""variable"", ""line"": 74, ""name"": ""expected_body"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
test_custom_router.py,"{""type"": ""assert"", ""line"": 61, ""left"": ""response.content"", ""comparators"": [ - Expecting value: line 1 column 76 (char 75)"
test_request_body.py,"{""type"": ""variable"", ""line"": 129, ""name"": ""expected_value"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [""expected_body"",  - Expecting value: line 1 column 152 (char 151)"
test_httperror.py,"{""type"": ""variable"", ""line"": 307, ""name"": ""expected_xml"", ""value"":  - Expecting value: line 1 column 68 (char 67)"
test_httpstatus.py,"{""type"": ""variable"", ""line"": 201, ""name"": ""res.data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_boundedstream.py,"{""type"": ""function_call"", ""line"": 17, ""name"": ""bounded_stream.write"", ""args"": [ - Expecting value: line 1 column 80 (char 79)"
test_media_handlers.py,"{""type"": ""variable"", ""line"": 51, ""name"": ""YEN"", ""value"":  - Expecting value: line 1 column 58 (char 57)"
test_buffered_reader.py,"{""type"": ""tuple"", ""line"": 41, ""name"": ""SOURCE1"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 124 (char 123)"
test_request_body_asgi.py,"{""type"": ""variable"", ""line"": 75, ""name"": ""req_event_emitter"", ""value"": null, ""valueSrc"": ""testing.ASGIRequestEventEmitter"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 152 (char 151)"
test_response_media_asgi.py,"{""type"": ""dict"", ""line"": 88, ""name"": ""resp.media"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 124 (char 123)"
test_sse.py,"{""type"": ""function_call"", ""line"": 117, ""name"": ""SSEvent"", ""args"": [], ""keywords"": [[""text"",  - Expecting value: line 1 column 93 (char 92)"
test_boundedstream_asgi.py,"{""type"": ""assert"", ""line"": 220, ""left"": null, ""comparators"": [ - Expecting value: line 1 column 63 (char 62)"
test_app.py,"{""type"": ""variable"", ""line"": 77, ""name"": ""fake_image_bytes"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_integration.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""fake_image_bytes"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
itsdangerous.py,"{""type"": ""function_def"", ""line"": 201, ""name"": ""base64_encode"", ""args"": [""string""], ""defaults"": [], ""return"": ""base64.urlsafe_b64encode.strip"", ""returnArgs"": [ - Expecting value: line 1 column 159 (char 158)"
signals.py,"{""type"": ""function_call"", ""line"": 48, ""name"": ""self.assert_equal"", ""args"": [""response.data"",  - Expecting value: line 1 column 94 (char 93)"
reqctx.py,"{""type"": ""function_call"", ""line"": 148, ""name"": ""self.assert_equal"", ""args"": [""rv.data"",  - Expecting value: line 1 column 89 (char 88)"
views.py,"{""type"": ""function_call"", ""line"": 23, ""name"": ""self.assert_equal"", ""args"": [""c.get.data"",  - Expecting value: line 1 column 91 (char 90)"
templating.py,"{""type"": ""function_call"", ""line"": 28, ""name"": ""self.assert_equal"", ""args"": [""rv.data"",  - Expecting value: line 1 column 88 (char 87)"
regression.py,"{""type"": ""function_call"", ""line"": 69, ""name"": ""self.assert_equal"", ""args"": [""rv.data"",  - Expecting value: line 1 column 88 (char 87)"
helpers.py,"{""type"": ""function_call"", ""line"": 90, ""name"": ""self.assert_equal"", ""args"": [""rv.data"",  - Expecting value: line 1 column 88 (char 87)"
subclassing.py,"{""type"": ""function_call"", ""line"": 37, ""name"": ""self.assert_in"", ""args"": [ - Expecting value: line 1 column 74 (char 73)"
blueprints.py,"{""type"": ""function_call"", ""line"": 49, ""name"": ""self.assert_equal"", ""args"": [""c.get.data"",  - Expecting value: line 1 column 91 (char 90)"
basic.py,"{""type"": ""function_call"", ""line"": 35, ""name"": ""self.assert_equal"", ""args"": [""rv.data"",  - Expecting value: line 1 column 88 (char 87)"
testing.py,"{""type"": ""function_call"", ""line"": 33, ""name"": ""self.assert_equal"", ""args"": [""rv.data"",  - Expecting value: line 1 column 88 (char 87)"
formparser.py,"{""type"": ""function_def"", ""line"": 317, ""name"": ""_find_terminator"", ""args"": [""self"", ""iterator""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 123 (char 122)"
_internal.py,"{""type"": ""dict"", ""line"": 33, ""name"": ""_cookie_quoting_map"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""keys"": [ - Expecting value: line 1 column 133 (char 132)"
urls.py,"{""type"": ""variable"", ""line"": 33, ""name"": ""_always_safe"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
serving.py,"{""type"": ""function_call"", ""line"": 134, ""name"": ""self.wfile.write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
http.py,"{""type"": ""comparison"", ""line"": 478, ""pairs"": [[""auth_type"",  - Expecting value: line 1 column 61 (char 60)"
tbtools.py,"{""type"": ""variable"", ""line"": 28, ""name"": ""_coding_re"", ""value"": null, ""valueSrc"": ""re.compile"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 124 (char 123)"
securecookie.py,"{""type"": ""comparison"", ""line"": 253, ""pairs"": [[ - Expecting value: line 1 column 48 (char 47)"
utils.py,"{""type"": ""variable"", ""line"": 298, ""name"": ""safe"", ""value"": null, ""valueSrc"": ""initialization"", ""isInput"": false, ""values"": [ - Expecting value: line 1 column 125 (char 124)"
prestapyt.py,"{""type"": ""variable"", ""line"": 496, ""name"": ""CRLF"", ""value"":  - Expecting value: line 1 column 60 (char 59)"
test_layer2.py,"{""type"": ""function_call"", ""line"": 450, ""name"": ""self.assertEqual"", ""args"": [""retrieved[BinaryData]"",  - Expecting value: line 1 column 102 (char 101)"
test_connection.py,"{""type"": ""function_def"", ""line"": 31, ""name"": ""getheader"", ""args"": [""self"", ""val""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 110 (char 109)"
test_connection.py,"{""type"": ""assert"", ""line"": 92, ""left"":  - Expecting value: line 1 column 40 (char 39)"
test_key.py,"{""type"": ""variable"", ""line"": 525, ""name"": ""first_content"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
test_connection.py,"{""type"": ""function_call"", ""line"": 278, ""name"": ""self.assertEqual"", ""args"": [""args[b'AWSAccessKeyId']"",  - Expecting value: line 1 column 104 (char 103)"
test_awslambda.py,"{""type"": ""function_def"", ""line"": 36, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_search.py,"{""type"": ""tuple"", ""line"": 54, ""name"": null, ""value"": null, ""valueSrc"": ""request.split"", ""isInput"": false, ""names"": [""_"", ""request""], ""args"": [ - Expecting value: line 1 column 143 (char 142)"
test_connection.py,"{""type"": ""function_def"", ""line"": 11, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_exceptions.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""response"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_writer.py,"{""type"": ""function_call"", ""line"": 113, ""name"": ""self.check_write"", ""args"": [ - Expecting value: line 1 column 77 (char 76)"
test_concurrent.py,"{""type"": ""variable"", ""line"": 43, ""name"": ""hash_chunks[i]"", ""value"":  - Expecting value: line 1 column 69 (char 68)"
test_layer1.py,"{""type"": ""variable"", ""line"": 87, ""name"": ""fake_data"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_utils.py,"{""type"": ""variable"", ""line"": 80, ""name"": ""chunks"", ""value"": null, ""valueSrc"": ""chunk_hashes"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 122 (char 121)"
test_vault.py,"{""type"": ""function_def"", ""line"": 114, ""name"": ""read"", ""args"": [""self"", ""amt""], ""defaults"": [null], ""return"":  - Expecting value: line 1 column 110 (char 109)"
test_qualification_doesnotexist.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""MOCK_SERVER_RESPONSE"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_qualification_exists.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""MOCK_SERVER_RESPONSE"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_qualification_qualtypewithscore_in.py,"{""type"": ""variable"", ""line"": 12, ""name"": ""MOCK_SERVER_RESPONSE"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_connection.py,"{""type"": ""variable"", ""line"": 8, ""name"": ""GET_FILE_UPLOAD_URL"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
test_locale_qualification_notin.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""MOCK_SERVER_RESPONSE"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_locale_qualification_in.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""MOCK_SERVER_RESPONSE"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_connection.py,"{""type"": ""function_def"", ""line"": 47, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_layer1.py,"{""type"": ""function_def"", ""line"": 12, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_identity.py,"{""type"": ""function_def"", ""line"": 36, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_vpnconnection.py,"{""type"": ""variable"", ""line"": 7, ""name"": ""DESCRIBE_VPNCONNECTIONS"", ""value"":  - Expecting value: line 1 column 77 (char 76)"
test_vpc.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""DESCRIBE_VPCS"", ""value"":  - Expecting value: line 1 column 67 (char 66)"
test_vpngateway.py,"{""type"": ""function_def"", ""line"": 13, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_routetable.py,"{""type"": ""function_def"", ""line"": 11, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_vpc_peering_connection.py,"{""type"": ""variable"", ""line"": 29, ""name"": ""DESCRIBE_VPC_PEERING_CONNECTIONS"", ""value"":  - Expecting value: line 1 column 87 (char 86)"
test_customergateway.py,"{""type"": ""function_def"", ""line"": 12, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_internetgateway.py,"{""type"": ""function_def"", ""line"": 11, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_networkacl.py,"{""type"": ""function_def"", ""line"": 11, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_subnet.py,"{""type"": ""function_def"", ""line"": 12, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_dhcpoptions.py,"{""type"": ""function_def"", ""line"": 11, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_policy.py,"{""type"": ""function_def"", ""line"": 33, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_connection.py,"{""type"": ""function_def"", ""line"": 33, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_connection.py,"{""type"": ""function_def"", ""line"": 49, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_layer1.py,"{""type"": ""function_def"", ""line"": 10, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_kinesis.py,"{""type"": ""function_def"", ""line"": 31, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_message.py,"{""type"": ""variable"", ""line"": 76, ""name"": ""body"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_kms.py,"{""type"": ""function_def"", ""line"": 31, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_api_interface.py,"{""type"": ""function_call"", ""line"": 11, ""name"": ""self.set_http_response"", ""args"": [], ""keywords"": [[""status_code"", 200], [""body"",  - Expecting value: line 1 column 129 (char 128)"
test_utils.py,"{""type"": ""function_def"", ""line"": 85, ""name"": ""hmac_hashfunc"", ""args"": [""cls"", ""msg""], ""defaults"": [], ""return"": ""hmac.new"", ""returnArgs"": [ - Expecting value: line 1 column 140 (char 139)"
test_connection.py,"{""type"": ""function_def"", ""line"": 31, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_connection.py,"{""type"": ""function_call"", ""line"": 105, ""name"": ""self.set_http_response"", ""args"": [], ""keywords"": [[""status_code"", 400], [""reason"", ""Bad Request""], [""body"",  - Expecting value: line 1 column 157 (char 156)"
test_stack.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""SAMPLE_XML"", ""value"":  - Expecting value: line 1 column 64 (char 63)"
test_emr_responses.py,"{""type"": ""variable"", ""line"": 34, ""name"": ""JOB_FLOW_EXAMPLE"", ""value"":  - Expecting value: line 1 column 71 (char 70)"
test_connection.py,"{""type"": ""function_def"", ""line"": 49, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_types.py,"{""type"": ""variable"", ""line"": 108, ""name"": ""data"", ""value"": null, ""valueSrc"": ""types.Binary"", ""isInput"": false, ""args"": [ - Expecting value: line 1 column 121 (char 120)"
test_connection.py,"{""type"": ""function_def"", ""line"": 45, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_connection.py,"{""type"": ""variable"", ""line"": 16, ""name"": ""body"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_search.py,"{""type"": ""tuple"", ""line"": 79, ""name"": null, ""value"": null, ""valueSrc"": ""request.split"", ""isInput"": false, ""names"": [""_"", ""request""], ""args"": [ - Expecting value: line 1 column 143 (char 142)"
test_connection.py,"{""type"": ""function_def"", ""line"": 12, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_exceptions.py,"{""type"": ""variable"", ""line"": 21, ""name"": ""response"", ""value"":  - Expecting value: line 1 column 63 (char 62)"
test_connection.py,"{""type"": ""function_def"", ""line"": 39, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_response.py,"{""type"": ""variable"", ""line"": 24, ""name"": ""text"", ""value"":  - Expecting value: line 1 column 59 (char 58)"
test_layer1.py,"{""type"": ""function_def"", ""line"": 30, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_snapshot.py,"{""type"": ""function_def"", ""line"": 12, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_instance.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""DESCRIBE_INSTANCE_VPC"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_connection.py,"{""type"": ""function_def"", ""line"": 27, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_reservedinstance.py,"{""type"": ""function_def"", ""line"": 9, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 105 (char 104)"
test_spotinstance.py,"{""type"": ""function_def"", ""line"": 10, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_instancetype.py,"{""type"": ""function_def"", ""line"": 20, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_securitygroup.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""DESCRIBE_SECURITY_GROUP"", ""value"":  - Expecting value: line 1 column 78 (char 77)"
test_ec2object.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""CREATE_TAGS_RESPONSE"", ""value"":  - Expecting value: line 1 column 75 (char 74)"
test_blockdevicemapping.py,"{""type"": ""function_def"", ""line"": 96, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_instancestatus.py,"{""type"": ""variable"", ""line"": 7, ""name"": ""INSTANCE_STATUS_RESPONSE"", ""value"":  - Expecting value: line 1 column 78 (char 77)"
test_attribute.py,"{""type"": ""variable"", ""line"": 8, ""name"": ""ATTRIBUTE_GET_TRUE_CZL_RESPONSE"", ""value"":  - Expecting value: line 1 column 85 (char 84)"
test_listener.py,"{""type"": ""variable"", ""line"": 10, ""name"": ""LISTENERS_RESPONSE"", ""value"":  - Expecting value: line 1 column 73 (char 72)"
test_loadbalancer.py,"{""type"": ""variable"", ""line"": 9, ""name"": ""DISABLE_RESPONSE"", ""value"":  - Expecting value: line 1 column 70 (char 69)"
test_group.py,"{""type"": ""function_def"", ""line"": 46, ""name"": ""default_body"", ""args"": [""self""], ""defaults"": [], ""return"":  - Expecting value: line 1 column 106 (char 105)"
test_keyfile.py,"{""type"": ""variable"", ""line"": 107, ""name"": ""self.keyfile.key.data"", ""value"":  - Expecting value: line 1 column 77 (char 76)"
writer.py,"{""type"": ""comparison"", ""line"": 56, ""pairs"": [[""data"",  - Expecting value: line 1 column 55 (char 54)"
key.py,"{""type"": ""function_call"", ""line"": 858, ""name"": ""http_conn.send"", ""args"": [ - Expecting value: line 1 column 75 (char 74)"
